(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    342303,       6029]
NotebookOptionsPosition[    340732,       5994]
NotebookOutlinePosition[    341177,       6011]
CellTagsIndexPosition[    341134,       6008]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"188269", "/", "240391"}]], "Input",
 CellChangeTimes->{{3.883131113459242*^9, 3.8831311168636756`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"6eff9c67-61f9-433a-a7f9-00f08fb05bf1"],

Cell[BoxData[
 FractionBox["188269", "240391"]], "Output",
 CellChangeTimes->{3.8831311198161135`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"e544e60b-ddec-416e-822c-2789fdbb947f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"188269", "/", "240391"}]], "Input",
 CellChangeTimes->{{3.883131113459242*^9, 
  3.8831311168636756`*^9}},ExpressionUUID->"71631daf-5c21-4566-bc92-\
7afeadc66169"]], "WolframAlphaLong",
 CellChangeTimes->{{3.8831311201169443`*^9, 3.883131121217568*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"4168af5d-a064-4a52-b9e8-f701ced0e5e1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "188269/240391", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"188269/240391"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["188269", "240391"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["188269", "240391"], 
              TemplateBox[{10}, "Spacer1"], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"irreducible\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[188269/240391, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"0.7831782387859778444284519803154028229010237488092316268\
079919797\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[188269/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"(\"", "\[NoBreak]", 
               TemplateBox[{"\"period \"", "7980"}, "RowDefault"], 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[188269/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{0.7831782387859778, 0.014097208298147599`}]}, 
                  "0.7831782387859778`"], 
                 Annotation[#, 0.7831782387859778, "Tooltip"]& ]}, ImageSize -> 
               330., Axes -> {True, False}, 
               PlotRange -> {{0.5482247671501844, 1.018131710421771}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Percentage", "scanner" -> "Numeric", "id" -> 
     "Percentage", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[(100 188269)/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TemplateBox[{"\"\"", "78", "\".\"", "3", "2"}, "RowDefault"], 
              "\"%\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[{{{}, {}, {{
                  Directive[
                   EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                   RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-1.7792613492530478`, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.7792613492530478`}]}}}}}, \
{}}, {{}}}}, {{{{{{}, {}}, {{}, {}}}, {}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, \
{}, {}, {}}}, {}}}, {
                GrayLevel[0.5], 
                Thickness[0.01], 
                CircleBox[{0, 0}]}}, DisplayFunction -> Identity, BaseStyle -> 
              Automatic, GridLinesStyle -> Automatic, ImageSize -> 50, 
              PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
              Scaled[0.05]], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[188269/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"59", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["421", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["571", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "3191"}], 
             DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[188269/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{
                 "\"[\"", "\"0; 1, 3, 1, 1, 1, 1, 2, 1, 2, 2, 4, 1, 4, 17\"", 
                  "\"]\""}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "8", "datatypes" -> "Math", "timedout" -> 
     "RecognizeConvergents,ContinuedFraction,Simplification,RootsOfUnity,\
Character,Music,Geometry,NumberComparison,Barcode,Date,\
MathematicalFunctionData,Recognize", "timedoutpods" -> "", "timing" -> 
     "3.285", "parsetiming" -> "0.067", "parsetimedout" -> "false", 
     "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa182912a6gad7758ffd5d000038adh754463b82g37794153569472399936", "id" -> 
     "MSP183012a6gad7758ffd5d000036617gb9id7e6f28", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "1", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa183112a6gad7758ffd5d000023bihh7688g98bbg7794153569472399936", "version" -> 
     "2.6", "inputstring" -> "188269/240391"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "Math", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "3.259", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "10", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "188269/240391"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2023, 1, 19, 10, 32, 9.0473844`8.709098007371937}, "Line" -> 2,
     "SessionID" -> 21638646411861547559}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37, 38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "188269/240391"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1376., {315.3544921875, 320.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa182912a6gad7758ffd5d000038adh754463b82g37794153569472399936", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8831311291493263`*^9},ExpressionUUID->"5fad2a75-0857-47d9-b1d2-\
cd03413129c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["196827/240391", "WolframAlphaLong",
 CellChangeTimes->{{3.8831311334403768`*^9, 3.883131145358836*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"4e2bcd4b-a535-465b-8427-637c887c9b7d"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "196827/240391", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"196827/240391"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["196827", "240391"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["196827", "240391"], 
              TemplateBox[{10}, "Spacer1"], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"irreducible\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[196827/240391, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"0.8187785732410947165243291138187369743459613712659791755\
930962473\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[196827/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"(\"", "\[NoBreak]", 
               TemplateBox[{"\"period \"", "7980"}, "RowDefault"], 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[196827/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{0.8187785732410947, 0.01473801431833971}]}, 
                  "0.8187785732410947`"], 
                 Annotation[#, 0.8187785732410947, "Tooltip"]& ]}, ImageSize -> 
               330., Axes -> {True, False}, 
               PlotRange -> {{0.5731450012687662, 1.0644121452134232`}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Percentage", "scanner" -> "Numeric", "id" -> 
     "Percentage", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[(100 196827)/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TemplateBox[{"\"\"", "81", "\".\"", "8", "8"}, "RowDefault"], 
              "\"%\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[{{{}, {}, {{
                  Directive[
                   EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                   RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-2.0029448476321177`, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -2.0029448476321177`}]}}}}}, \
{}}, {{}}}}, {{{{{{}, {}}, {{}, {}}}, {}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, \
{}, {}, {}}}, {}}}, {
                GrayLevel[0.5], 
                Thickness[0.01], 
                CircleBox[{0, 0}]}}, DisplayFunction -> Identity, BaseStyle -> 
              Automatic, GridLinesStyle -> Automatic, ImageSize -> 50, 
              PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
              Scaled[0.05]], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[196827/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"3", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["421", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["571", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "65609"}], 
             DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[196827/240391]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{
                 "\"[\"", "\"0; 1, 4, 1, 1, 13, 3, 3, 2, 1, 1, 13, 2\"", 
                  "\"]\""}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "8", "datatypes" -> "Math", "timedout" -> 
     "RecognizeConvergents,ContinuedFraction,Simplification,RootsOfUnity,\
Character,Music,Geometry,NumberComparison,Barcode,Date,\
MathematicalFunctionData,Recognize", "timedoutpods" -> "", "timing" -> 
     "3.283", "parsetiming" -> "0.054", "parsetimedout" -> "false", 
     "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa65762419bi0hd9966g450000140bi1i98i2781bh3629183885576317489", "id" -> 
     "MSP65772419bi0hd9966g45000048b0ec1ecg51c9f3", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa65782419bi0hd9966g45000014age26d26491h1b3629183885576317489", "version" -> 
     "2.6", "inputstring" -> "196827/240391"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "Math", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "3.1950000000000003", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "parseidserver" -> "2", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "2", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "196827/240391"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2023, 1, 19, 10, 32, 29.1851315`9.217736564521054}, "Line" -> 
    3, "SessionID" -> 21638646411861547559}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "196827/240391"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1376., {315.3544921875, 320.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa65762419bi0hd9966g450000140bi1i98i2781bh3629183885576317489", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.883131149300047*^9},ExpressionUUID->"ffd127f5-89a8-41d8-897e-\
e63529f4a9ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell["26496/54285", "WolframAlphaLong",
 CellChangeTimes->{3.883131423388755*^9, 3.8831314575308237`*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"0e6ae375-511e-4aa8-9ffe-4704f0d4319e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "26496/54285", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"26496/54285"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["26496", "54285"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["8832", "18095"], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[26496/54285, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"0.4880906327714838353136225476651008565902182923459519204\
200055263\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[8832/18095]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                PaneBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"0.48809063277148383531362254766510085659021829234595192\
04200055263\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], FrameMargins -> {{0, 10}, {0, 0}}]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   TemplateBox[{"\"period \"", "138"}, "RowDefault"], 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "RepeatingDecimal__More digits"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[8832/18095]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{0.48809063277148385`, 0.008785631389886708}]}, 
                  "0.48809063277148385`"], 
                 Annotation[#, 0.48809063277148385`, "Tooltip"]& ]}, 
               ImageSize -> 330., Axes -> {True, False}, 
               PlotRange -> {{0.3416634429400387, 0.634517822602929}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Percentage", "scanner" -> "Numeric", "id" -> 
     "Percentage", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[(100 8832)/18095]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TemplateBox[{"\"\"", "48", "\".\"", "8", "1"}, "RowDefault"], 
              "\"%\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[{{{}, {}, {{
                  Directive[
                   EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                   RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {0.07482876118801896, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    0.07482876118801896}]}}}}}, {}}, {{}}}}, {{{{{{}, {}}, \
{{}, {}}}, {}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
                GrayLevel[0.5], 
                Thickness[0.01], 
                CircleBox[{0, 0}]}}, DisplayFunction -> Identity, BaseStyle -> 
              Automatic, GridLinesStyle -> Automatic, ImageSize -> 50, 
              PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
              Scaled[0.05]], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[8832/18095]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               SuperscriptBox["2", 
                TagBox["7", HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "3", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["5", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["7", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["11", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "23", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["47", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]]}], DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[8832/18095]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{"\"[\"", "\"0; 2, 20, 2, 30, 3, 2\"", "\"]\""}, 
                 "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
               DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "8", "datatypes" -> "Math", "timedout" -> 
     "RecognizeConvergents,ContinuedFraction,Simplification,RootsOfUnity,\
Character,Music,Geometry,NumberComparison,Barcode,Date,\
MathematicalFunctionData,Recognize", "timedoutpods" -> "", "timing" -> 
     "3.297", "parsetiming" -> "0.067", "parsetimedout" -> "false", 
     "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa977322815152ig3339d800001b69gg2gcaehfe8a8884920455003441207", "id" -> 
     "MSP977422815152ig3339d800003fa5h03f4bhaeh2a", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa977522815152ig3339d800000dc04g7aa3i2c6bd8884920455003441207", "version" -> 
     "2.6", "inputstring" -> "26496/54285"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "Math", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "3.243", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "18", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "26496/54285"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2023, 1, 19, 10, 37, 42.0700132`9.376547522886128}, "Line" -> 
    4, "SessionID" -> 21638646411861547559}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "26496/54285"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1376., {327.3544921875, 332.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa977322815152ig3339d800001b69gg2gcaehfe8a8884920455003441207", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8831314622089353`*^9},ExpressionUUID->"d00e158a-4285-4efc-8c8a-\
44a8688e5c92"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1876/6425", "WolframAlphaLong",
 CellChangeTimes->{{3.8831320026704826`*^9, 3.8831320104510336`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1108bce2-b117-4c79-8f16-02fae18baf70"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "1876/6425", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1876/6425"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["1876", "6425"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["1876", "6425"], 
              TemplateBox[{10}, "Spacer1"], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"irreducible\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[1876/6425, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"0.2919844357976653696498054474708171206225680933852140077\
821011673\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[1876/6425]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                PaneBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"0.29198443579766536964980544747081712062256809338521400\
77821011673\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], FrameMargins -> {{0, 10}, {0, 0}}]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   TemplateBox[{"\"period \"", "256"}, "RowDefault"], 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "RepeatingDecimal__More digits"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[1876/6425]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{0.29198443579766536`, 0.0052557198443579775`}]}, 
                  "0.29198443579766536`"], 
                 Annotation[#, 0.29198443579766536`, "Tooltip"]& ]}, 
               ImageSize -> 330., Axes -> {True, False}, 
               PlotRange -> {{0.20438910505836574`, 0.379579766536965}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Percentage", "scanner" -> "Numeric", "id" -> 
     "Percentage", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[(100 1876)/6425]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TemplateBox[{"\"\"", "29", "\".\"", "2"}, "RowDefault"], 
              "\"%\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[{{{}, {}, {{
                  Directive[
                   EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                   RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {1.307000336660781, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    1.307000336660781}]}}}}}, {}}, {{}}}}, {{{{{{}, {}}, {{}, \
{}}}, {}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
                GrayLevel[0.5], 
                Thickness[0.01], 
                CircleBox[{0, 0}]}}, DisplayFunction -> Identity, BaseStyle -> 
              Automatic, GridLinesStyle -> Automatic, ImageSize -> 50, 
              PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
              Scaled[0.05]], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[1876/6425]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               SuperscriptBox["2", 
                TagBox["2", HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["5", 
                TagBox[
                 RowBox[{"-", "2"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "7", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "67", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["257", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]]}], DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[1876/6425]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{
                 "\"[\"", "\"0; 3, 2, 2, 1, 4, 1, 3, 12\"", "\"]\""}, 
                 "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
               DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Egyptian fraction expansion", "scanner" -> "Rational", 
     "id" -> "EgyptianFractionExpansion", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               FractionBox["1", "4"], HoldForm], "+", 
              TagBox[
               FractionBox["1", "24"], HoldForm], "+", 
              TagBox[
               FractionBox["1", "3147"], HoldForm], "+", 
              TagBox[
               FractionBox["1", "161755800"], HoldForm]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "3.1550000000000002", "parsetiming" -> 
    "0.056", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP300811gabi2i711e0f7400003i6h3935efdci99h", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa300911gabi2i711e0f74000063e5e12f492b7c546430556393126808734", "version" -> 
    "2.6", "inputstring" -> "1876/6425"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2023, 1, 19, 10, 46, 57.3228295`9.510902453062766}, "Line" -> 
    5, "SessionID" -> 21638646411861547559}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "1876/6425"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1376., {362.3544921875, 367.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8831320173877935`*^9},ExpressionUUID->"433d1d0f-fbc4-4bb1-9923-\
ea69e9770a0f"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQdcFNfeuL/vff+/++bemxtzk9xUoyn2aBJLLNgLiNgogooFUCmCgIqK
ir3X2HvvDVFB6U2aghQVVHrvC7tUu+7/yw4Mw+7s7IIej5Lv8znZzJw5fWaX
mWePZ3+c5mho9TeRSOT0EbwYWjgPnjvXYpHRp7Bj7OA009rBcsYIh3mW1pZz
e0/7X4i8+v+JRCv+TySq2ZYhCIIgCIIgzYvXHF7V8bKOF3U8byTPEKQhjb2E
AObaY69G9vrkXrS030AIgiAIgiAIgiAIgiAIggjxuiECFpoETdCSyPvJW782
hM0zymcEQRAEQRAEQRAEQRAE+SB4rcQrDi8RhAavGoLyGUEQBEEQ5C8F3BBW
V1ffvXt3x+5j5nP/HD5907CpKyfbLd/y596wsDCxWEy7gQiCIAiCIEjjULbQ
CiIaQd4xvNck7TcKgiAIgiAI8i4okVaMtV32+RhTwxVrxy/eMXrOoYkrdkxZ
v7aXodOnnQ2mz17z5Okz2m1EEARBEARBGg2v8WsstLUl8l7T5OuK9psDQRAE
QRAEeUeUSCu7GiwQ/WH/Dx3bcZZzrB0Wm9vO7z7a+hezXT1sTnYYv/aTXpOH
T3Z6/vI57ZYiCIIgCIIgTeStiGgEeXNovxUQBEEQBEHeI0JCQg5wOHz4cHBw
8IsXL95lG86dO5eXl6ccD5Hnzp1/K1WMc9on0loq6mq5ZMWa0JBgD/9QV8/g
G9fdtcdZfWS896tJS74eP+1/9UzmrNn3VqpDEARBEARBPixoC0vkvYb25Ykg
CIIgCPIB86whUqnU3d09ODj4XbYhLy/v1KlTCgqaN7Jp+N5+JOrnIhqw2mre
0qSEe75RSTtCcmZcTNrvEx8W7NdW21hks/7/rOx+WDHuX8MmP0zPViog3f/A
pViJql3VSGIv8aTUMLvGtXAyHPBPb1Ry5fQ1TW5kvQiCIAiCIAiCIAiCIAiC
IAqEhYUdPHiQO/kZdiFSKpUePnz4HTdGwTa/RfkMTF19SjR2r0hn0Y1rVzIz
swqeyA48qloYW3Yu+XFsUtZcZ/sRpwfYhQwdcHSYyMRsyf4zSgU0yj/zHuVG
kvHPkthLl/z9L2mepab8S4rp5VIa/TOCIAiCIAiCIAiCIAiCIG/GwYMHJRIJ
d/JzeXk5RMLGgQMH3n17WOf8duUz0N56rcjsiMhwdWiQX1y2OKrs9bbUxy6P
nlwrePWwoGDLlh2iactE280Gneoqsps4bM5mpQI+AP9co59jJcyrZjlqylcU
1hDn79/YedcIgiAIgiAIgiAIgiAIgiAKHDhw4NmzZ7yRVPyzrE5Bv135DHw6
faHIabdIf/21C2fOxeUcyXm9KvnF/EeF5wpD0sXJ06xniNZcFa2IEjksEM0e
/+u0dUoFqPLP8o1Yf2b2uDwq3Z+dTV6ztAWTkjdSXpJ8tQv2ADdGXq7mHrhO
PDcQ0LWGua5whcrYtrFrcDCZ65tX3+7aJPJD6WwLUVIjCIIgCIIgCIIgCIIg
yHvHAUHeZTP+Iv75i2lLRA4bRdMvjjOdEpOQuOGuZH1i0fHiHQ+q3f08/QeN
7zDEd75o92GR3TqRuXn36VuVChDwz3Vutn7xZd6pzuoi0/1Zfc2RxRor3nrt
zBXQNaVxTXfD4mprrxfQtVmV51037C+zyb+0NYIgCIIgCIIgCIIgCIIgSA3v
m38mt/5GT4ddImtn0dKbomEzTMcb+/v5RSbE30+MOnn09Omj59YdW2AXOGzC
1UGiBeNF+nONl5xWKkBw/nNjVTO7XT8fuW6OsdLs5QaCV3myNOcIm7QmFXe6
skQxVrEXdZnrRHQDK17XOOVecMQ1giAIgiAIgiAIgiAIgiBIQwT8c2ho6Dtu
DNHfH3Q56C+yshbNW/a37VHf65m3+7V73wH9O/f66Ysu/zvUsFdkePTeg04/
Lu4omjZSNGTFIfcYpQIaLqtc73Lf3D83NLjC/lklnPU9GghqzfwzU2s6W7Vy
89hmcZvEUyKCIAiCIAiCIAiCIAiCIAjDwYMHy8vLuTFVVVUQ+e5bwmub36KC
ziwo+1x/jcjimGhzzNDzjybuuz555Xbj1fMmnHH+1qW79ug/olaM2zerp0hH
r+34fZWPnyuXwF3Jon6NjDf0zw1KlSmU3Yj1NxRFNWuGFXUx7/obddVyd+rm
QysutcFpMOpnBEEQBEEQBEEQBEEQBEFUExYWdvDgQe6sWdiFyHffknPnzvN6
Zog8d+7cW6li2/lY0ehTolleoj+j9d3S14QX740pX3mrqv2BHaL+/x7U7h+x
Cwfsth6574KPigI4i2XwT1FW+tm+hj81yBvZYAmO+nWkG/f7g8rzpOvcsPKy
Icq/P8jmYGVyA+8sb4q/P2f+s/wHDfkWAUEQBEEQBEEQBEEQBEEQBPmrMn/z
BZHeUZGdj2hV6Je7Y7ofvtvm8EOR/UrRyB6ijj30u/4Uv7jvlXkjCwoKaLf0
vUXzJUEQBEEQBEEQBEEQBEEQBEH+QlRXV7us2Pr50NUig7Oi6Z6imQGi6ZdF
uvaivlbfDZzutGDJ3BGdw2Z2PLJxEe2Wvregf0YQBEEQBEEQBEEQBEEQBOHh
xYsXlZWVkZGRa9btGGe5YoDJMi39efpT5y5fudHPz6+goCA8PMzZcvzdu3G0
W/regv4ZQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAE
QRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEIUIZ
0twpR5o1FUizphJp1lQhzZpqpFnzGGnWPEGaNU+RZs0zpFnzHGnWvECaL7Tl
KEIc2n4UIQttP4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLT9KEIW2n4U
IQttP4qQhbYiRQhCW44ixKHtRxGy0PajCFlo+1GELLT9KEIW2n4UIQttP4qQ
hbYfRchC248iZKHtRxGy0PajCFloK1KEILTlKEIc2n4UIQttP4qQhbYfRchC
248iZKHtRxGy0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYiRQhCW44ixKHt
RxGy0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYfRchC248iZKHtRxGy0Paj
CFloK1KEILTlKEIc2n4UIQttP4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GE
LLT9KEIW2n4UIQttP4qQhbYiRQhCW44ixKHtRxGy0PajCFlo+1GELLT9KEIW
2n4UIQttP4qQhbYfRchC248iZKHtRxGy0PajCFloK1KEILTlKEIc2n4UIQtt
P4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYi
RQiimcK8ZC6qp+f62LLY9T3l/5cfYjbenAa1mF9SPiqvqL7qN6qpQRGwD/W9
jZI1q1ygm5pkb1wj1flL15oC496iEIUCzV3fYnlNxpUdaVXtaWrf4+SXytsc
NIGK6t94vBXS9qMNidsAI7Mh7h3VVDcy76TC+mqJ1OdqIbJw5e7V1lLjKN3g
mFvlvY1Q9cZ7mkhNyKBhyreLcr0CLaHVyPcL2n4UIQttP4qQhbYfRchC248i
ZKHtRxGy0PajCFlo+1GELLQVKUKQN3aeb9c/CxSlfPQNqmaEM/8eaTjNrjHe
ja35L+Wf36BtNea2rhlx69fzN6hR5b/1gVJHQ8vtas4/qm/fhL7/yN1zva2N
27DBVSg5h3qv+97BFdDyDjINraysEc+NFLXonz8YaPtRhCy0/ShCFtp+FCEL
bT+KkIW2H0XIQtuPImSh7UcRstBWpAhB3th5fpj+uYH4fbf6uUGzm9AF9M9v
Mev77J+5Al0ImsqUDjVy1kJT4azAe+yfoVt1TYNNiw3wX00nm6Kf0T9/OND2
owhZaPtRhCy0/ShCFtp+FCELbT+KkIW2H0XIQtuPImShrUgRgjTVebIxCrN5
m7qqBH8t9WX2XL++YY2cVSyaUhtHQNfrZ5V94RjqhmmaUjWnBK75rq+R0yGe
SO7Is63ruf5SbcradUTYlVLk/llpIYoalWpu3lO+z2pVeaqaBPWLPjTJI7P+
WV7yevOGq0coFa4YwbaNu0xJE9pR0x1FX8xXl6p2NYyqH0L5cd6MbE7ejjcS
Af3csKm1vrKuDXViVi5aXWvj67xmTaSFRd3cYZ5cDWJrIxUjFPYVdlnBK9/Y
YCFq0ID65PJjTVLBKvUz1y2z29zmuVqwJ1GxK/zjBpFsEu4YwiYnq4qBaUrH
2DbDRu186LrVNyo5wla+sbFubFmHW7NABxOzsV7t1kXWNKuuFGajgQGGZDWx
9anr0jQKQf+sWHbD7rixjf9rKWnafhQhC20/ipCFth9FyELbjyJkoe1HEbLQ
9qMIWWj7UYQstBUpQhCNlWk9chGq7J8baNUmzUvm1sLY1poYZkvuVFXX2Hig
QLYUPrXbsC9sItjtWZuRLeGNu9mgpw3X1uaNhA3uBG55gRwnXduqutwNlWy9
aq7zokwkR3e+6fxlrn/miF5mS7Fwjsh1NZdvKbetyS2pFbUNtLBiXeyAKBxS
XuKZ25gGI8kR6Qomv8HxRrdd0XDzN1VuRLmumNW/Io6CrY/keFTlXMqrG3Ok
rqtFzVbDdYoVdxv457oK6quq3+KsMNFUTasIn39W2TxVI8AZN85mwy5wq2cr
UBqoxlNXVm1+5n8cX8wVthyJq7QlF731KWtzs8tHc3x2zaeZPF3tHGuOm24S
bvWGvx6OZL5Xm6quHZzusO34ixlo2n4UIQttP4qQhbYfRchC248iZKHtRxGy
0PajCFlo+1GELLQVKUIQjZWpuvnPnJm6DcRq48Rsw1oaGF5B490Eagvn1qG6
L3Wpamz0JeWMTe0ma5UbLgRda7t5I+XZezb4oURVC3rUbtdZUBG/w5Rv9+S6
1jjG9TdZ+zac/6wgbBUKj1MYalcVmvcNkFfRcFq3Ul3Kh3imH6vqTn2yup6/
jS4oNkBlUxXmA9c7TI4m5YnkzaU8tbjBNN/6CcEK85k5urXh/GcFG9xAHTd1
KYxGzX9W2TwVI8A/iVpVvzh6W3mgmgBTXF2hzGhxVt9oOGG4VtLWbTdYpYMT
yRHKtXa5LmWNBnZjtuuiOOa6Saie/8yZhi2qlee83XljBf6hQduPImSh7UcR
stD2owhZaPtRhCy0/ShCFtp+FCELbT+KkIW2IkUI0mhlqhjDdbZvuIryu/XP
TOmX+Krg6QvTFGYytHzdjSbr5wbNrqupcf5Z7osbHBH0z/Umk51TqyBImQJd
FfXnW1l/g0/D1heuoeZ9M2orEahL+RB1/6yYUWVTNfCobIqm+Wcel8rY1oY/
l8e3/gYJ/6xSQKtSx7zNexv+WfEXA5u6KDW3Z/LFP+qdtsUGjlZ+S/65Nikz
C1m+7kbDFaYZVfyW199o2BLV3eFJ17yh7UcRstD2owhZaPtRhCy0/ShCFtp+
FCELbT+KkIW2H0XIQluRIgRpvDJViGmwHPGb/RIhby2k1t+oK5N3IjFPX2p8
M2flDXPzpq0xUsY//1lxqQ3F5UcaRtauCMJZRVrQP7Mis8ECEYqCVNmTclaA
aKw4VeOfOYUrr9L8lvyz6/q6jGy3BepSPtS09TfUd1xz2Inbwk1VWkeifqWL
Wk/aIFLV6hP1q2Iorb/Br4kVlsGo2xX0z29l/Y2KBmt7MGVtqFuJujZSqdVK
zVM1Apr7Z+WFSN78pw0ZU96ghRwTLOifNVp/o36Tu/KGhYWFgjVuwk8eNmyM
ckxNSxoe4zv0l9PP6J+bObT9KEIW2n4UIQttP4qQhbYfRchC248iZKHtRxGy
0FakCEEarUwVY3h/s6/J62/Uw1nEmNldr1xj7cEmT7uu179K3VTuCzexYsYm
d5NTSH2NwpFsI1klr3b9DXb9YHNz/vnP9Xq6ZlPp1wobiaB/Vi6cu6CE4vob
dcmb+vuDiv0QqEvxULlyWzmN4c3I65zfbAo3pxP8i5aYK/zyXQNfKv+pwRoa
/LheXEPZ2SAX6zw5ubgrSzCrQ3CPKyYX9s/16Zv++4OKjVfytTVtsahf/7lh
b2ojFH8xUNg58/TLlbvSseJPHTZ1/Q2lLwBcLUQN5y8L+Of61ZdV/P6gwhRn
bgLFEpo4/VnT3x/kWX+j/lr9S9ln9M/NHdp+FCELbT+KkIW2H0XIQtuPImSh
7UcRstD2owhZaCtShCBNU6jIB0RT1SfyYaBCZDZ5dYt3xVtZsOIvAG0/+g5Q
ttZ/IWj7UYQstP0oQhbafhQhC20/ipCFth9FyELbjyJkoe1HEbLQVqQIQWjL
UYQ4tP0oQhYV2vJ9989vZbmKvwK0/eg7AP0z0myh7UcRstD2owhZaPtRhCy0
/ShCFtp+FCELbT+KkIW2IkUIQluOIsSh7UcRsqjQlu+nf34bS1T8xaDtR98B
6J+RZgttP4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLQVKUIQ2nIUIQ5t
P4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYf
RchCW5EiBKEtRxHi0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYfRchC248i
ZKHtRxGy0PajCFlo+1GELLQVKUIQ2nIUIQ5tP4qQhbYfRchC248iZKHtRxGy
0PajCFlo+1GELLT9KEIW2n4UIQttP4qQhbYfRchCW5EiBKEtRxHi0PajCFlo
+1GELLT9KEIW2n4UIQttP4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLQV
KUIQ2nIUIQ5tP4qQhbYfRchC248iZKHtRxGy0PajCFlo+1GELLT9KEIW2n4U
IQttP4qQhbYfRchCW5EiBKEtR5G/ELRNLfIXgrY2Rv4qoH9GBKDtRxGy0Paj
CFlo+1GELLT9KEIW2n4UIQttP4qQhbYiRQjC1YMvEQRBEASRo/bpBv0zIgxt
P4qQhbYfRchC248iZHkHChShCG0/ipCFth9FyEJbkSIEYeUz7YYgSHPjwYMH
e/bs2Yp8UMApgxNH+9pB3hfUCkb0z4gAtP0oQhbafhQhC20/ipCFth9FyELb
jyJkoe1HEbLQfv5DCIL+GUEIsWfPHrFYLEM+KOCUwYmjfe0g7wtqlxVC/4wI
QNuPImSh7UcRstD2owhZaPtRhCy0/ShCFtp+FCEL7ec/hCDsQzTtqwxBmhtb
t26lLVORpgAnjva1g7wvlKoD/TMiAG0/ipCFth9FyELbjyJkoe1HEbLQ9qMI
WWg/HyBkoa1IEYIo+2dvObxXwgLnhfYOs+1mOcy0nWUz09bKeuYMS+tp0y0t
LKbPnGmbmpratAsM/kaUlJYWi0vgWa1pJTQB6Iutnb219czpM6zMzKdZWdmk
pKS8rcL9/Pzi4uJKS0ubkDc8PDwkJOTmzZvBcoLkQIxEItGwBA+P62vXrl+y
ZNnZs+ea0IC3yDv768DcRjYtLwysSI7mI6wh6J8/UN7cPz8tLy/ZtevxhQtP
NftUmb9g4cKFLgucF82b7+w0b8GcufNmz3ZycJxjb+9Y+3lrU/N5a2lpPX26
pbm5BZagqgRlPl36oO2m5HbrEtqvivmv7XVNsnApUgf6Z0QA2n4UIQttP4qQ
hbYfRchC248iZKHtRxGyNPZ+HvmwoK1IEYKw/pl9OzP+WSaTKb/TZ9k7Qvzz
F6+ev3j55NmLsson2YXSmEc5U6eah4SEzrC0Sk5ObsIHCNzjiUtKO0/fk5Se
XV5eriqZVFJsP7nD6IFfqA0mej+prdTGxpZxTa9evZ44cVJwcPDkyVMSExMF
sgQEBGjYIz8/v5KSEn9/fw3Tc7l58yacDolEUlpaWlxcnJubC/WmpqZCCyFG
kxLWrl3PdM3Ozq4JDWgCvCMDf/rhzHJvAGAb7vceywNz46d5FZC+srKyQg48
1MMuewhqgZGBV01apUxhfjbjnwvzczRvjyq4lb6Rf04B3tSjIk0DTlyjLiEF
4EPs9OnTMdeuVZ075z91qsAVwmJrZz9sbe7glRkDlyb1W5TQZ35szzmRPRxC
u9oG/mrl3XmaR8epl9uZnm9jcjIoQ2ZkZIwl8JbAO7b/a3szr0oWXiC7kCL7
h8kR5QTC5KsD/TMiAG0/ipCFrh1FSEPTjSLkoWtHEdI09n4P+bCg7UcRstBW
pAhBlP0zwEgY5Xf6zJl2EJ9QUP1AHuLzKqMzJMEJBZMmTYH44OCb5uYWSUmN
UNDwt7+islIilYpLSkXDVn4yfJFfxN1SiYQ3sVRSbKH/be4t24xQm61bt79+
/frVq1cvX7568eIlXKTwOTRnjpPvCQPPI2N0+36utmqLaTOgzfcKn8UXPTMy
Ggfb/v7+RobjBLKoklElJSUpKSncGF9fXxhSLy8vtc1QJjg4GPIWyMnPz8/J
yYGGQUxqampgYCDUxZtrp3X/jZN+Xzfxt1UTui1Zsow5g9OmTV8wuqPTyA6z
R7RfYNRdk9olEklhYaGk4SngjeTCOzJwcitrfpyrirnHgyc12D4feH/xEf/F
h/32X7v9IC0PHs/V3iFAdqg6Nzf3wYMHsbGxcXFxycnJMA4wJnAIHhBK5ED5
mrRKgSpJQWLIKcY/wwbsqs0ijJB/TtluJbLyVJSdnlYiFq3tKUyUFmzX/MdN
zp+9NrWIkxgSajER21NUpUEEeBP/zMjnGzc8r1y5unSi6SojI4ErhMXaxrb1
2AMaBn19QyyBtwTesf27mZtPxqtVES9dQl/+a+Qm5QTCZKsD/TMiAG0/ipCF
th9FyEJZjyKEoe1HEbI09n4P+bCg7UcRstBWpAhBWP+sySe5lZWNTCZ7WFid
V/kqvya8zCl7nlJUPWGCKeNtgoKCJk2aovmfBrh3tz1yRzTumGjUdtGwlaJ+
c78fOS+/oFBV+imjv0m7aXVp94iNG7coyGf4O2Nv7xjuOsFtr55278/UVs04
80Tx87yq16NGjRkxQk9bW2fw4CECWQICAnjjHzx4cPfu3Zs3b1ZWVjIxPj4+
MKQ3btxQ2wwW3mU3YCMrK8vPz485RykpKf7+/rzZN076/UnqWUf7WVbWM6Fr
dnZ206ZNHzN6LOw62ts+f7DBTqet2jaUlpampaV5enrCK2wLRCrAOzJw615U
LJ60xae8vALCoqNBLYy2iXTW1pzooctEgxeLBjrbbrkEhwRuAh/L9XJkZOSV
K1euyrkmB8Y2Li6OMc+3b9+G1yq5ylbbKgaosaCgIPH+ndSIUw9CjjHyN+Hm
kdTwkxAJh5p8X8qtlOOfU7Yz/pffPzeMhLS1HprdEs7OxNbp6Zq0Vp6QKwUO
MdmV0iCCwIlTewnx87jsdcne2NA9cLWaGI/XHqZdUlQkcIWwWFpal5TA20si
kUilUnivlzPvmoqKSiZUVlaxYcyYsc2+BGdn58zMrMaWwDu2/xh3aL7Ps5Gn
n0D4ZKCzcgJhMtSB/hkRgLYfRchC248iZKGsRxHCNPZ+APmwoO1HEbLQ9qMI
WWgrUoQgyv6ZWX+D95N8+nRLmUz2qKi65ImsFMLTmteiqpfGxuONjIwNDY30
9Q14rQJDblbcoc3d9q5pxwTYhpu7Lgv93G+ncOc/JyWnqCrBVO/rB77T3PaP
XLt2g4J8hvuImTPtgs4an9uuM/iP/6gqwcvz4sb1c/btWW5sbAJ9yZS+kDyV
QciSvnj+4mWPHr3gECSAZMp5VcmomJgYqVSalpbm7++fn59fU4uXF8R4eHio
aoYyqpbdCAoK8pXj4+MD5wVK5s2+buJvTxKPwFl4/fo1vGfhtrm8orJUIi0q
FkNkVbitzbA2attQVFR048aNy5cvX7t2jbHNjHyGXYiEQ0VKMo2Bd2Sq5f5Z
NGbXyOVuXWYeFeluEOms1Vt8+rRvjEdY/J7LoS10XUR9Zy/cc6WiokJVk2BA
oqOj3dzcYDATEhJgQBITE0NDQ6FJ7u7uUG9YWBgcaqx/Li8rEwlSrtk3MsJD
obT+hpJqlnFtM0+qhhn4srOOma/A2gzKaRBBmuif5fL5SZJpQYiWpclg7WHa
hYU8X6Xxljlt+gyJRCqyvQWhvLyC2eANVVXVI0eOUlUCa33lVGYke0eHLL3j
bxIZYPsw7lBBTkxlZbVwCbs1QG0bihIfpRw7EDNZP3Lgb9tMjQ8dPJSfX1Cn
WqvVtgFKMDU17dKlS05Ojtw512tn4RJ4x/Yrgy3/Hrb8kwELWvSxb9HT6pBn
hHIaAVLUgf4ZEYC2H0XIQtuPImSh7UcRsjTqZgD54KDtRxGy0PajCFloK1KE
IKx/Zv8cs+s/K/+lNjefBvFJxdWSpzLpU1nZs5oAG8VVLzPFjwPv5UTcTR85
chTvX/ldq3/buqRNfJjdK+k+JsB2aWlRUVGe57Vd7PrPp48sSExMVHWrMH74
V7EeU9wPjV65co2CfIb7REtLa5/jhsc3Dh7Q/VPe7IWFeZs2zI25c+NenM+Y
MfrQl/yKl5XPZRAKK1/Cbo/uPeAQJIBkkFghe0BAAG+x9+/fv3PnDiONg4KC
EhISbty4IZFIrl69qqojyggsuwH1sv/W29PTkzf76vG/Vt3fOXL4kEGDBisE
iCzxnmQ55Ge1bYCq09PTodmurq7wmi6Hu8tMDFaGd2Tg0bvGP4/aJtLbItLd
0GrSTvfQ+OycHBifuLi4pKTk9Oz8FtrzWwydU1oqUdUkGFVGNcOYMCMDFBYW
wrDAVepeBySrrKzUpFUMNy9tF/bPIa471A6X2qEQ9M912zXTlbW0tOpX3+AK
6YZymsc/M5OdleLkmVI8rbTqJ0S/NTn7IQN/zjIyMpTjIRIOsbtw4tReQsqU
Je97lm5dEKK1YkLLFWYD4CpVe4WwmJlPk3tjRh2zYrKaDQC7ras7Qm0JENJj
Z9y/Obb44YTKLLuqbPvsu1PvBo26fvp34RJ2794dlCsTCIx/Figh3mWWd7e2
AT07hPTtbGc6Ydn8ef1+bPXLL7/s2rVL815kZ+e0aNFi0qRJjRoH3rGNjIyM
qMNl79mfRppuNm25Y0anlUbfPIzyE5cX6x3q2nfHz722/Nhtfes+6zspZE9U
B/pnRACqchQhDm0/ipBF+Q8K0pyg7UcRstD2owhZaPtRhCy0FSlCEGX/DDAS
Rvkv9ZQpZhCfUlxd9kxW/kxW8bw2lD19XVz1IiZdnJoj5rUKwJr5P70o2akQ
ooOcIWQlbCwqyisoyLkfdWChXWuBWwUj7S9vXZ7oeXTsyuVLFy1ymT/fec4c
J3t7x5kz7Swtra0sp7kfGnNgdf++v7fgzR7gf+26++GsjMjRo/X6qAAOQQKP
a4cgsWJ21TIqNjY2ODg4Pz9fLBZHRUW5u7sXFRW5ubkJ9EWBoKAgxj/fqkNh
2Q0onJmfzJt9hXEXaeS6PFdDVWHaoJ/UtqGkpKSwsDAjIwNafvHiRTc5zAZE
wiFIwJtRyD/L5bNIZ+2E1RdLSkofPnyYl5dXXFycnp6enJKyYOdFUU8riOe9
z4dISHn58uXo6GgYGYlEUlFRAQMC4wDxERERjJpulH8uk5Re3joz0XfFPd+N
0ddXx3mvDTi3mHHOAWcXxnmuvuO+/K7X6oc3Fl/eagOJ1Q6aQKWaz3+uXS5D
7okb65+1rKzqlnv25MTWwETwp/lLArcrjo6OMTEx3EjYhUi4U2VjhP0z+yUF
N7K88FFJ7B7pvRWMfJaIizS5Qljgo7XOPNfO8o0WiSBUVz/W3hrNDRCjoz1c
kxKKEvQSQwcW3NcVJ04sz5qTenuw98m/H1ovEi5Bk/nPwiXcnz4qY619zHSj
oH5dPAZ2uzZ2yPntW6aO0tNq3/ZG39+z9m6rKCpS24suXX4F4LOiTuA9Vg7K
Jaj9vgAKXGfydUFarOxlce7DC3NH/PdyeGTPzT8WV6Xfy/f0S941bPNvClkS
1IH+GRGArh1FSEPbjyJkEf6Dgnzo0PajCFlo+1GELLT9KEIW2ooUIQjrnzW5
EzM1nSyTydLE1RXyOcNVEF7UvMJ2+dPXj/LKS8qqtLV1ePMucfjhadGfCqEs
c/3doDl3/BzOHZwE4eY1G+uJ3wg0QH/If4POjvM5YRBw2ij4nHHYpfG33SaG
u04IOmvsc9zQ/dAY1z0jdyzp3atLC97smzfOFxfFV5QlS0sfCQRIAMkgsUL2
gIAAgbalpaV5e3unpKRIpdLExER/f39XV1fB4WxAYGAg45+ZVS9KSkoUlt0o
LCyE+OvXr/NmX2bUuThwUdoJPQhOs2fNsndUCHa2timpqWqbIRaLoaLMzMzL
ly9fkAMbsAuRcEhVLt6RqaiorPHPcvnMrPk8YeWZYrEYHsmZBDk5OVcDokQ9
phWLS1SVXFRUBMOYnJwMfWdiKisrITI8PJxdC5rxzxUVFZq06rCzYUnstmdp
R54kHXiSfOBF2qH0iF2MTkwL3/ksef/jh7uqH+x88mhn0a3Vh50NFLIrTJMW
HgqN/DMHxjY3fv4zu1h03frPDZeP5knzFwYuP66CZuQzRHLTwIkTuITgvJuY
mCic/ZNHduXeORVy0O7AnBGlxYWqrmdVZcJHK7u4BGM1OGLjiTzUwMQPHTpM
kxIK7utscvn5wIa2Xqe7ZEb1vnFUdHG3aNNCkeYlNK0NVw2HeGj9cmvaaL+1
zomrF0QaDPLW7XP4j04Rf7SP+qNDjI5W2MhBattw/vz5vLz8xrZB+COaYePU
DrLnKbLyozLx/Hlj/iMa4dR5RcvIrAvHoqwO3Jrae2VbhfT31IH+GRGAjhVF
3hVqP3CQDxrafhQhC20/ipCFth9FyELbjyJkoa1IEYIo+2dm/Q3eO7Hx4yfK
ZLIMcXXVc1n1C9njF7In8lcIVS9kacVVT54+HzJkKG/eeVatK7LX37xmHehm
yQ0eJ03Wz/tm9ewvuGGD84+8hYwe+IX3MX0B+Xx2u+6m+T16dPqEN7uj/fii
wgSBEJvu6BDZitmGxArZ1cqNoqIiPz+/u3fvSiSS3NxcLy+vnJwc4SzcwuEs
FBYW3moIu+wGFM6sKc2b3cXgl+xrtg/2DIFgKf+ZSC4QExFxy95hdnJyitqW
iMXizMzMS5cunZMDG7ArIJ8fq/TPFUXFYr5QXFlZo6ChO4t3Xehg4JyXX6Cq
ZBgQGMbo6GgY0sd18pkXDf3zpvnmKe72r/POPk47UZ18+Fn68aTwvYxMTgrb
8yTlcNWjfZWP9r7MOp7uv3LzgunKJQjI58dvwz83dv1nBVnNo6+V0ggb2mZP
VZ2C5pXPMg38M0Nq3Rc6GZmZvXtrOVqbZT+MVHUlC1+W4ydMrKqqZlZ4hkde
gfWfq6sfDxo0WFUJdUakxtPm3R0yxfj7tj9+bGfeOv12j4u7Rcc2ixbbijQv
4ZpP8CT7RVPtV85cstzAzOnqjSCIZ9yvQAnR+v3cJujsnDg2LCzs1MQRYo8z
OSf3x9ubJ652ibSeerZvt5VtWmneBlYA1PnnJwJt0MQ/O434IjtupSxPOzO0
51StT8LDw3+a9/X+iEmLrneE0HHelwrpY9SB/hkRgI4VRd4Vaj9wkA8aqnIU
IQ5tP4qQhbYfRchC248iZKGtSBGCsP6ZvZ1m139WvtMeN84Y4jPF1TXm+aXs
6UvZM/krBIjJLKl+9er1wIGDeO/S7cy+z77ncumQyRK7rxdaf8GGFY4tU2OW
Vebu44ZtyzvzFjKi3+fXDoy6fkT/88/+3apVa4Xw2acfH9+kvdrxt64d/s2b
fZRejyOH1kLoJAiTBhIrZA8ICFD7MFJeXn7r1q3g4OCMjIy0tLSYmBhfX98r
V65ATHFxsUBGZrVnZpKzpA7YZpfdgFdI4O7uzpt94dhOSScnxWzSgjDVzLzm
NFXIsuQhSfyciQkNDbO2thFuv1QqzczMvHjx4pkzZy7KYTYgEg6pysU7MtDg
MA7h4eEREREwONHR0dCvysoqcUnp2Nl/nvMMzcnJVVWyWCxOTk4OCQlhVtio
qKiAAcnLy8tVAkZek1alpKRscbGJO67/Ou/M09zLz3POp0YdZXRiSuThp5ln
HqefkhVceOQx78/ljpCYt1WimoUR1A+FJv6ZmZEsX/e57mcClSYwC2SvjUyR
1c9trv+1QXa2s1KavzxVcgXNK59lcv8scAmxF9Ly5cuZKwQubFWXivAVwmJs
bKL0vPu0Yai3rwP6D9CkhJzYgYXxuvcCeviebZMa0fXYZtHulSK7qSINS3Dz
Cvt6gN2MNedtN94wXXzWaO6aoebT3DyD1bYhZEjXqLF9fS0MQ0NDZ3fvfL1f
50fzzPMCfY/26Dzvh+8cO/xs2/o7zXvRqHFQ+xF94HrYN9oTZgxoMWv43yf2
/Pjiib0Q+ZN9qy+mf9Zi6qf/nPjJf0y/UsgSpQ70z4gAwhck8qHzLhwoQo93
qEIRCtD2owhZaPtRhCy0/ShCFtqKFCGIsn8GGAmjfKdtYGAI8Vkl1U/k5vn5
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
sXj7jt1FRcUlpaV378ffi0+4n/AgPuFhaakkJydn1iyH/Lx84U8JKGHf/oNv
UgLD0KFDHR0djx07tmnjxvLy8vDwcCcnJxsbG2jw1KlT9+7dC0eFRXRlVeV4
h16TXXqtPHb0eHDJkUDJbh/Jardi2z1ezvtGz1jRfbzDIF4FrUqOnTlzpmXL
llFRUYwr5h5ifDIcggSQTFWTWL28ZMmS/PwG4wC7EPmG/hnusuAUH3DP6zTj
oUQiVZuel+LiYqjr0aNHJSUlT9QpaN5WSSSSfn37D9fR9fT0kpaVzZnrxMhn
UVTp8MWrk5OTn9XJZ7ha3sQ/A76+vjB0hYWFt2/fhguMlc8QCV1omn+G7HAK
WrRocer0aWj/Y7ktV4sq/3wmMP8Xi5jJ21LmX8xf4FowdKHf2CU+fR09Jm+P
M1wT0d/ev6NZFKTR3D9XVVXFxsZCl6GPqamp8NYQkM+AxbQZ8PgsUwcUq6Oj
K9wvlvLyivTcQr1VHiLDQxBg0OXjLoXAbDPxkACSQWJNymQwNh4/ZMjQvlp9
u3ft1rtnL7hCevbo0fW33/v07j1o0GAjI2M4xQKDo8B/rI7kVsv+NW3/R+Z7
/t/UXf8zebto0rbWDoc1zC4auye15FlIfKbLHteAe5kXE2tiBNLz9is4ONhD
Y7y9vTUp09rGtvXYAxoGfX1DhezZ6qAta5shtP0oQhbafhQhC20/ipCFsh5F
CEPbjyJk0fCWHvlAoe1HEbLQVqQIQVj/LPwZ7u5xPTQsnFHH+QWFX8spLhY/
SkwqlUiuuF3ds2dvo0ooKysvL69oVAlASUmJnp6eTCYzNzf38PA4f/48bE+Z
MmWekxNsmJmZnT17FjYMDAwEClm9b4vRSk+nEzk7vCTusdXX4x5fjKzeetnV
brPZpCWDrNZ1M3PpvHrXQuWMAQEBvAVKJJLTp0+3bNmSUcTcQ0wMHIIEkExV
k5hkMKS+vr7KRyESDikXLtwqFnhEghF22pfRY+aDDmYxpaWlwulVUVxc7O/v
HxQUFBsbC9vwZC2QmLdVUHXvXr0fPXykP9Zg3br1iYmJExOKRVGlotiKNmcD
tm/fDhdkZWXlrl27nJ2dtbV1mtZOBhi0wsJCaGdycnJ0dDQMvlgsjomJCQ8P
h5jr169r3mxu++EUjB6j//HHH9vY2GRkZFQKDoJymax/js8q7zo9YtLWpEVX
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
sfD+tJ0pk/9MNN6QMHplnI5LVH+n8D/sg7ra+HWccvXbofuLivn98/Xr1/38
/AIDA4OCgm7evBkaGgqjffv2bWaWZlhYGMRnZmayzVPbKqioY8dO3MsvISHB
QN/A0tIqLT3DKrP6G7/ETZs2vX79Gg7169df1XBpgre3N/cHB3NycqDNjHyG
GHd3d95cwv4Z2i8SiYYO02FDz169P/743yNGjEhJSS0vL1dbJuuffxh7xWLP
Q/szOU6uYmf3sr5zvZk33W9Wl4223NNZHt5nju+vM660NjwGKYX9M3QTTgSz
rkhBQUFGRgacKbXy+UnNtx5LoMaaRUXMPJKK9/Vc5fqi4cxn5kTAxsABPN8F
qBorKDAuLi4+ISE3Lx8C9xATA4cggeaXDbB8+XIbG1vWP/fo0aNPnz7wyvrn
efMWLF26TKCzs0/eauVwzv54KGzfvps0bPn5T2Yc7L/o5JbDbhv2X1y968zy
bSdcNh9xXn/gun+4QDkMKSkpJk5bRT2mMQG2lV262n75+/szM59v3brFrBUD
Vym80bKzs2EbYiCenQUNb0ZNypwyxay8vOLCRdeoO9H5BQW3bkfCByy8FovF
vr5+W7b8WV39mA062sMVsieog7asbYbQ9qMIWWj7UYQstP0oQha1NwPIBw1t
P4qQhbYfRchC248iZKHiRZF3A+ufhe/Bli5dATdi8QkPi4vF8IHOeGO4NqTS
suTUNHjIMtA3hEdpzUt4Jae2hBSNSmBJSUmZZGrKmGde7OzsVOU1mDnUYN2d
BWfF+wMrPO4+vpX2LDwp+1ywc0iWS1DGvJOhk+23D7FY+WufSd+OnjFAIW9A
QIAmzXvH8LYKRrWwqHigQ3Qv69tT/0ycuPmhwZp7ukuj+zmF97AL/t3G71dL
787TrrebcOHrgTsgpXIJRUVF7u7uPj4+/v7+UAVrocPCwpgZrVFRURAJMZBS
KpVq0qqiouI2bdrCVVdaKoFXa2tr04mmAwcMhMj+/fqHhYVbZT42mbugvLwc
Emtp9VXILmqI8LB4eXmx8plZCRcumJKSEogpLS2Frmk+mNz2Q71affv17NUb
Xj///PMWn3760UcfQeT3339/5cpVKd/7iFsm659bjb4wZft9q6Nptqdy7M8V
9JntZbmt5npub3Zh2IrIvguCu9t5djK/1GrsYUjJ9c/K5cN7B/oF56WgoICZ
+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
S6tvn959evXspSzHGgXTTgAuG0aeu8thjDrsat5sbvvhPP7SuXPUnehPWrT4
9rvvPvvscy0traJisUAuXv9sseRKO4Pjg5yDBiwKGeQS3tnyal+7y3A9d5p8
6qeJp3+ZdrmN6ZmWYw990X8LpBT2z3B5xMTExMfHw9USGxsLG5UayGfA0HAc
pFT1jwhYKioqeb8L4B2roL3Gr5+VvXpc9Koy62VZ8svShBfimBdFt18UhD7P
C3ye48cNkFiTMs+dPas3Qm//gcNLl67o3av3ls2bi+qAbe1hw/bvP+Tisqyv
lhakFOhvK4dzzMamgzVTzZ885wmA+exVvNkrq6okUmkr6wutrM/3W+wOGxL5
1xs2+0NE446dDnzQYuop2JY2/CwV6JePjw/jn+EV3krw/mKEf2Rk5O3bt5m5
+jdv3mT8s/I3JrxlwjmFR6rDh48GB9+sqqpOTUuTL7CfBttXrlytWyL7KeOf
+2r1VcgeoQ66qrZZQtuPImQR+ERCmgG0/ShCFrp2FCENbT+KkIW2H0XIQtuP
ImShrUgRgrD+We1jVHFxsa+P78qVqydPmjp58tQJ4yfqjzWY5zR/64oVk37r
uFCnDyOQNSzBwMBo9KixjSohNzf3woULY8aMYVd+ZuUzdIR7ue7evTskJIS3
kMTExLkrrXRmtOwz5/KwNZkjN+WP3pw/2HlXP6dDvW2sjOb9OGzaV7/q/tPK
2QZSKuQNCAjgLTM7O3vx4sWsZ+YeYiMhASRT1TVIsH///oiIiJYtW548eZJ7
CHYhEg5BAoXChVvFti0mJiYnN89qxfWvB+74sv+W/ILCO3eiFYJyxhwlCgsL
GYV769atgoICRj6rqpe3VQWFRf/5z3+CgoOLioqXLFk602YmnKxff/31mrv7
3Xv3QhsCXRbol1rgalHuAgsc1bzZ3PbDKfDzD4D2O82b99FHH33xxX//9re/
XXZzk0ilqnJxy2T9s//thz9o72gz7sQfDt49Z/t+Z3CkXD77Fl7/q7e3jemZ
VoZHPx+wCdJASq5/5q0Cxgo6FRYWlpaWVlFRodkIVa1Zs2boUO0hQ4YeP34C
qq6srNy5c2f/fv379u3HfAvQu1fvXj179fyj5xKXJRqOleuaUU+lGY/Fj6oL
4s5vdCzPuFmW6itNur56fDfJoytMWGHUhdmAxJqUaW1paWExnfHPw3WGwy73
0OTJU/bL/bPucF3uIQUcT0S0cjg361jNx8K6vTW/UvripWzC7jB4Zec/wzYw
edYyVYWUlZVfDXsoGrUdAmzALox2anZBC5O9EAOvsM07/rz98vb2LikpgXOX
lZUFn8BwTTJLqYvF4vv378MrvHnhKOOfr169qkmZY8cawB03vD3nzHHy9fVj
v0S4cuWqno6O7+Ht8LzF+ufevfsoZGfffQprrbPxtGVtM0TVxYY0D2j7UYQs
tP0oQhbafhQhC20/ipCFth9FyEJRjSLvALqCFCGKsn9m1t/gfZKSSCQPHjyI
iIhgDSHsZmRkbF3ioqGCfsMS0tPTg4KC5syZ4+joqCCfuX9ujh07lpqayltC
eXn5zZCbvUwM204486uVX3eHiB6zI7s5RHS29G8z8UB3k887D/+ot+FvISEh
kFIhr4Cc9PLy+vrrr1X5ZzgECQSGhUnGyOfi4mLuIdhlFLRy4WpbxZYQFRWV
kZm5/1z4F33W5hfwTGxWzlWmBLNsRUJCQn5+fm5urvB3FrytgqrXr99QLC4p
L69ISkr+9ttv09LSTp44OWTI0MKiIuFevBuEBxPav3LVaqb9iUnJn3zS4p//
/Off//5/WlpaAu3n9c+pheWr917/b98NP4w+0Hna5a9HH9B3vjp2wZUx890+
09nZcuyhz/tv+EJrPaSBlML+OTMzMz4+/ubNm2k101wbQUpKCrwHN23a5Og4
u6CgwMJimoODw3GWY8ePyYE0kFK4XywHnIZIsqJdty0oTPTdO8cwN851rekf
WVGnVhh1UX6FxJqU2aF9e8fZcxn/rK9v0K5NG/YQbM+cOWu/3D8b6Bu2b9tW
VWfZ3x+E7ZU7Tsm/veIJwHjrRaoKKS2VrD7hJxq2EgJswG6VfFL0TtdQiIFX
VV9D8PbL19fX09PT3d09MDCwpKQE3lBwFhgLDdulpaUQ7+bmdvXq1StXrkAy
TcocN8545MhReiNGjhw52sR4vInJBH19w5F6o/T69ZujrQWfrqsmj6r7Jwa9
B/QfoJA9iIPCNHgmkrasbYaoutiQ5gFtP4qQhbYfRchC248iZKGoRpF3AG0/
ipCFth9FyEJbkSIEYe0i+zjMrv8s8MhcWlrKzZKenu5kasoK5CY8g2teAlSd
kJBw4vhxQ0PDW7duQRfgIwj+ynDvGH19fQVKyMrKCgoKNpu36b/D1n4/5kAr
g6Mtxx76SnfXl0Nm/Nj/I+uF/z97bwLdxJXv6+qt9c5Z66331ul177r33PPe
7e6s050eTichM2OYSZgMZp4SApnMPIU5BhrSkATSCYaQBEJIHMI8ysbYxrY8
yza28YDnecDzPAEmJNH7S9sql1RVsiyrVCX591vfUZd27dq1q1TWUX3s7Ho3
KiqqqqpKuKFOpxNtUK/X//a3v/3hhx927typ0Wj4q+gtFdIqqkDVpLrEjTM8
evSocC0VchXs7xU/dNLS0tJKSsvOaBNrauv6rC+aurq63NzcGlP4n75oRHtV
V99AdHR00HJDY+P27TvmmvI//+e/J6ektrd3ONYxJ8b2ybTq/+YtW/4PU/7t
335zOzlFqv/8Njn/TGQWV+89ev134w78+5hPfuf19ROzv/39rG//9/Sv/n3i
5/9t2D4qp7VUh6vP/LOw/YiIiJiYmOrqascOma6u9evWT5ky9YujXxQWFtYK
IrWh6Ln66O0RFRk3v9m+qDDhzMdLR+ZEHt8795ls3deir1TZnjafG/Ls0qXL
PvzHR+vWb/SaPuPPTz7JraLl119fSqvWrtswfbrX3/76V6nervfX/379+TXf
xdDy7s++f9j9SHSyka77D+a+s1W0hda2toKSit9M3jnl/eMjV/jRAr2lQroe
6urqNa+8T6/s2rDzXN27d6+yspK+jpKTk2NjY2m5paWF/rLolZaphMppbaUp
VNmeNulLJlYs/H/gu/HZHlYo/EaK6CtSpxdxOEr7UUTeKO1HEXmjlBdFXBOl
/Sgib5T2o4i8UdqPIvJGaT+KyBulFSkiY4T+udM8JWy/bqJzcnKYQD6wdLZj
t+H9auHevXtFRUWHDx8+depUdnY23QXwb/TKyspaWlpsbF5VVaXX669qb7y7
9aPX3vzg5VmbXl2ydcX2HdcCr7OZjUW3kpKTTD7X19dXVFTs3LmTv4reUiGt
Ygpaqj/8/9T9+PHj/FVs2o0B+mcKfcTp6el3s7LumuYH7m9oc/a0wZqamvb2
9j7r99krNoT4iSee2Lp1Gy00NjU70Cunx86T2Wnu/+9+97vNW7bY7r+Uf2YK
+nJwzMINJ//06v7//tIuBi1TCZVbyWdR/5yRkaHVaukCc+BgWVatWj1x4sSQ
kNDm5v59BKLnavPsZ/uFPW0+N2TIn598koPe2rPKRk6dvbZl/1cb9x5du+vz
lTsOvbP5wLIN+15fs3vhip1z39l68Mg3olvVNzRMWfvPfxu7Jjkzn9C89A69
pUJaVVtbR29rpf9lx/Z1RWeevs2SkpJiY2Ojo6PplZbZUwhtbGX/tcry0fp1
ff4DX6g5VvNvcOX92iNiT5T2o4i8Uc6MIq6I0n4UkTdK+1FE3ijtRxF5o7Qf
ReSN0n4UkTdKK1JExnD+uWPAyc7ODrx6NSUlxTUttLa21tXVVVZWRkRE1NTU
sEK6nbdzX7R5bm5uYmIiN0SQlqmEyh3s/QDCH6lYXl7OX0Vv+WsHuKMSUxzb
tsGUAXbAosHGpprauobGRjaPrtvFgf5b+Wc2EUdCRn5o7O3AiDgGLVMJf9oN
vn/mt8aeT0d/BQ4fAl3tSxYvKS4udrgFq4gOvrURe9qMj4/nb0Jv7VllIwUF
BTa6RGtFt6pvaKCP2/SJN3HL9aa/CLZM2LN30bBvs6qqKvpCo1f2LEKHW5MK
U9CHfd6QqnCTF04+s3+OZIVKy1oPjNJ+FJE3SvtRRN4o7UcReaO0H0XkjdJ+
FJE3SvtRRN4o7UcReaO0IkVkjBP9M4IgtiP0z/3Cyj8jiHMTYBlOPnMlSsta
D4zSfhSRN0r7UUTeKO1HEXmjtB9F5I3SfhSRN0r7UUTeKO1HEXmjtCJFZAzn
n9sRBJE5A/fPSh8B4sm5JojBYOC/VVrWemCU9qOIvFHajyLyRmk/isgbpf0o
Im+U9qOIvFHajyLyRmk/isgbpRUpImPgnxHEZdHsyBsgSh8B4sm51FeUlrUe
GKX9KCJvlPajiLxR2o8i8kZpP4rIG6X9KCJvlPajiLxR2o8i8kZpRYrImDYE
QRAEaWs731eUlrUeGKX9KCJvlPajiLxR2o8i8kZpP4rIG6X9KCJvlPajiLxR
2o8i8kZpRYrIGCv/oPT8owiCIIgC+bGvdJge8Io4N0r7UUTeKO1HEXmjtB9F
5I3SfhSRN0r7UUTeKO1HEXmjtB9F5I3SihSRMVF3iqSITisWJYZILxEllsgo
FRJHZJYJiWfcLReiZ2RVWJHAyK60IpEj554VSRy5VXxuc+RV80nmk1/DJ4VP
QS1HqhWFdYw7VhTVc6RZUdzASBdS0khkCCltYmQKKWsm7opS3pIlSkUrkS1K
ZVuOBLn32kXhxx9BEARBEARBEARBEARBEEVjMBgc2AT+Gf7ZLfzzKgRBEARB
EARBEARBEARBFMq9e/cMBoMDm8A/wz+7i3/+1WAAAAAAAAAAAAAAAAC4HiaT
+/WgKKF/dmzcNfwz/DP8MwAAAAAAAAAAAAAAHszA/bO/v3+/NucC/wz/DP8M
AAAAAAAAAAAAAIAHM0D/7LB8hn+Gf2ZoLAP/DAAAAAAAAAAAAACAx6AS//zJ
HCsNqXlqi85SPp/y0rywLsDKP5+aQYWBdvjnLxdzLT+9LbrXP3+1xFj03J4L
1v45ZsNz5g2e+/tF+Gc5/TMb/9ynf2YV+P6ZlcA/AwAAAAAAAAAAAACgTlTi
n81866V5fo1WdPzzAPyzUT6/sP4GG/kcvf45o4I2+efvZ2o0M78SjH8O2vO0
sdw88vnm3zd81S//fHqW5sWNIf3yzz/O1ry46Rb8cx/jn/kKWlQ+wz8DAAAA
AAAAAAAAAKAenOKft2zdvmOH77btO2lh85Ztm97fsnHj5vUbNq1bt2HN2vWr
Vq9duXK1z4pV77234p133lu2bLlr/XPU+uc0M7/kTb5xY8/TmsX/7PHPL6wP
svLPxpHPM78ayPwb8M9y+WdOO0vJZ/hnAAAAAAAAAAAAAADUg1P88+o16yYd
qBq/r2zs7oJXdmaP2Jo2dNPtl9bHPb86cohP6NNv3/ivN6/+ecmFJxecjioz
zJ073x7/fHCuWTLOPdXrn4/ueprNobE10to/B+5+umeDxZ/y/fMNKl/8qcXk
z9Hrn3th/Q3j4GfzjBwxvf7ZOPh5yWei8z/f/Lt5F5pZXzP5/INRNW9/nRU+
syPOJJ/NmX/aaJ5D9j7T8/71w0b5bFLNO82b7NSb5LM5C35MztO//3zPu9nf
wD+LzPxsQz7DPwMAAAAAAAAAAAAAoB6c4p9XrFz9hPcJO5k1a05/xj8btfPa
ALag0QzZdS69JMaompl25vyzaeGGyTkfW/z01igL//zcngvW/tk4Ilp8/HPQ
Hqp/UcQ/+8/SaGZ9ZRr/HLz3ac2LG4KZf9Zo5v9gHPz89esazeufW49/Pm20
zSGm8c8nXn9mZ7zJPxs9s3Hw8wna5A0/q/HP37xhstCDYvyzRiwY/wwAAAAA
AAAAAAAAgGfgFP/83nsrmpqam5tbWlpaW1upoL29vYPo6OhkdHZ2ccyc6W2X
fz66yGwZOf/cO//GobmaGcd4/rl38LMp876zY/yztH8WHf9sHPy85DPz/Buf
zWdDoE3jn4PZ/Bs/mLUzzz/3Dn7uGd7cM/45lM2/0aOdLfzzLeMmz+zUDwb/
3INp8LP1yGfM/wwAAAAAAAAAAAAAgJvjFP/89jvv8s2zKZ1lhaGpsbtTIhbc
1q3OTT9Ze+9OZ+f9rq7706d79e2fA3Y9pVl00Dj+Wbd2iNA/R64bIvTPFtNu
OH/+Z8f98+uHLeZ/7ss/m7i288VBMv+G/f6ZL5+J3Hvtogoa/hkAAAAAAAAA
AAAAAJXgFP+8bPnbJvPczo15Lk17926Md0Puos6KNV2V6yoz3syI8go681xX
1/0pU6b27Z+PLtIM2XU2rdgkonvn33h6iy6mZ/6NxYfSrebf0PCn3eD559K4
LxdreodAG6d9fnpbdLykfy7Xf7VEo9HM/KrXPG/4Sjj/xuufZdvhn43zbxjn
he6vfzYq6A9eeuYDPfyzcP5nzj9j/g0AAAAAAAAAAAAAANSMU/zz0qXLmHlm
M2xQ6rOn5ceNrb07pTF/cXvFpuKk8aGn//Xkx5r79x+89urkvv2zcdizaWzr
kEVevPHPM+a+wIa8mgY/Sz1/0HL+DSKzzKSge8LGQtvyz4RxFg5znvv7Revn
D7LJn6X8873P55tqWT9/0Mb8G9V+C3oqGOd/7skbRwbN/BtZovIZ/hkAAAAA
AAAAAAAAAHfGKf55yZI3mHbu6rpvyoPau68d8v3jiU/+FHLmmfLk4Te/01w6
pjm0w+ifJ06cJO2fe+A9f9CCmLSe+Z+FxBLi82+UxllM/txDPOOutXzu8c8i
zx+sSGBkV1qRyGF8+KAFSRy945+N3OYwPnywF/7450E1/zP8MwAAAAAAAAAA
AAAAnodT/PPCRYs58/zgwUP6v+qMCUvn/+5P//n/rFn+RGnSS5eOab7/VPPB
aqN/HjduPPwz/DP8MwAAAAAAAAAAAAAAHo9T/PP8+Qse9OQhy720sXVZUzJ1
L4Wde7I44fnvP9Uc26dZ86aGKowZPQb+Gf4Z/hkAAAAAAAAAAAAAAI/HKf55
zpx5JuvcTVwPiVn6/j9W7v70tUWrli7565EP/9/C+CHH9mkObte8s8Don0eN
HAX/DP8M/wwAAAAAAAAAAAAAgMfjFP/s7T27u/tRQ+785oojo5dunfqhbr1/
8sGQDRNWLXzit/9SEPu3g9s1u9dp3ppv9M/Dh4+Af4Z/hn8GAAAAAAAAAAAA
AMDjcYp/njdv/vTpXvXZ0yIuDy27PTQ8aklQ9pajd9a/vWeMz+L/Ky/6L7vX
aTa+pVnopRk2dDg3/wbSr7Qj/Q/8MwAAAAAAAAAAAAAACiLln4+bIipChf45
Li4uOjo6Qzf2rUW/Hf7i//jiwB+zI//wweb/9drof/2vJ/81J/KPG97SvDFL
c2j/cqpGlYVt/owgzgj8MwAAAAAAAAAAAAAA6kHKPx8wxU7/zFKYfTE26I0z
X/wp6vKfsyP/8Lvf/8dXX31Vnr07O/rpPe8/k31XRDuzPHZGNDvyBohTuoEo
HvhnAAAAAAAAAAAAAABUghP9M0ttde7tqJ2B/n+Sss3y+eeyxi6HgX/2mMA/
AwAAAAAAAAAAAACgEpzunx3IT87IwP2zU7qBKB74ZwAAAAAAAAAAAAAAVIIK
/XNtcVrmhVVpZ97tamu03zoK/XNRbVvMncJvL+sOnri81+/0to9PrN11+P19
x76/Eppb2dAv/1yaERVyYFzIx+PKMqP65ULfevud+QsWzZ23YPacud6zZs+Y
6T3da8bUadMnT5k6e/acfjWF2Bn4ZwAAAAAAAAAAAAAAVIIa/PMjXirzU8tC
dhgKjxsKviy7tb22OO2RfRH654zihtCkwmuRGWdvJn57JfLo6aCDJy7vOfzD
1o+Of3UmUOifpVpOvLAn4/uZdaHv1oW+k/m91+1Lf7ezS5T5CxZpwos1sVVv
v/02HWlXV1d3dzedt19++WXSpFelttLpdKLl2uhyMTK0ob08O3mZ/d3zyMjn
nz9BEARxahT/DQAAAAAAAAAAAMiN2vzzlT3PGe6dMVQHGKquG8q/ij0x007r
KDb/xqOcqvvJhU3RGZUhiQXXIjPOBCWcvKw7cTE8IrXUHv9cX1kUcXRRTfja
xuiNDVEbGiLXN0Suqwx6J+rYooZ7Rfb0au68BZrYKk1iw9RdH2VkZDD5nJub
Gx8fP2HCRKmtbPhnQ1+Bf4Z/RhDEXaL4bwAAAAAAAAAAAEBu5PHP+hOr+Dmh
t+mfu3mJu+JXHrbE0HDZUH+26OqrudFnuu2L0D+fuBCWW9Hc0P5TS9fjisYH
BVUduZXtCTm1l8JSp7++TuifrRqMvf5t5JfzWxJ3Nyfuak7wbU74oFm/s0m/
oyl+e1Pctpgv5+oDTvXZq9lz5moSGzSpbcOOng4JCUlJSdm6devevXvPnz8/
btx4qa10Op1ouTY6g868/wXtE395VqvVSvlnO8+Yp8YF/rkDQRBkAIF/BgAA
AAAAAAAweHC+fza6533aIl5JkXafVYm0f77yj3FNd45kXt+Ye+P9n4q/iTqx
kJXnRflXFabasI5C//zpyas39XkpRc017b+2PTCkFrdc1aV//p12/Z4jI6e9
YcM/N9XXfbfnzZyAjW3ph9rSDrbd+aTtzsetqR+1ph5oTdnfmvKPluQPW27v
u3P2rfMH11JlG73ynjVbk9qmyej6j5Cstabk5eUxUTxmzFiprST9c6jRPz/x
lycyMjK8Fy6jZT9/bQ/H/ekV/rlbfv/c0dHhjyAIMoBwClrx3wAAAAAAAAAA
AIDcONs/G12zyHBn/QkbBvohL7E3zxVFf2ToSDO038kL3piuD25rqks9t/5R
2v7q0A01eTEPJSL0zx8ePSPln1+YME/on7mmrh56ryH1s87cLztzjnXkfNGR
/UVH1hEjd/3a7x5uz/y8PfOz9ox/tqV/Wqv/UHtkvVSXKDNmemsyujRZ3Zqc
x09ejlu7du39+/fp7P3yyy+vvDJaaiudTida7m/yz1qtduzYsdrQaFouNycj
vzwjo5z5Zxv9GQyBf0YQROWBfwYAAAAAAAAAMHhwtn/WnxCfbUOq3No/U9Lj
g5O0R5IDPq8sLWiqr9P/uNlQfs5QdsZQ+kNj/Ic5sRdFraPQP+889K2Uf/6v
EdNt+Oe4698G/2NMc/L++8Xf3y/67n7Rqa7Cb7sKT3YVnOzK/6Yr/0Rn3vHO
vK9bU/eGHhgWf+O0DRc63WsGk8+avF80+b+OPnwqPDz8l19+6e7uHjlylNRW
kv5Zm2HP/M82+jMYAv+MIIjKA/8MAAAAAAAAAGDwIMP4Z7GBzhLDolkeCFJb
W3tJX058+PXVC/vHGGrPGhp0hrqA1rSt+sBjVEGz5DCD20Tonzfu+0LKP//n
8xOF/pnfgfy0pBOr/lp1a/GDUv+HFRceVpx/WH7uAVF29kHpmftF39RGzP5u
49+omrDzXKKvfjN12nROPmsKDP8Rnv/FF1+wOSKGDxsRd/2k6IY6nU603F8b
bWWbuck39vr57/3Ej/lnG10aDHGhf46pMLRlBijnsBAEUV/Yl7PtEvhnAAAA
AAAAAACDB6fP/2w0zdaquY8JoEUt4iV9+RVtEPHjj6ejT6991Bh37/bnqWHf
dXZ20tpjl4IZXH2hf17j+5m/Nlbonxf47PjP5yfY8M+1tbXvvffed9+ePH9w
aeH5Pzwq+eRRbeCj2oBHNdpHNdcfFf+j7MrvLx56/fN/HtqyZQtVFna+sa72
1O6lOQEbJ0+Zysln4v++3bBnz5729va6urqhQ4exGaSpstXmkv75grV/Nk67
YSI6yQj88wOP8s/w2wjifuG+n0XfssA/AwAAAAAAAAAYPDj/+YNt7BGEvQra
8p1I7ovlkr6cWy4vKbhx8u9pcTdFa7II/fNXfgc2b1rxxupta33/uXLrR4tW
fjBtydoXxnp5e43/4p+7hf6Za+oDX994fWLm3ayMzKybZ48mffXvvxbM+7np
5uOmoF+LlyWffOLGj0dT7qSlpKZFRsXs2fN3YWe4GaRnek2bNOnVCRMmjhs3
fsyYsa+8MnrSpEnDh40YOnTY6FEjuBmkrTbX6XSix+gn8M/CjPVeZuMsDYbA
PyMI4vSIft/aX9mqAvwzAAAAAAAAAIDBgyz+uZ8RtYh8/0zJ0X1XmZ9swzpa
+efr33925/K6lICdMRc2a7/d8N3hNd9+tvLq8dXR59bfvvp+1vV1EVe/kvLP
R48e3b1nX0pqWm5ePnE7LvLKoVn3Sw7dLz185dN5iTERd7OyiZTUO3v27jv2
5ZfCzgR+9ymbQTrxxr547Z7467vjru+Ku+Zr5OoHcVd3xl3Zob/+AZtB+sbp
I1abS/pnf63RY1zQPvGXZ7VaLfyzaJT1z1TUk4oYf/+AzDbT/1pVNxbzalk3
xZZ7W+I1gSCIYrFTPgsrC9fCPwMAAAAAAAAAGDyowT93ieWSvpwtNNdXp5xd
9yhtf3XohqqcKNHKFGv/fP77kA+Ht6Yf6sg/VZd+rDbtWO2dL2rvHG3P+bo1
9cO4z4aFXj9t5Z+5ptrb2wMCAnx8VtwKjygoLCoqLikqKgm98PW1k4fobUFB
UW5efli4zmfFSqpGlYWdocKYkIDT7z9vewbp09uGUDVhCzqdTvQYmX9+4i9P
ZGRkeC9cRst+x/0Z/PmfpU7RIIk6xj+bV9H/8hSzadEolnvKjCKatSD0z7bb
RxBEgdgpn/3hnwEAAAAAAAAAADPyzP9sjGnKDf0JWxM/9+2f62uq9T9uNpSf
M5SdMZT+0Bj/YVb0edH6Vv45s7j64rkfQg4805G+ufve5YeVl5gE7kxfl3js
2auXT1MFKf/MkpOTs3HTpu/9fygoLKqoqCwnyivKyivyCwp/OH1m06b3qYJt
EVqQm3Pu4zekZpC+fOiNwjzxFmz7Z61WO3bsWG2ocS4O0fmfbffK46Owf+4d
tsw5ZCabYyp6Bz9bjIk2S2n4ZwRxg/RXPmP+DQAAAAAAAAAAgxxn+2ezcC7S
7mPimVuQTqdYLunLiQ+/vnph/xhD7VlDg85QF9CatjVOe5TWapYcZnD1hfM/
51Y2XL9yNvarF++nTX9cd/WnuisPM2am+r90Q3ueVgnnfxb2obm52c/Pz3fX
7rz8wuqa2urqmsLC4j1/33v48GFaJdptYQtBP/rpj/0P/gzSScd/d+PMERst
6HQ60XLmn23n2cnL7OmYB0dJ/9zrlmmpZxVbsngP/4wgnhsr5yyqoOGfAQAA
AAAAAAAMHmTwz+xZg8KF/vnnK+ac8f82+vTaR41xlUmfJYd+y+ofvRDE4OoL
/TNT0KGR0dqPx3SX7O0u+yj48KRbkdFC+Szln1mio6NXrVpVUFBYWFS0evVq
ettfI5qaEH1+/3Q2g/SFj7zpre36Nvzzs5OX9Ul/u+dhUdI/W8zwbF5lVM8V
FW18vcyff4Pz1eZC43r4ZwRx1whtM/wzAAAAAAAAAIDBjNPn3+Bm3Ojxzsb5
OPrwzx19paQwN/CbPakxN2zUEfXPRHFde7j+zoUvtl78Yhst0FvRarS5jcZr
amo+++yzPXv20EKfvZVq4fI3B3/4fJfDLSB2xrX+uTcmU2x+sqCFcOYbZ1N6
nz/I08tcYxUVnHbuKcPzBxHEs9IB/wwAAAAAAAAAYNAgw/hn6/Q5AbRTrKOU
f7YT2/4ZcaO40D/bG95DCBEEQeCfAQAAAAAAAAAMIpw+/tmBtDsjA/fPTukG
oqr4q8E/9079jCAIYgz8MwAAAAAAAACAwYP8/rnv+Z+dYho1O/IGiFO6gagq
/gr7ZzbRBuwzgiAWgX8GAAAAAAAAADB4cLZ/Nk73LJ4+p+FAkAHHNf75ZwRB
kAEE/hkAAAAAAAAAwOBBhvmfrUY7m0uKimz7Z+UmDEY8JC4b//wYQVye+vr6
1NTUJDcJdZU6LDyKSwOO68+8HOmAfwYAAIfQ6AcLip9qAAAAAAAnouD8zx9+
7AeAc2mzHAItk3/+CUFcntTU1K6url/dJNRV6rDwKC5dujSQifppc9efeTkC
/wwA8EgUd7YAcCj+5wAAAAAAPk73z9wEHKZBz/oT0vNufPixnwFBnBf4Z8SD
k5SUpLRU7l+ow8KjgH9mgX8GAHgeCjhGCnvlLwjDVRbWtFol3NCeRqS2cm7f
lNa57ojifxQAAAAA4JBh/g2TcC7S7mPimVuAf0Zkjsv88yNeurq69Hp9bGxs
jCnRpkSZEhkZqdPp6G1zc/Mj6SjegujmxcXF9JdeVFTkcAtcB+w8Cqe36WG9
4vyz+L/nyZaB+Gfh4XP+ubi2LS4+3vZ5iIyKyq+st/LPcny+3d3dDx48fGDM
QzMPqJBWPTSuemB7c58Vq/bt+3D79h2bNm1au3bdqlWrV65Y+emhT21sAv8M
APA8LHypaxyv0nrTpTjxvIkuiFaWala+z9RZfYN/BgAAAFSGbPM/CxesA/+M
ODdK+eeYmBj+hd3a2trc3FxXV1deXh4REVFcXBwVFWVbSCrbAm0eGxvL37yl
paW0tPTixYv0WlVV5UALrJGmpqba2to++6DT6Zzepst6Rae6oaGhvr7esV41
mmJPr9zXP/PPJN8/C8+k8DzoIiP5CtrKP9vTgu2/nUcm+dzR2XnuVvLv5x/Q
jP9AM3Hvb2Z/+vonAdklNbSLduPU8p02Nn9k8s/Cr6OCgoI9u/dIbQL/DADw
PJQ3tAAwzBZa8T8KAAAAAHA4ff4NbsaNHu9snI8D/hlxRVzmn7stk5CQUFpa
mpSUlJiYSMvJyclpaWkpKSm3b98ODw+nLhUXF0dGRjY2NnZLZOAtREdHU7Vb
t25RC7RJZmamVqsNCQnR6/X2tMD0dUlJSUFBAb3W1dWdOXOGzh690jL1xM4W
cnJysrKyaO/p6el0CKmpqXQsdFy2+6DT6Wy0aRWm1mtra+0/LmELLS0t1Aid
HId7xc5VYWFhTU0NHSadJTpSOz8vfgu0IW1eXV199+5d2y3w/XNRwMn96yj7
Twaw/7gk8eQ6LvtNZVSFEmD7qa/2ZCD+WXgm+fNvsPOQIBHuPETodHkVdZx/
Fp7JgIAAOlf0gdKOIiIi6uvrQ0NDg4KC7Pzbae/o/PJShGbEWs0rmzRjtmnG
+2om7dW8duA3c/1uJOQ9s+5sS2ur1LYszD+LjoI+dPCQ6CbwzwAAz8NK/cmH
4kfq0vMJHAD+GQAAAFAfMox/to7UBNBy+OcK3d6ic5OLz08tvjC9+OKMkksz
Sy7PKr0yp/TqvMqbS7O/H1Nz+2un7xRRSRTxz3fv3s3NzW1sbGRXdUNDQ0ZG
hl6vz8/PLykpYQaMUlRUFBERIWqiBt5Cc3MzVWtpaQkKCqKasbGx1GZiYmJN
TU1cXJw9LTB9XVpaSps0NTVdu3bN3xxarq+vt7OFnJycysrKe5apq6uz3Qcp
00tt0tm4dOkSbUWNBAYG1plCrVG5/cfFHQtVo6OjU00L9DY+Pt6xXrFzVVtb
S2cmOTk5ODiYemXPkQrPNm1Cm1Mj1FR1dbWNFnr9c1HA/nUnE43THCWe7LHN
tHAykfftSlWM7xNPmlbTO8dFtHz+mZ2HhISERrHwz0NYeLiof2YtBAQE0B9L
Xl4e/R2xf/5IS0ujPwF7PosHDx40NjX/Zuya30zYuPXoVW10mjY6fevXN3/j
/Ylm8keaqZ9qvPyogui2XDj/LPxSKigo2L1rt3AT+GcAgOcB9QcUBxchAAAA
oFqcPv7Z/jjdP99LOHEvaFlD5LrG6E1NsVua4nc0J/q23N7bmvKPjqzPavU7
Eg+PePywXbBdsA/9ShnpV+Tc3iAuj8v880NzysvLc3NzW1pa6I/ivClVVVX0
lg39peWwsLBbt26FmhISEvJQEH4LzNz2twXKjRs3YmNjs7Ky4uPjs7OzS0pK
dDpdVFQUnY3w8HCtVktr6dVGC6wy7a6xsbFJLPX19bdv3+6zhZycHDaCutSU
MlNoW+pPQkJCRESEaAu01nabdGKDg4Pp06w0hRaoEXZm2Mmx3SsmnwMDA9kZ
pteKigo6aTExMbStVAu2e0Xnqqamhk4svWX+mT5KOlL7e0X1qRvMP1MJdYYa
tNGChX/e3zvu2eiZeSXm8MY/J560cNP9zED8s/BM8v0zOw90YTCT32AKXYFs
weo8cP5ZeCbZRUJnjz7Z4uLivLw8esv97dj+LDo7O6+HJ/5m9ApdYiZdsGmm
0CdzPTpdM2mfUUFP+7S+oVF0Wy58/yw1CtpqE/hnAIDnAfUHFAcXIQAAAKBa
PMY/V6VeLbqytCVpT2vyh62pH7WlH2zP/Kwjy68z59j9om/bC76O/MdLHTW5
YpvCP3tIXO+fU1NTGxsb2cBX5p8bGhqqq6uZcaVlKqe38fHx5eXlwcHBQnPF
b6HZlP62QP0JCQmhA4+MjMzIyGAz4kZERLAF9gg2WqBtpVqg0LYtLS20r2vX
rjU1NRWYkp+fX1xcXFZWxkZE09qqqiopj0ct0F6oJjuKElNoWzo0OpZmcyoq
Kuw3vaxN2u+lS5eYQy43hS1fvnyZWqupqaES271i8pk+HTocqk/nk/pGb2/c
uEGrqM+iLdjoFW1Cu46Li4uJiblz5w7zz/zY6FWdILQ5XQb0MdFHxow094mL
+2dONxclnjQNczaNiN6/f3/v7Bu8DGjwc5uYf/75559bW1uF5VRIq+z3z+zT
SUhIoNPFFDQ3+Jld+VROa9l5EPXPrIWAgICsrKzS0tLc3Nz09HTab3Z2Nl2r
dDLT0tJorY0rpLOz81qYfss/fyguKc3JyTFN7VKXV1T29LLPNBN2a179UDP5
47q6etFtuVj5Z+FXExsFzd8E/hkA4HlA/QHFwUUIAAAAqBYXzL9hjvUs0Db8
c1h4xBGxULlo/dZ7OTmX3mu/e7gj+4vOvK+6Cr65X3TqfskPD8rOdldd7qo8
f3PbU7nn50vMvwH/7CFxmX9+YE5SUhLt8bwgbaapmNmw4Zqamvj4+Lq6ups3
bz4QZOAtUH+Sk5Ozs7MbGxupQmhoKG1bUFBAy22muTjYGFFqTaoFSlFRUanp
gYPMx9JyWVkZmw6itraWSqicPY4wPz9ftAWdTtfa2pqTk3P58mVmnjnnTJtz
5Uy3CreVarOhoeH69evcBBpsQg/uLTVFR009FLbJtUDHTuekvLz87t27Fy5c
YIacFuiMUVMhISEtLS2iLUj1qrCwsLKyMjIyMiEhIS0tjc2/QSc2KCgoMDAw
ICBAq9Wy8ybaK1pFR0TVqPKNGzdoK6p2+/btO3fu6PV6apYpaPrErVqweP6g
0UAb0zOw2SSke2bk2G85E8fABj+3ifln+uanflL3+IX0lgppFd8/C88k3z+z
T4f5ZzpkNvaeTc1Ny+yRjmx0NJ0Hzj8LP186mRkZGXl5eezjoM+aGuT7Z6nP
Yuu27WvWrl+5as17PivffufdlStX5eTk1tTSZ2cNraK/KdHrgSL0z+eD3v30
23k+u0fv/PrEplPG/7f10osv8TeBfwYAeB5Qf0BxcBECAAAAqkWd45+PHDny
0+PHQqhcWPlRV1v62dX3i/0flp/urjz7qOriT3VXHzcG/twc8nNr+KPm0ODd
o7LOLe/H/BtFfiM15hjL2XtWg1fZupplicYnmFXm3iEyx/X+OTHRqPZE7XFo
aGh9fX1lZSWzx83NzUFBQUJzNfAWKA0NDYGBgY2NjQUFBZcuXcrOzqbNL1++
TK8pKSlsUujw8HCpFrq6upqamph8Zv6ZTYDAnvTHrCBbRXVoWbQPERERrH3m
maurq+ktLTMFzZXT5kIHLmV6qU3qOTXFxmMXFxfX1dVRr0pLS6kpekuvzG9L
eXWuBTbsuby8vMWUiooKdoxseLb9vaK9FxYWxsTEMGOcnJxMnyC9pcphYWFs
ngfmn6V6xfwzVaPKtAn1MDo6OiEhgRpMTU1NSkqit7QLOjqrFsTm3xCdd4Nf
1DMP9EAiOrfGo0eP+AqayWcqtJp/Q3gm+f6ZfTqcfw62DOef2XkQ9c+sBUpG
RkZubi5d+eyzLisry8zMzMrKorPaZhqWL/pZrFq9lr43Hv/8S2lN+9Kly2Ji
Ypcvf4u6TR2eN38BfRy3k1MCQmOmTfNiq0SvsQdi/vmLHxfv+c7rRMgXkdWG
jd+EGuCfAQCDAKg/oDi4CAEAAADV4gH+Oe3yp9c2vRD0wUgjvqOCfF8J2jUm
aNfYoN3jg3ZPuLD6mejPvR2cf8O8pldAm5ZMdU3rmFVmq2m5xz/3tIVx1S6O
y/zzfXMSEhIaGhqqqqrolXljNhy3rq7u1q1bpaWlRUVF+fn58fHxra2tN27c
uC8IvwWmRvvbAoWOlFalpKQwEcf8c0FBAXtl5SEhITZaoF3Qvs6cOcP8M/WB
eWM2Nwjzz7SW6uTk5Ii2wGalKCkp4fxzvTnUCFfOHpJota1OpxNtkz0/jjav
NoVNUcLmCaFesck9WImwTX4LFDa9Qwsv9La8vJwap9Nif6/oGGm/MTEx9Inc
vn2bPj5ajoiIoB1Z+WepXvH9M33EtCFtTo3o9XpqMC4uLjo6mnZBn4hVC5x/
5htmoYC2KOGeP8jNBd3/iPpnvoIWlc/MPwvPJN8/s0+H8890qbN/U6BX9sRJ
Nv8GOw+cfxZ+vmz8c25uLhv8TFdFuil3796l80lrpT6Ld9/1oe+NBT47iEWL
Fs+bt2D27Ll9rhLGZ8WqhQsX8f3zwW/mHg08GJxX9I+zb729e5HB5J/5m8A/
AwA8D6g/oDi4CAEAAADVIoN/LtLu4826sU8rJT2c5Z8Ncsy/wRvJ3DsC2ifY
Sj9bhPPP5qa4NuCgXRPX++fs7OyMjIyWlpbq6mrmn2tra1tbW5NMKTXb44SE
BOpYYGCg0FzxW2Cz4Pa3BZbQ0FCdTldSUiJlEWlbGy2EhIQwwcvmf6Zl9thB
KqE+cPM/U7lWqxVtISwsrLy8nGpevny52BRu/o2srCyuXNSBS/lnatNq/g3W
IPeWmqK3dFxSXp1aaDPNjE3VSk0TjDD5TAvUmfr6+vDwcOqSaAuivWpsbMzN
zWXzb7C5tSmi829I2X7R+TeokaioKGqQzb/BFLdVC73jnxNPrusd/2ycbYP9
j7GkqHcdN/i55396XHS/I+WfOQUtKp/t8c/s02H+mSlo9hRCemUTmDD/zM6D
qH9mLTD/nJOTk5ycTJ8O/cmkpaUVFhbSnwObf0Pqs3hz2VsGk2TWHDa+lta0
e3nN6HOVMPGm8P3zoW/mLt48acWHKz76crbftwsM8M8AgEEA1B9QnJ6L0Izi
/QEAAAAAh7P9s1E+85Wz9XtebPvn5uam6e+c50MlA5x/I/6fL7c0VAkasPbP
TC0bC3rX9AhoHx+L99ZiWVjKaWo4aPnjMv/cZU5jY6Ner09LS6uvr2dP3Kur
q0tKSgoODo6JiUlNTb179+6dO3fYJAABAQFdgvBb4Ab39quF6upqqmAcIFpW
xh7HJho2HbRoC5Rbt25RByoqKthsG8I0NDSwTgYGBkq10NraStUuX75cWFjI
5n9m828UFxdz5XSAwhZ0Op1Um9Rn6hVty4QzG1DNTQZCJ4f5Zxu9ajM9fzA0
NPTChQtZWVlsUDebCzokJIRWMf9sf6/oo6mqqqqtrY2Li6P26ZwLnz9IH4pU
r9jgdqvnD1Ij1FRsbCytLSoqou6xicH5LfDnfzbO8mwKNwG0uWS/2DBnWcY/
s/xkiugq6rDwTPL9M/t0OP/M/fsLM88s3L+8cP5Z+PlS6IzRH0t8fDzVp/2y
qbmpkD5xVkH0s1i8+HWDeZAz8fjnXya/NsVqFfPP/FX80C4yMjJoX7T35W+9
M3fu/DffXC767fTSiy/xN4R/BgB4HlB/QHHwjyAAAACAapHh+YNWzxkUlvSk
T/8sZCDzb4Tvfa44I1psb1b+2WqyDeupnXsq9rw3T+sc7CdtpTEPh4viev9M
qampCQsLY6Nh2SQM8fHxgYGBtBATE5Obm8td8FqtVtRnDrAF2opNssFakLKI
TE1L9YF5PGbRGxsbr127xo0xpuWGhoakpCQ2VbUNg81auHz5MvUnKyuLm38j
PT2dK29paRG2YNs/l5eXX7hwISgoiDrTaAotUGtUSKvY0dnuFTsQaqGpqYnV
pwXWIPcN1q9ecfNy02kJDQ1l/jktLY0+BSrR6/WxsbFSvaqqqqJdU89LS0vZ
jNa0eUhICJ1eWsUeoseeo2fVgsXzB10Y2/7ZRuz3z7bDzoMN/xxgSp8Lws9i
3rz5Vt8h48dP4K/i1DR/FT/vvuvzxhtvzpu3YObMWVOnTps06dVx48aPHj1m
1MhRI4aPGDZ0GNcy/DMAwOOB+gOKg4sQAAAAUC2qHf98TywDmX8jI+KMxN4s
ptLghj0bl0eOFAhnnke2eNqgyKhoXruwz66Iy/xzp2VCQkL4F3ZDQ0NycrJQ
IGu12k6JDKSFkpIS2ryxsTE7O5spYtGkpKTU1NRI9SE0NJSrySbiYHNB0ysb
zcsGCds4CtYCN6aXDqHcHH55c3OzsAWdTifVJrVz8eLFnJwcNvUH889ssDcV
0ip7esW5dG58OC1whVIt2OgV+4wqKyvr6+vpk2L+WXjO7TnbzD9TI7RADVKz
Ui24o38Wnkm+f+afB9uh88D5Z6kz2WcLwg9i5sxZ9L1BX9DUrOb1w7T8yqjR
/FX8cKv4WbBg0Vs/GKR4+aWXhw8b/vLLQ1968SWCvyH8MwDA84D6A4qDixAA
AABQLaqd/9l+/2zP/Bv6Cwd//vnngdnN3rmfEXVGQf8cHx8fZ0qsKZGRkVev
XuUEMpslmN6K2sgBttDS0lJUVMQUdKt0UlJSqCmpPvAFeENDQ3V1dalptmR6
pWW+FJVyqqwFzjlzI41Z+OX2m17WZkVFBWuNekLHyL6C6IiokFb1q1e0Ib2l
bWmBr8dFW7DdqzbTIOrKysra2tq7d+/2yz/zzzZtSJtTI9SU1Ulr83T/bPXP
LjYi5Z/71YLwg5g6dZrVd8iwocP6XMXP9OkzaNW6EzrR15defCmWF/6G8M8A
AM8D828AxcFFCAAAAKgWGfyzvbHhn8PCI46IhcqFlfucfyPw42WPHj0agNc0
BfpZ9XGZf7ZKpVgKCgrCw8MDAwN1Oh1XKNzWKS20trZmZmbGxsY2S+fOnTuF
hYVSLVgJ8MjIyJycnKamJnrlnrLHOXB7WmCJMcd2C7QLp7fpml5RIxEREVlZ
Wbm5uY71ijakzamRqKgo2y24o38Wnkm+fw62+9MJ4M3/7MQrZPp0r40bNq5f
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
bDn++dhi2oTdTx2aazEpB/wz/DP8s3v5Z4x/VjkyzP8sFet5OFTon4XYM/+z
UD4bBuifLWbY6HMT/kwaoua4z/k3LLaiAjcdBQ3/DP8M/wz/DP8M/yzElToC
/tmDUfAaVj89ZwnjToHS8K9DXIpuRB/+Wev71BDfM1bzb/QOfu4d3sxXzebl
vvyzcXnxIbZg+ThC+Gf4Z/hnN/LPfO0spaDVcGMymJF7/HORdp/l8wjV65/v
icXO5w8KbfPA/LPlFBwmPdzzDELruTj4NW1o494nGAqeP8ifSdqiittFDv+M
IAiCDDCK/8xzpRmz2JdU+KukloWbcGullp21I5X0TWnbDBxBA/8MFIZ/HeJS
dCPaHPTPiw5ajPlxzD+XnNv6wtNbI9kr5n+Gf4Z/dkf/zH489jkRhxpuTAYz
8s+/oT8h8QRCT/LP/V2LyBH4ZwRBEBVG8Z95rjRjygtAj8EBZS26id5Jblzx
E+IWwD8DpbG6JhXvD7CTNgfn39A8tTli4P45JnD300MWzxhi/URC+Gf4Z/hn
pfyzVAb4X2iq4cZkMCO7fy7S7nMH/xwWHnFELFQutYmNPwoWV/afl95xzKa4
62BmBwL/7IK0I7x0ILx0Irx0Iea0qeBnnovNmPIOEMiBpv/jxm3X10vIcKu3
9uxIPX0zo+DfOxjkWPzB4lJ0H9r6fP7gUfNTBcWfP2hj/o3ig3N7K4j7Z9PM
z9ws0PDP8M/wz8r6Z/lmCFTDjclgxgXzP4vbZ5X5Z8QDIrd//hlBEATpTwan
fwYDR3nbDAaG4pcQGLT0XIT4wnc3JPyz85+5I/WcHasnD8I/wz/DP8M/A6cj
//wbkoF/RpwbWf3zYwRBEKT/UcPPPOgIMEAU17nuheKfFxjM4AvfTVHYPxvn
37B48iD8M/wz/DP8M3A68M+IxwT+GUEQRG1Rw8886AgA5OYSL4p3Bgxm8IXv
pijnnyPXDaHLxXrmZ/hn+Gf4Z/hn4HTgnxGPiaz++ScEQRCk/1HDzzzoCADk
hpln+iODfwbKgi98N0U5/2wL+Gf4Z/hn+GfgROCfEY+JZ/vnCxcuLli4aO68
BbNnz53pPdvLa+bUadMnT546adJrp059J9NOly1/e87c+d7es6d7zZgyxbiv
ceMmjB49ZsSIkRPGT7Cnhbfefmf+AlO358z1njV7xkxvasrY8ylTZ8+e8/Dh
w+7ubvZqu52WlhauqfnzF86aNWem9yyvGd7Tp8+YOtV4Hqg1Ow8qKioqzJRb
t27Ra2hoaIgpwcHBVGJnIwiC2Bk1/MyDjgBAbuCfgUrAF76bAv8M/wz/DP8M
/+zxDNA/D0RBDyr/fMnuKN1TN46s/vmRZbTR5WJkaEN7eXbyskcORafTCQsX
LFz0Zuj9famG47mGc8WGq2WGgHLDjQrDlbzOcWPHO7YjO3a6WBNerImtmrh1
d0pKSldXV3d3N/3V//LLL0NfHmpPs/MXLJJq4f33Nzc1NQ1Z8MHag2cePnxo
u53m5mZqqri4uLKycvHixfS2o6PjwYMHtIq1NmnSq3YeaVhYWHJyMnXmzp07
ERER1AdqraWlpbW19ebNm3Y2giCInVHDzzxMTguA3MA/A5UA/+ymCG++EARB
5IjiNyaDmYH7Z6agHcjg8c/2y2dY6IHExf65z/441z/Pnbdg3Pu+r272nbrF
d+ZW39lbfedt8124zXfRdt/Ro8doeHHiTo3+ObZKk9jw0menbty4wanjX3/9
1U7/TN2WamHXrt0JCQlhSTmaEeu6TbFtoampysrKurq6vXv35ubmcvK5vLxc
q9VOmDDRziMNCwtj8jktLS0mJqaioqKlpaWpqamkpCQoKMj2ts3NzbW1tfTa
ZyGCICxq+JkHHQGA3MA/A5WAL3w3RXjzhSAIIkcUvzEZzDjFPzuWQeWf+XqQ
+4kuGvhnhyOrf+62jDY6gyr4X9A+8ZdntVqtaH+enbys26HodDph4ezZcw80
Gw63Gk60GX7oMFzsNFzvMgTdN4Q+MIwaOSrMHLqEnLhTo39ObNCktv3xbISf
nx+njunohr481J5mZ8+ZK9UCV0czfhdbYBNxSGXOnHl1dXXNzc10mIcPH370
6FFHR8fRo0e3bt0aHh4+btx4O4/01q1bTD6np6fr9fqCgoKSkpKYmJjMzMyg
oCAbGzY2NhYVFd28eZNeadlGIYIgXNTwMw86AgC5gX8GKgH/wYubIrz5QhAE
kSOK35gMZuCf5U5/Rz6zn+5K99ot41L/HGr0z0/85YmMjAzvhcto2c9f28Nx
f3o1ONs/z/SeLTX+efiwEVw15/vn1DZNRte/pLYsWbk6Li6OqWOD3f7Ze9Zs
qRY6OjufXvmdZuo/GbRMH5mNpmbNmsNNu7Fr167Q0NA9e/aEhYWx1saOGWdj
W2o5Pz//9u3bSUlJer0+MTHxzp076enpKSkpMabU1NTQp8xGaEuFvvqCgoKu
Xr2q1WoLCgrqTaEFekuFtIoq2HNOEGRQRQ0/8+CfAZAb+GegEuCf3RThzReC
IIgcUfzGZDAD/yx37LfK8M8DjKz++aFl/E3+WavVjh07VhsaTcvl5mTkl2dk
GGfneHbysocORafTCQu9vGbuu9clHP98vaFz6MtDqcKQIUO4UfRLly51yk6N
/jmjS5PVrcl5/N9iyt9YtbayspIOjc3/bE+zM2Z681t4fdWat95+lz1GcMeO
naVVdf+2xF8z+yS90vLOnb42mprpPYub85kWtm7deurUKfbR//rrr6NfGSO1
IX18qampZWVltFBSUkKvxcXFMTExd+7cycjISE5OpuWmpqbW1tbAwEAbHaCv
vry8vOvXr1+5coVe80zhv6UK9pwTBBlUUcPPPOgIAOQG/hmoBPyDo5sivPlC
EASRI4rfmAxm4J/lDvyzy+JS/6zN6LM/zvXPH3/8yeTJUydNem3ChInjxo4f
PXrMqJGjhg8bMfTlobt8d1GFuro6pqAdkM9SOzX6Z5M61uT9osn/9W9nwxcs
XDRv/oI5c+fNmj1npvcsrxkzp033mjJ12uTJU1599TVhC9O9ZvBb+OuPt7Zu
21FcXFxVVbVjx47tV27q0kp+uzqAXt9LzB87dryNHnrN8OY/cDAvL+/QoUN0
nn/99VcqGTXqFakNqWZZWVlDQ0NlZeX58+fpG6yxsbGwsDAuLi4jIyMzM1Ov
19Pb5uZm2/65qampoqIiJyfn6tWr9Ed61RS2QIW0iirY2BxBBmfU8DMP/hkA
uYF/BioB/tlNEd58IQiCyBHFb0wGM/DPcgf+2WWR1T8/sIy/Ntpq79zkG3v9
/Pd+Yry2n5287IFYrGb8FlbQ6XTCwpKSEr1ev2HDhtDQUL1laBWrU1tbe+jQ
ISfu1OifzepYU2D4l8z78+YvWBpp2JdqOJ5rOFdsuFpmCCg33KgwMnHiJGEL
U6dNpxZONj7q7u4+2fT4/0xq2LZ9R1VVVUNDw6lTp/76z+/8Moprauv8Mks0
+roJEyaKdp5l+vQZnHxmk3hs27atq6uLSmjtiBEjpTa8ffs2fYJZWVktLS3n
z5+n15ycHCoJCwvLNCXVlMbGxoCAABsdoFCdsrIyaury5csXTKEFekuFtMr2
tggyOKOGn3nQEQDIDX8qOcU7AwYz+MJ3U4Q3XwiCIHJE8RuTwQz8s9zpr3/G
8wcdjkv98wVr/2ycdsNEdJIRg7R/fsCzwaJrRVUwZenSpbTJkCFDamtr6e25
c+cXLDROZDF79tyZ3rO9vGZOnTadjZE+efJbp+zU6J/N8tlI3i9z5s7zlcj4
8ROELUyeMnVt9U/JhfW/Xx9Mr2uLWrZt39HQ0ECnNCIiYvx+P014keZKskZX
Su2PGzde6oxRpk6dzpfPlFOnTmVnZ9Oq1tbW4cOGS22YlJREuztvGSqJiorK
zMzMyMi4c+eOXq+vq6vTarU2OsBSXl5+9+5d+iNl7dACvaXCPjdEkMEZNfzM
g44AQG4w/hmoBPwHL26K8OYLQRBEjih+YzKYgX+WOxj/7LLI6p/vW8ZP4J+F
Geu97L506IOWWqXT6YSFM2bM4ATykCFDGhoaFixc9GbofeFQ5Ct5nePGjnfK
Tl9/483RW/aO2rRr+IadL6/d9sKqLbNmz2FH5+vry732HO/YccIW9u8/UN/S
8fsVFzVzv6dXWr5y5Sqdz66urpaWltWrVz95OY7z22PGjJXqHmXy5Kl8+UwL
sbGxx48fb21tra2tHfryUKkN9Xo9++Jqbm5m45/Z0wZDQkJu3LgRaEpAQIBW
q6UFGx2gUCMZGRkXLlw4e/YsG//MFqiQVtneFkEGZ9TwMw/+GQC5gX8GKgFf
+G6K8OYLQRBEjih+YzKYgX+WO/DPLotL/bO/lir4X9A+8ZdntVqtaH9s+2cb
EVXBLJxAbmhomDtvwbj3fV/d7Dt1i+/Mrb6zt/rO2+a7cJvvou2+o0ePccpO
ExMT4y0z03uW1Phn0Z12dnYOWXNaM92PQcvd3d1dXV30Sl8C5eXla9eu/e9x
lWxw9SuvjLbRwxkzZk6a9Kpx+utx48eOGTf6lTGjRr0yYsTI4cOGD3156Gjp
bVNTU4uLixsbG6uqqs6fP19TU9PU1JSbmxsZGVllmerqahsdqKioSEtLoxZ+
/PFHek0zhf+WKtjYHEEGZ9TwMw/D4QCQG/hnoBLgn90U4c0XgiCIHFH8xmQw
A/8sd/g/yO0J/LPDkdU/d1mG+ecn/vJERkaG98JltOx33J/Bn/+5y6HodDqp
VXR5cMuzZ8890Gw43Go40Wb4ocNwsdNwvcsQdN8Q+sAwauQoJ+6UH68ZM9nZ
Fo5/HjXqFWF9OnUhtwsIzcR9bKGjo4PJZzaYOTw8fOInx4yzfGR1j7TZ7YSE
hDjp0FqpDekrKyYmprCwkPs0c3Nzb968GR8fX1lZac9Rs9BWFy5cOH369Nmz
Z1NTUwtNoQV6S4W0iirY3xqCDJKo4WcedAQAcgP/DFQCvvDdFOHNF8KPP4Ig
Aw77kvFX+sZkMAP/LHfgn10W1/tnrVY7duxYbahxLg7R+Z8d0zW2/TOXmd6z
pcY/Dx82wok75WfadC+p8c8jRowU1k9KSkpLS2tuadGM2hQYk3b37t21a9c9
5k3jfP/+/fkbt2qyujV32h3otj2hK6G0tDQxMTEsLCwqKiokJCQ6OvratWu3
bt2iQvsVdEFBQXJy8rlz5+iVlutNsSqUo/8I4tZRw8886AgA5Ib/U1bxzoDB
DP6DFzdFePOF8MPuahEEcTic+VT8xmQwA/8sd/himYvVW6tV8M+ORVb/3GkZ
5p9t59nJyzodik6nk1oVzIuX18x997qE45+vN3QOfXmoE3fKz5Sp09jRCcc/
Dxs2XFifTl1tbW15ecW7+79/av4H96qqNm/Zyp/GmZaXLVumudOu0dcNHTqs
v922M6wblebQcmpq6tWrV5mCtrOR+vr6vLy8u3fv0ist2yhEEISLGn7mwT8D
IDcY/wxUAr7w3RThzRfCD7urFd5vNlZkRR+dEXN0ZlNl1oBvphHEbXKvn4F/
Vgnwzy6InSOf+VG6y24ZF/vnZycv6xPHdI2dKvjAgY8mT546adJrximRx44f
PXrMqJGjhg8bMfTloR/s/ECmnU6ePOXVV1+bOHGSt/essWPHzfCawSZhHmaa
hFlqq8zMuyUlpfnFZRWV9xYtWvz++5s3bdq0YcPG9evXr1u7buaMmcZuDx02
+pXR/e22w2lqamIKOjw83P6t6uvrKysrrTyzaCGCICxq+JkHHQGA3MA/A5WA
L3w3RXjzhfAj6p/rCxMSv54Wccw72X9e8olpjSWJCtyBI4gSkdKYNv584J/V
APwz4jGR1T93qC8FBQWxEqFVMu1Uao8sUlvV19enpaVRhbi4uPj4eKnNaZVM
3RZNY2NjYWFhWVmZK3eKIIMtaviZBx0BgNzAPwOVgC98N0V482UraR8PHfpx
mr21xXJ5OftPj5dfdkY1+SP0z2W3L2WdnhV5YuHfXnyZ0B2fn3d2VnX6VWXu
wxHEtYF/dlPgnxGPyWDzzwiCIOqPGn7mQUcAIDfwz0Al4AvfTRHefLEM1YgJ
4H75Z65y71aXl2vs2d7Oaq6IlX/O0B4o1r71xc6pw72XHb7dSoyeueCL7a+V
BywrDDuo2N04grgq8M9uCvwz4jGR1T+3IwiCIP2PGn7mQUcAIDfwz0Al4Avf
TRHefPVEVDU75p/5JfaMaLazmkvC+eeHXW0JZzaXh67/aONrw//828O3W0/k
GhjDvZcdWD/xXujqtIubHt1vU/jOHEHkDPyzmwL/jHhM4J8RBEHUFjX8zIOO
AEBu4J+BSsAXvpsivPnqCd8eG4WwOdyQZv57U+WPl/PHTPNqLF9uaso8p0ZP
EaeYrUY786qZmjc1a9Wk+a2pHdP7nnU9bRrfOWcENburfdDReu3A3Iak/Yu9
Xvh+/lOGg6/5vj6VU9Dv/xD1woinF01/rkG/K+LowoddA1fQwT6akX5FA24G
QZwd+Gc3Bf4Z8ZjI6p8RBEGQ/qarq6tNBT/zenSEGcV/egHgecA/A5UA/+ym
tPXtn41CuNfr9phkszxmJSb721PE6WTh/Bt8p821wWvMetf8Znnd6BkfzUlm
4xrzQu+GzvTP/pvHdOZ++cpLf7y+9DnDwdcYP66Y/NHR977/ZmxZ/iLDw/eu
X3p12ri/NSbtv/T3SQO+vYZ/RlQaK42pEYvVnw/8sxqAf0Y8Ji7wz0pPpIog
COI26TJFDT/z4J8BkBv4Z6AS4J/dFKmbL3FpzLPNvJhGH1vVsb1gTI93Fupn
W7vmlvk7FW/fOWF3tcdWjy0J8Dnku3jDqN9z/vnwW88Y/n/23sV5lqs+8Jv/
IuVUJVUpVyqbmCJeiitpLpIQQrIQki5CiIccx75ISVe5dlEla0NckXfXeVgy
4NTvisJZJ+vXVtYgX3nNq5jEhmvA+LlrywZjsD0YbMu8ZAFtPQwIzGT6fV7d
09Mzp8/3nPl86lPS/Hq6e3p67p0787nnnv7af9/6A9/3n7/5R+5eP/qad/4v
d+rflcuYvLp0vjxZ2Wqzrm8qibldVNy/XX/R/VRunmXnqx+UNaufnWi727i3
stYBGIGdMfvic05/liT9eTLOv2RRCX2A3mj+LOr+qLKXhMBHf/7QH6yn+eGt
j316gh+p/MO/2NffqPyjz+zrR1s/9tnx/qbqx/9yvL9l+Md/NdLfNvzEX4/0
d2z/5PGd/m6fn/ybYX+vz099bth/P+Cffn7A/zDgn32hz9/f6Z9/0ekf7HT9
JaePjfHTT9j+4Uj/4m9V/2i8n3lS9WN7+dkvt358L//yK61/vK9/9dWtn5jg
X+db/2Saj//dJycp4WMeOQLRt5cVgh8MnrL8hWOk5tP6sz2x8979uSrPjvws
sD9/8pOf/Df/8rUf+9fX/qsff+0PvOA//uqP3bh58/e86/95aVWev/rFH/j+
7/0vf/rB/2b9yPXv+snv266sf1cuv7FXX9eVm+XtKv0qo51XWXlLHf9crNfd
rSVlZwOw73BttV1Gd4b9cWZMZ3zO6c+SpD9PZrgwH7s/y/nHL+0fEu0h2UvC
QH+mP9Of6c/0Z/qzLf0Z0bf0ZxQib/iRmo+af6O+1UxroczIYa5szJ7RTtTs
6sPlOGpHMO4dL23NvzEQuo86/8a3vvWtP/uzP1v93I9+/Gee99uX/9vr/4v/
6Mdu+s6vfvEHqvh8/bX/ye/+u9d/6uf/sw+/419uV9uurH9XNmKydVsZnKyO
eXZsUqzZVWN3QtbX6d2qfFAhmQMioi9j2vE5pz9Lkv5c8Wsf+ODDLrbL+zbp
K8zV8mT7s/IHzPaPi+KY7CWBoD/Tn+nP9Gf6M/3ZlhyB6Fvm30Ah8oYfqXlP
f9au9NdcErC5kqB1RcKegcrVdtpWWhXuGa882Ku7o5qxP1ffeT/72c/+6r/9
iT99xz/6D4989/Uv+kd/+Ht3bb3w8ud/+tdu+vQ7/9OPPPrW7Qqu78pj+rMR
kv335/Ye5t+AfeD6g5FKf654+OGHn/vmN223y/s2cRbmduaNwf488+RL7j84
up3Wm/X9kaQdilaYyz827CX9T9wv9Gf6M/2Z/kx/pj/b8s+xEX1Lf0Yh0p8j
NQ948fduYLVc1P685Utf+tJHf/Xyb7/9O7/y+7dff/47t37lsdf9/r/+r3/7
A49u7+r5rryrP2szbOzcRJ1Jw/n9f+f8G9pWYYexQXTQnyOV/lwxuT+rnbmN
xJvd/XnOyZf6/uAwljhXM3dKf6Y/05/pz/Rn+nOU/ZkcgehN+jMKkb9wjNQ8
XH92Tf0sDqM/b3nyySd/9yP/34d+5p6v/+XZ1//q7R/8P1/1e7/xq9uF/d+V
d/ZnfQqO8kt9PWLNnItDXXMgG1vj3eytrFUAxkB/jlT6c8Uh/Vm90Wbn3eOf
Z5t8qW/b7t2+vz8P/9Uk/Zn+TH+mP9Of6c/0Z8STl/6MQqQ/R2oecPxzDNj9
ecuzzz7773/no+/9qf/hvT/1P25vbH8M8A0cIAT050ilP1c8/PDDX/7yk7fd
907V7ZKR/dmIz5sj9OfjTb604yHafjzuSJj/+dT68/v+xfMWL7j/ffRn+jP9
mf6sWf2pN7xEVn8mRyB6k+sPohD5C8dIzenPgzj785ZvfOMbnyzZ3pj7u7eG
Ml8og5nBP48//vgv7AP9WYj054qqP9uOmf/Zjs+bA/uzh8mXujmeF/p8Ht0E
G67V7Ek9urXsRh34Iomp9+efvWPxgje8119//rkLrs7M+Gf6M/2Z/tw3/lkN
zs74TH9GPBHpzyhE+nOk5vTnQfr6M8Bp8oP7Q3+WIP254uGHH37cxcjrD9q1
+bD+fOzJl9q/kMwytTuXG2VZO2bZsZq6VK3T+t9r2ktCQH+mP9Of6c/055nn
31AHuzD/BuLJyvwbKEf1DZ/3/FjM6c+DbD9KOWMFAIxnQ38O7eP055ID+/O+
94IPZunPH/wnz69Ly+1vK5e8+4HvWuhL/uBnbl/843/6tnr57W/79C/+8Auq
Fb7rh6+Ukflnb1+84J++7UedK5T9WU3N1e3tfxte9bPF8vf+8+fVP9/zFkd/
/rliq7fX69zx9s+88431QzzvjR+q1nnr3c0O7/65Mj63P/78Rz/28xcWL7hw
93aTe95a3r7/fR++/7sXz3vTh4v4/FP3LL77XzxCf6Y/05/pz4Mjn+nPiKcj
/RnlyL95idGc/jxI6O/ZAImQC/hicsrSnyt+7QMffNjFdnnfJotdzHn8Cqc7
+ZL//lzE5+/6oQ8qS37mdi1E/+N/8u564eL5D/ziY5/+8Nte12Xn4vbr3lz3
5+0KP+pc4S3u/myMf1Zuv/2e573x1139efsQ//yd29tvv6fLzsXte96qjX+u
hj0b459//sKiqc11f65uVDl6+1/GP9Of6c/0Z8Y/I2It/RnlSH+O0Zz+DACz
EPyLySlLf4Zk8N6fi8L8up/oX/ITd1Utuhz//O51N9T5PZ/WbzsX1rff8J4R
/bkb/NyNiHaMf37f4O2yS5c4+7Pr9k8Vm1z4KebfoD/Tn+nPEc7/TH9G9Cb9
GeXI/BsxmtOfAWAWgn8xOWXpz5AMJ9af62k3euZ/3tWf31fsoRwI/aH7n09/
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
0p8n8Mq77t45/vm66663N1Ry62cuPVEvXD1SLimmp9CXVCH3kXr5duH5X/96
tcL61z+zxwqX1Cy8/W/DJz6nP+5TWV9MHnqIT2WfUHdo7L/YfPWJr5c7rw6g
eOL1to88tXniyfP056lQVsfAWYqUtj9vyvAr4b/05/Gk0J+Z/xnx2NKfMbj0
Z7Hm845/7vtv8SGmi8PNeOWqJ7fFWJ0buhrd7Fyirt8UaW0d5YMWAMxDdF9M
EpP+PIFX3HlXe7tv/PO1L7rW3lCNz22/bTKvGqKraFy23KrQPvLUZqNk27oV
j1nB6M99C4ut9EPqDmzwIexhz8b+7Ri+vVHlaG0Ph78uM/TnxTjGr3kgsz1Q
1HCW4FjQn0eSQn9eUCcQjyzzb2BweYcXay5n/LMx/0Zbj42erH7uGV5i78H6
oAUA8xDdF5PEpD9P4MKFO3eOfz6/PG9vWLfWojDr8VZfkn2iatE9oXhnSd6x
grJQGXRdUI2I7p1MozdcN9uPPKp6k2aYd0z9GQBOnF3lNUE2Pf35p0ucd9Gf
EdGW/ozB5V+4iDUX1J/16w866vGjF9Xhy84ljl5tb9V90AKAeYjui0li0p8n
cPsdF9rbfeOfr7l6aW8osj87p90Y3Z+7PXzm0hPp9+cxh7FoJnyYgdkeKGo4
S5Ei8IWjP6vs/JwQd3+mTiAeW/ozBpe/YRRrLqk/5/ocG0U8NkYvm3dbS5zj
pe2tmg9aADAP0X0xSUz68wReftvtO8c/X33V1faGo+ffGJg9Y6/+XDxQvdsi
+Q7PjzGpP7dzOGvThuw87Fjn39jsM//zDAgMdALhLEWKwBeO/qxCf0bEvaQ/
Y3Dpz2LNhfXnOQn4fAFOjei+mCQm/XkCt9562zPPPFPddo5/fuqpp8+98Jy9
oTmvcol1/cFdg4f36M/K5BifeKpdWF8x0Lz+4LT5N5oLKT7x1OoJe//2Jl17
Ly5lmPT1B2dAYKATCGcpUgS+cPRnlcT7M3UC8djSnzG4vMOLNac/A4B/ovti
kpj05wm86EXX3XzzLTfddPONN770JTfc+OLrb7juuuuvfdG155fnr7l6efVV
V5974bnnfdfz7A37hxkj/XmQVVb9U61spS3uHqhZoWR5trZ3UbI+W27vrP67
90FsN1s4D2PnRu36jp/23uPedGdp6GD6mXi6xjDplDZsX3PtuLRfA97P6gzM
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
Cf0ZEW2ZfwODy5u8WKd93gCAE4H5N9KQ/gzJwPzP4ISzFCkCXzj680ii78/M
/xzO+y2CHxIeS/ozBpf+LNZpnzcA4ERg/o00pD9DMtCfwQlnKVIEvnD055HQ
n3Gy999//2899YFW+nNK0p8xuPRnsU77vAEAJ4Ix/4Zxm/4ci/RnSIaE+/Mq
a/+VSbZSlncPpKyxWCzP1j07Wp8tt3dW/937KLabuQ5ixEbt+o6f9t7j3ugv
x9Rn0XvGDtjhxBfiVJirP7t+HTa/oYzXlP48kuj7M2kinPTnhKU/Y3B5kxfr
tM8bAHAiGDHZwNmfnevkUX0xSU/6MyRDuv25N1Nq/VnLuj0pdHr2LHbabLR9
sNHbF4+1XNaHo/6g7rCsfd4StPJyHPIsnOsetkP68yDz9Gflt0t7s3kprd9K
9OeR0J9xskZ/HpmgmakjCrn+IAaXN3mxTvu8AQAnwmIXI9fJo/pikp70Z0iG
ZPtzf09292flJ3Nsrp49rZG73QIzi+qldL1erdfaBkOjg5dnW9bVcWVnZ1V/
NtOr/gSOSneWRj8Lc4l6xtTDPOy00J+HmX/+jfoF6V4X8xWiP4+E/oyTdfbn
MXNBM1+0fOnPGFwmWRLrtM8bAAD7EtEXk/SkP0MyJNufi8GYy6VrOoC+/mxl
tOZuNXva93Y7sWqwMw93NbZ/6G/5KKuzrLh3lRU3l8ZjaYfsg76z1D2y8Syc
S7b/L45fP8TDTgv9eZjZ+7P9G8F8henPI4m+P5Mmwmn355EDoasN6c+SZf4N
DC5v8mLNlS9fAAA+iO6LSXrSnyEZku3Pm2JkbVUp12dLo4bVt5z9eWONaDay
p32vq3Lb+7cX9g5fbsrt9t51UaHX4vqz/SzsJfWZsTY+8LTQnweZtz8rf1lA
f9bZnGB/ZvxzIAfi88j+TIKWLP0Zg2u8yfM+L8dc+fJ19E8yAAC58iYTyxeT
9KQ/QzKk3J8bjGC5Y/6NblZlfRxv04TNe9vHsCO0s5SOD63dzBtrOfNv2I88
1J/LodvD05L07tCG/jyC+fqzNhm58fc3zL9Bf8b5PEp/JkGLlf6MEqQ/yzSn
PwOAZ6L7YpKe9GdIhmT7sxIxR41/Vq+i1gZmZ3/W71UnN7ZmjjAutGdssGui
iWLsc3XhwfYZSLj+YM+z6Jt/w/E0Dzst9OdBZurPjvnVuf6gxob+jHPZ25//
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
dm/Uru/4yf9Hre4s1U98lU15+iM56lkqbrXHOvFli5eA/bn9/WS8iPTnkdCf
EdGW/owS5H1epvkh/Xnn8jn6cznxxqrJz0VV1meEHujPjHkG8An9WY70Z0iG
ZPtz1x2LHKkGMa0/a/myp31O789qCd0+2Ojti8daLpt//Kb8oKVV5R/IHR+z
P3vsuMc+S1XMVpbTn+eg+91k/htK+vNI6M+IaEt/RgnyPi/TfPr8z9bXiG55
vYEagw+nrz9XwxfsGT/qR+9GO3erLJzHDwBHhf4sR/ozJMNp9GetQLr7s/KT
ORhXD7DWUN1ugRk69Uder1frtbZBbxgtN9xSX5AjOztry6q2jWOytGOh9+cs
W3ZHPOoMDKxkHLKfs3RWD9emP88P/blgc4L9mfmfET1If0YJ0p9lmh/n+oPK
TBeb7t+znc+yGcY/G58b239MVz96c1TtwXZH5ec6iQBQQX+WI/0ZkiHZ/rxp
C6aZH/v6c10qu2DZ3K32Z/ve/mGf7jzcDbTuH+tbPsrqLCvuLea9WNVl1dyh
x7jaO/551Bnonlr9dO2tWo5+ltoDLn6iP8+KNva8gf48EvozItrSn1GC9GeZ
5iP6sxD6+zMASIT+LEf6MyRDsv3ZKqAtO/rzxhrPawdY417nsF5r//bC3uHL
1WOtsjLcZm1LFdGfNyPOgPO4+saJH/0sNY9ezlhNfw6A8ZLRn0cSfX+mSyB6
kP6MEuR9XqY5/RkA/EB/liP9GZIh1f6sZUc9h+2Yf6ObTqxJ2GqAte9tH8+O
0M72Ob6sdnNKmGXVsa9j09ufx5wB+4n3beV4Us36h5+lYsEZ/Xl+jJeU/jwS
+jMi2tKfUYK8z8s0pz8DgB/oz3KkP0MypNqf1cxpFM8d1x9U55Bw9mf9XnV0
tSutqkdhbLBjZoli1WzZTCIh5vqDo86Adfbts6o926OeJaV+lpPI0Z9nof+v
DOjPI6E/I6It/RklyDxLMs3pzwDgB/qzHOnPkAzJ9mflAhZGpNX6c4eWdcut
skwdzduOtjXuVXfjKJ2OO635KqwRvsq1Dpv/a6Hc+byOi9mfu5Q77gyYlxt0
bKVw1LNkThVCf56J9lU0zjj9eSTR92e6BKIHLysEPxg8WXmfl2lOfwYAP9Cf
5Uh/hmRIuD/3IWGCAvlwliJF4AtHfx5J9P2Z8c+IHmT8M0qQ93mZ5vRnAPAD
/VmO9GdIBvozOOEsRYrAF47+PBL6MyLa0p9RgrzPyzSnPwOAH+jPcqQ/QzLQ
n8EJZylSBL5w9OeR0J8R0Zb+jBLkfV6mOf0ZAPxAf5Yj/RmSYYb+vBgH/VkU
nKVIEfjC0Z9HQn9GRFv6M0qQ+Z9lmsfTnzfN0QJARNCfJUh/hmSYoT8DwImz
b4lNgA39GRGPIdcfRAnyPi/TnP4MAD6hP0uQ/gzJMM/8Gzth/LM0OEuRIvCF
oz+PhP6MiLaMf0YJ8j4v05z+DAA+oT9LkP4MycD8z+CEsxQpAl84+vNI6M+I
aEt/RgnyPi/TnP4MAD6hP0uQ/gzJQH8GJ5ylSBH4wtGfR0J/RkRb+jNKkPmf
ZZrTnwHAJ/RnCdKfIRkS7s+rrL6yYbbSlncP1K5RsDxb9+xofbbc3ln9d++j
2G7mPoydG7XrO37ae497050l5QH3fMxVNuWMbeI9aRII1597TzL9eSTR92e6
BKIH6c8oQf6eUab5iP6sfowvPqKpn7Knf8ifQu7oz8qXsdQ/ogPECP1ZgvRn
SIZk+/P240wdP81wrPVnrVD2fO6Z3p+LnTYbdQc0arst9eGoP6g7LD+xefuo
pvXn7sD3fRYTi32kJ00Cofqz8hvI/L1Efx4J/RkRbenPKEH6s0zzMf3Z/ijd
fkRXP6vrQzd8kNv9eZU1jzjxawMAeIX+LEH6MyRDqv3Z+DylfqBx92flJ3P0
rd6frbG53QLzY5P+wOv1ar3WNuj9mFVuuGVdHVd2dlalVPOjmf4Ejkpvf9ZK
rn6WsizrljTPUj9p3d8JaCubzz3SkyYBCfNv2L/j9i2xCbA5wf5Ml0D0IP0Z
Jcj7vEzzI/Zn+8djkw/Nv5H453OASKE/S5D+DMmQan/Wxz8vxvTn+jNX99Gr
uVvtz/a93U6sD07OT1Ld4ND+wb3lo6zOsuLeoviu6pRq7tDjx8S++Te0Jr/Z
dAelPS89/NpP2V65JeaTJgEB/dk84/TnkdCfEdGW/owS5H1epvmE+Tc2/f3Z
cwTO3f25+qZBfAaQCP1ZgvRnSIZk+3M3PneZZaPGP3cfwYwRzUZ5tu/tm7XM
+SFOWdj7Ia96rPKfpK2LoLoO3J/t+Te0qbMXerdXRopXS+ynbK/cEvNJk0Do
/uz4CwL680joz4hoS39GCfI+L9P8uOOfw/Tn9qFT/nwOECn0ZwnSnyEZEu7P
LcZnqR3zb3QTBCuDddv+bN9b0VTo3aVzfErtJpFYi5l/QzlLvfNmHNafYz5p
EgjZn81/alBDfx5J9P2Z+Z8RPXhZIfjB4MlKf5Zpns78G6l/QAeIE/qzBOnP
kAxe+/PjAAAwmk3U/ZkugehBxj+jBHmfl+lR+7P3a3Tb/XldzZtXPzrjnwHE
QX+W4OP0Z0gFf/059DMDAIgP+jMiqtKfUYK8z8t0Sn9Wr6SuXeTFe/51jH9W
JvRj8DOAQOjPEqQ/QzL468/O3wgny99Bw1PQ8DQ0PAMNEfdn5t9A9CD9GSXI
+7xM8xH9WQ754PwbACAQ+rME6c+QDPP0528BAMAu6M+IaEh/Rgky/lmm9GcA
8Ar9WYL0Z0iGGfrz4b/sQRSLH/nUgYZ+BgByibg/0yUQPcj1B1GCvM/LlP4M
AF6hP0uQ/gzJcFL9OfTJ3o/QZ6uXxY986rN/+8xk6c8AA9CfEVGV8c8oQf6d
i0zt/uwMEQAAE9jQn2VIf4ZkmKE/PyeG0Cd7P0KfrV4O78+hnwGAXOjPiKhK
f0YJ0p9lmjP+GQB8Qn+WIP0ZkoH+LJbQZ6uXtj//37/wjte89p5Xv+Z1d9/9
mrte9epX3nX3nXfedeEVr7zjwituv/3Cbbfdceutt73sZS+/5ZaXPfyvftbZ
nx955Je2e7j71a991d3F5q/Ybn7hztvvuPDy227fbnvLLbfefPMtN9108403
vvRnf+ZnAz5lgNmgPyOiYdufSdAYSt7nZUp/BgCv0J8lSH+GZJihP39DDKFP
9n6EPlsaV65caW+3/fn19/53zz777M4n8vTTz9x00/eo/bnd1evvve/HHn92
jC++/obhowJIA/ozIhrSnzG4vM/LlP4MAF6hP0uQ/gzJQH8WS+izpeHszxcv
3vvAOF760puc/fkHLt774n/2wI0/9MDNP/TAy374gdt++IE73vjAnW984K43
PnD3mx549ZseeO2bHnjdmx6453964Lrrrh8+KoA0oD8joiH9GYPL+7xM6c8A
4BX6swTpz5AMM/Tnr4sh9MnuYZUtSpZna3Vx6LOlceXKlfZ225/vvvs1I5/i
S17yUrU/t7t61d2vHjn++doXXTt8VDZ/8pPXLO57T32jpvy54j33aT96pXis
xeKan/wTx3LzGIqjbdesNnRt2t7V/yy2azi2O5h6t572DvRnRDSkP2Nwmf9Z
plP68/psaXzlmIsp/Tnc0QLAhv4sQ/ozJEPA/ly1M3vh5G6zc9vQJ9vJKltk
q/qG9gHrwCe717bO10LF2Z/vetWrR45evuGGlzj78yvvunvkHs4vzw8flcmf
/OQ1TR59z31Goi2D9H33mYv3Y3x/dZbuvmMos3K94/bArcdq23p5+yfdT2Ov
QrzX06nWVE4xHA/6MyIa0p8xuPRnmY7qz+uzZTNkofimIak/twe2qL8NWdCf
AYJCf5Yg/RmSYYb+/LUeqk8bw0vGM2bb0CfbRZufrU9Yhz/f8dvu3NuVK1e6
lZv+/Mq77h47e/OLb1D7c7urV9x518g9XHP1cvioDD7x1muueesnqtvvvq+9
qfLu+xb3vXvgOe9gu7lzt3utaR7D9rDve2tz6Mqd6tMZ/eDjj3CvlZU1DzyF
4CLi/kyXQPQj/RmDy98zynRMf1bGt6yy7ZcOUf1ZOTTzH4JW0J8BgkJ/liD9
GZJBTn9u//57QrEZuW3ok+1A+1SltOjNuP58rNM1rT/feeddI0cvX3/d9c7+
fOHCnSP3cPVVVw8flY7aa7e36+erB9aeeNqt3t6tttnq9rvbyS/MfZibd2u6
8q5+DEV9fnd77FpzNg+22K25w+6hq1WVwzbvMhZZT8dev1lyzVvfqu12fOGG
cUTcn+kSiH68rBD8YPA05X1epuP6sz60uPzucVZP/lffZwyRLtfJsqW2jrLS
xCI81J/bb0HdozQ/1oO226fRpGrloOsjcm1rPFMA2Av6swTpz5AMM/Tnv++h
+jCg3laXjGf8tqFPtoOB/nysZz1m2537uXLlSrd5058vvOKVY2dvvvY6tT+3
u7r9jgsj93DuheeGj0rn3fcu7n23Y+E1b/njnes0S//4LdfU66sbtreNvY3c
fOA4txuUq5n/7zvY4gEW7cOpj/Lue8tbrkOt7+oOznVynLuqH6h8VHVN+xzC
QdCfEdGQ/ozB5X1epmP6c32dmfYrRhlp65/sUcfVl5FineaOYvvtov5/sTma
gf7cPGD9YPUSdbS2OmFhcaNbs1nHte3AMwWAEdCfJUh/hmQQ0p//XomiE4rN
Kffno5yuaf35jguvGDl6+UXnr3X25wcffOjWW2+75ZZbb775lptuuvnGG1/6
khtufPH1N1x33fXXvuja88vz11y9vPqqq8+98NwD//MDw0el4+6iegh2rVPU
1W5hs8bo/rx7897j7Grz2P7cPmJ5T12jG4pFzePad+nHaZ4b5/raobQ/aHfA
UYi4PzP/BqIfmX8Dg0t/lumY/tx9y6gqtPrdo71tjCU2v58sz1bKClrO3gNH
f1Yf1PheVEXkbknXnYv/2c9iaFvm8QCYCP1ZgvRnSIYZ+vOzPVQfN4aXjGfM
tqFPtov+0QSHP9/x2+7c25UrV7qVm/58++0XRj7L88vzan9ud/XpT3/6N8ex
XXP4qHTede/i3nftWOpa5+NFmH2Xuca7iuL68XZZdVtdOH7zviPa3tDZbqEc
4MeLzuveRf2Y+kNrh2rfNbCy817t4Y2z4TjPcAgR92e6BKIf6c8YXN7nZbpH
f26/dTjL7UIZiNzXnw/utwPjnzfq8bS39aMtj7754qSOZ6Y/A3iD/ixB+jMk
g6j+XC2c3G2i7M/dfGbmPww78Mnute20/nzbbXeMHP98zTVLZ38+kP7+7Oq1
Hy/nnOgWOttp0YHrpV2GVYJscX9/f3ZvPqY/u459YA/vekvzY/usuiNTdt4e
qnGXeS6sqmzfq5wLtVT3PTOYCv0ZEQ3pzxhc3udlOqY/L9WZN+xOqy+pU7S6
Tv0FRZnvYiq7+/PA/Bv1InVaEL2Z79yW/gywP/RnCdKfIRlm6M/PiCH0ye6h
npfN/FAX+mxpXLlypb3d9udbb71t5OzNV191tdqffRyVwcfffNVVb/54efNX
2qHF9/6Kusp2ub6g3bJevdmBuo977723WV4vM/bh2PxX7lV3peE6BuXQ28e1
VuqeVHdf99DVQuVxzbscp0V7Ovb6zepXvfnN3W57TiEcAv0ZEQ3pzxhc3udl
OqY/m1fpc1XZ5rvIorjqYD0iukX5h5r6nvZlRH/uu/6gfrj6F6jueAa2pT8D
TIL+LEH6MyQD/Vksoc+WhrM/v+xlLx85/vmqc1fN3J+1igte4BR7IeL+zPzP
iH7k+oMYXPqzTMf05yn4qbV2f96PvmsI6hfQAYAjQn+WIP0ZkmGG/vy0GEKf
7P0IfbY0rly50t5u+/Mtt7zs6ad3V/2nnnrq3AvPqf3Zx1HZfOzNVy1e/yvH
eiww+JXXLzi9Poi4P9MlEP1If8bg8veMMj2p/mxkZmX4M/UZwBf0ZwnSnyEZ
6M9iCX22NJz9+YEf+99vuul7XvrSm17ykpfecMNLXvziG66/7vprr73uReev
Pb88f801y6uvuvqqc1ede+G5f/amB+bvzwAxQn9GRMOqPFdTcAQ/GDxZeasX
qK/+7IdDxz8DwOzQnyVIf4ZkmKE/PyWG0Cd7P0KfrV7a/vy7f7x+7wc/Osbt
mmp/Dv0MAORCf0ZEQ/ozSpC3eoHa/dkZIgAAJrChP8uQ/gzJQH8WS+iz1Uvb
n6dJfwYYgP6MiIb0Z5Qgb/UCzRn/DAA+oT9LkP4MyTBDf/47MYQ+2fsR+mz1
cnh/Dv0MAORCf0ZEQ/ozSpApoAVKfwYAr9CfJUh/hmQ4qf4MR2HxI5860NDP
AEAu9GdENKQ/owR5qxco/RkAvEJ/liD9GZJhhv4MAABjeOaZZ+jPiGhIf0YJ
8lYv0Jz+DAA+oT9LkP4MyTBbfw49qSoAgGieKaE/I6Ih/RklyPwbAqU/A4BX
6M8SpD9DMnjqz48DAMAkNrF9zCNKIHqV/owS5K8aBTqqP6/Ploua5dmq+6Fb
uO7Wq39YO1bLsqVzu9E4+rN2bNXuVlm9IFvtt3sAOD70Zwk+Tn+GVPDRn0M/
JwCAuInrYx5RAtGrlxWCHwyerLzVC3RMf866ULzK2qa7Plsa/bhYkmXGUnU1
e5P9P9uYi7ojWpXHWfToeskq279wA8CRoT9LkP4MyeCjP1ds9xP6ycXH9qQd
+2pm4gg9yYEsngaFZ6Ahro95RAlErzL+GSXIW71Ax/Vn10BiKyZXC8zo67s/
Ox6/PdqV+8gBYEbozxKkP0My0J9FQX8+NUIXX1mEjr6CiOtjHlEC0av0Z5Qg
b/UCHdOf6/ksjJRrxuTmZyNAG/35oOk3Bvtz/UDqwx/cuwHgYOjPEqQ/QzLQ
n0VBfz41QhdfWYSOvoKI62Me8z8jepX+jBKkPwt0TH+uqTJ03/wb3Y96gJ5p
/LPyoFrlZvwzQGDozxKkP0My0J9FQX8+NUIXX1mEjr6CiOtjHv0Z0av0Z5Qg
/Vmge/TnAmVGCz0m9w5tnqM/90z0zPBnAAHQnyVIf4ZkoD97Z33p/OL8pXGf
n+jPp0bo4iuL0NFXEHF9zCNKIHqV6w+iBHmrF+iY/rx0jnnW6q5y1b/NpncO
DB/9uXhk50577wCAOaE/S5D+DMlwSv15+3FqbAcOtX/686kRuvjKInT0FURc
H/OIEoheZfwzSpC3eoGO6c/K0OaRE2vos2H0zf+8fx62+7Nj3HU9XTXxGUAE
9GcJ0p8hGejPovZPfz41QhdfWYSOvoKI62OeWiSIEohHl/6MEmSqJYGO6c9y
cIx/BgDZ0J8lSH+GZJi9PxezUWiXlOgWtP/yqwy5q3r5dmG7SpN3x62wVva2
bv42vX0Y60B0dj7EpttjsQNj/8XmWXa+/KE6AGUajv5QTX8+NUIXX1mEjr6C
iOtjHv0Z0av0Z5TgKYx/Nhr7DB54wPRnAPAK/VmC9GdIhnn7sz0VcpFtlRBd
3Vm2XOumsu6YFYz+3LewuOmKwTsfQl3TuX87hldX/VCu/WFBfz41QhdfWYSO
voKI62Me/RnRq/RnlKDRn1FCgqY/A4BX6M8SpD9DMszan4vCrKdXfUlTZntC
8c6SvGMFZaEy6LpnBPTOh1CHPI88qnqT3vpMfz49QhdfWYSOvoKI62Me/RnR
q/TnVL0cFafSn52oy9vbfSv3rW9v4qE/O0MEAMAENvRnGdKfIRlOuD8PZOAR
D9HtYXuL/rwHoYuvLEIXX1mEjr6CiOtjHv0Z0at1/Uu0PwdNqrAHWqEdTq9q
oTXq677N9vDGu++xzRm6PfRnyeSMfwaIDfqzBOnPkAzC5t8YmD1js09/Vvpy
NxNG3/wYTnY9hPZQ46s482/QnzVCF19ZhI6+gojrYx79GdGrdf1LsT8H7anh
adunetvAuGt4TXvlY+25e5OvCD5KOQEX9GcAkA79WYL0Z0iG2a8/qF+1b6NO
hbFr8PAe/Vl5nCxrF9bLzOsPTpt/o9m+uMygvX97k65T2xW+hf58aoQuvrII
HX0FEdfHPPozolfbing5rf58xDrqt7t6OwYfTdsf4YPtLM7wK5/+DACxQH+W
IP0ZkmH2/gxD0J9PjdDFVxaho68gIvqYd8Tv0YjoVG2AwQ/m6M8rugx7RIK/
BPs6c6dNVfozAMQC/VmC9GdIBvpzSTcqu2R4amiP0J9PjdDFVxaho68gIvqY
R39G9G3VKhfpjn9O7HkhDnvEEdf0ZwDwCv1ZgvRnSAb6syjoz6dG6OIri9DR
VxARfcyb/18uI56aqXbaVJ8X4rAB+rM60KYZZbM+W7bLlmfrelF9a9P9WK7X
LS4WZlm3abOH5bJbqdhE3VGNqz93EyaurKOqFttLpnzFAoBJ0J8lSH+GZKA/
i4L+fGqELr6yCB19BRHRxzz6M6JvU+20qT4vxGFnnn+j7LddtF1lxW29EBcR
uPiprz8Xwbm5Q11HX7+9wvr2hqM+u/pzu0lxPFZYtvfTt2cA8AT9WYL0Z0gG
f/2ZBL0vpxCf/47+rBO6+MoidPQVREQf85h/A9G3qXbaqGdCRpzszP1Zb8oV
VsftUrOzP5+t1VLc05+V8dLuMcp2f87U0djGYdr76d8zAHiC/ixB+jMkg9f+
XL1TwUhCBeGZCV18ZRG6+MoidPQVREQf8+jPiL5NtdOm+rwQh515/g1Hs7Vj
bzUSeaA/t2OVB/pz1bWXy75GPNSfu6HQyq4Y/AwQGvqzBOnPkAy++zPk+umF
0MVXFqGLryxCR19B5PF8zKM/I/o27fHP6T0vxGHn7s92tJ3Unx1jpJ2Dlvsb
cT6+PzP4GUAG9GcJ0p8hGejPMxCq9MokdPGVRejiK4vQ0VcQeTwf85j/GdG3
qXbaVJ8X4rAzz7/hGjW8//wbzYLszE9/tqaSZvAzgATozxKkP0My0J8BAAQS
y8c8xj8j+jbVTpvq80IcVu71B/XKW4841spwsebieP3Zff1BBj8DiIH+LEH6
MyTDcfvz/HMmAwCkShQf8+jPiL5NtdOm+rwQh525P2/qBN2gjDi2lulL1Wk3
2n2pifrg/lwHbe0Q9DTuXgIAM0F/liD9GZLhiP15AQAARyX4B57d7/y/pX2V
Dn48iOmZaqdN9XkhDjvz/M9ycPVnABAN/VmC9GdIhiP2Z0REPDWZ/xnRt6l2
2lSfF+Kw9GcAiAX6swTpz5AM9GdERJws/RnRt6l22lSfF+Kw88+/IQT6M0B0
0J8lSH+GZKA/IyLiZI35N0jQiEc31U6b6vNCHNZrf3aGCACACWzozzKkP0My
0J8REfEQ6c+IXr2sEPxgeF6IB8r4ZwCIBfqzBOnPkAz0Z0REPET6M6JXU+20
jH/G05T+DACxQH+WIP0ZkoH+jIiIh0h/RvRqqp021eeFOCz9GQBigf4sQfoz
JAP9GRERD5H+jOjVVDttqs8LcVj6MwDEAv1ZgvRnSAb6MyIiHiL9GdGrqXba
VJ8X4rD0ZwCIBfqzBOnPkAz0Z0REPET1ezT9GfHoptppU53XGnHYmfvzcrFY
nq3rH9ZnS+0H5b7yp0W2ajdcZeW91fKObvt9cfZndffTdw0AfqA/S5D+DMlA
f0ZExEOkPyN6NdVOm2pXRxy2/eNypv68zLI2Oqv9ubht3GX8uFxW/flIXdju
z0V8Vnt4RoAGkAX9WYL0Z0gG+jMiIh7iEb9KI6Jtqp021eeFOOzc45+XZ+tV
Vg9sVmJydXN7T72g/HnV3F9scXbmuz9n9pDn8uHOsmYodjc8WjludUm3/qIb
vm1vBQCToD9LkP4MyUB/RkTEQ2T8M6JXU+20qT4vxGED9OeqJ6/U/tzcagN0
vaBcca2UZ2P+jQOCrt2fHWW7fLhmFpC2m+uHpy5R16+fi70VAEyE/ixB+jMk
A/0ZEREPkf6M6NVUO22qzwtx2CD9ebPWBzN3YbYJ0EqQrgcSr72Pf1ZieBO3
jRlCtKmnyzBuL9FmFLEnrFamtAaAPaE/S5D+DMlAf0ZExENk/g1Er6baaVN9
XojDzj7/czdxRT2lhlV2i2Vqmm7nvphz/g374eyHHl5y7AMGAPqzBOnPkAz0
Z0REPETGPyN6NdVOm+rzQhw2zPjngnJoc92alWHB1QjovrQ72/UHHQ9XHLA+
fNla4ujV9lYAMBH6swTpz5AM9GdERDxE+jOiV1PttKk+L8Rhw/XnvtRcLl31
9+eFOVZ6GnZ/3ugjsbVh2O67rSXO8dL2VgAwCfqzBOnPkAz0Z0REnCyTbyD6
NtVOm+rzQhx25vk35ODszwAgGfqzBOnPkAz0Z0REnOwRx3EhotNUO+1lheAH
gzibM49/lgP9GSA66M8SpD9DMtCfERFxsvRnRN+m2mlT7eqIw9KfASAW6M8S
pD9DMtCfERFxsvRnRN+m2mlTfV6Iw3rtz84QAQAwgQ39WYb0Z0gG+jMiIk6W
/ozo21Q7barPC3FYxj8DQCzQnyVIf4ZkoD8jIuJk6c+Ivk2106b6vBCHpT8D
QCzQnyVIf4ZkoD8jIuJk6c+Ivk2106Y6rzXisPRnAIgF+rME6c+QDPRnRESc
LP0Z0bepdtpUuzrisPRnAIgF+rME6c+QDPRnREScLP0Z0bf0Z8SUDNCfV9mi
JFvN9x3Thv4MEB30ZwnSnyEZ6M+IiDjZ+nt0Y/DjQUzPVDttqs8Lcdgj/rk5
rj+vssXybL3ZrM+W5f9D4ejP20Na1DSH1rTyLpabS5SN6sX2ktmeFEDa0J8l
SH+GZKA/IyLiZBn/jOjbVDttqs8Lcdi5xz8XcVZEkHX051XWHFkVyZVjbar5
9v/VEufzaNYaWgIAk6E/S5D+DMlAf0ZExMnSnxF9m2qnTfV5IQ47c3/O1IHB
VeJdZtlSGyncjR/2mW4H59+oBme3sXnThGdliT1+207SYmI7QBrQnyVIf4Zk
oD8jIuJk6c+Ivk2106b6vBCHDTD+ucq21Y2i0KpzXVSzV7SDjj3G26H+XB+k
Oni5r0h3MPgZwDf0ZwnSnyEZ6M+IiDhZ5n9G9G2qnTbV54U47NzzP9v9uUu0
Va+tJlj2Pmy4vz8r2Vibylkf/2z0ZwY/A/iH/ixB+jMkA/0ZEREnS39G9G2q
nTbV54U4bPjxz2Z/bm/7rdA9/blnzHI3Ito9/waDnwFmgP4sQfozJAP9GRER
J8v8G4i+TbXTXlYIfjCIsymoPzcX/cu6wcceC66jP6uTgfTc4b7+IIOfAWaB
/ixB+jMkA/0ZEREnS39G9C39GTElw/dnbYKLTTPy2fflBx39WTuW6tGbY9FH
OqtHu3Fl696QDQCHQH+WIP0ZkoH+jIiIk6U/I/o21U6baldHHHbu+Z8N/I5x
HqJn/g0AkAv9WYL0Z0gG+jMiIk6W+Z8RfZtqp031eSEOO/f4ZwP6MwCMhv4s
QfozJAP9eX7/4dvfRkRMw8Vvlm4pbwQ/HpRg8D9nEzPVTpvq80IcNnB/Dgf9
GSA66M8SpD9DMtCf9zX493pERDnSn3HA4H9kp2GqnTbV54U4rNf+7AwRAAAT
2NCfZUh/hmSgP+80+Pd3RESx0p9xvMH/QI/UVDttqvNaIw7L+GcAiAX6swTp
z5AM9Oc+g39PR0SUL/0Z9zX4n+/RmWqnTfV5IQ5LfwaAWKA/S5D+DMlAf3Ya
/Os5ImIU0p9xmsH/oI/ItMc/p/e8EIelPwNALNCfJUh/hmSgPwf/Do4z+61/
+AdEPJaLj5ZuKW8EP54Bg7/5oNPgHwPkm2qnTfV5IQ5LfwaAWKA/S5D+DMlw
yv35uN+gg6cVRMT5jag/4zxSoY9uqp021eeFOCz9GQBigf4sQfozJMPJ9mfy
MiLi4dKfcVgS9OGm2mlTfV6Iw9b9ufGQXY3tz6ts0ZKtNuuz5UJbUKAsXJ6t
my3LpcrPhzDQn4sD1B/FWrLK2h+7Q20Xtc+wfjYAcBTozxKkP0MynGZ/Jjvj
cf3mt76FeJouPqp5lH0G/x2NR5cKfYipdtpUnxfisDP35zLWdlV2lWWr7SK1
5Ra3V5nactvVi3uzbHmcAN3Xn4vH1h/EWFL35vpH5eibo97+vzrkYk0KNMDx
oD9LkP4MyUB/pjwPGDxtIaJwffTnEzf4O79XqdATTLXTpvq8EIedef6NM7se
q/25TrdtwXWsqLbpQ3D25/pYlEOyl+jHbK+qHPza8XQBYDL0ZwnSnyEZTq0/
H5idg3cJxNl87pvfxMT08euki8/FFBwkaCykQh/XVDttqs8LcdiZ+7NjQLA2
/0ada+sJLLR1m5h7pABt92c7Kjszs/VjO9tGtUiN5+6QDgDToD9LkP4MyXA6
/fmQ8hz8u3wog+cyRJTv4jdKt5Q3gh9P7AZ/5z+uB1bo4B8eJJhqp031eSHu
9FhTcIzqz3Y6dsy/0VCV3XYyiy5OHyFA2/1Zm4e6yMlZZi5xHGeTmNuZRejP
AL6gP0uQ/gzJcAr9eXJ5pspiQL/x3HOIUbj4SOmW8sY74bR5RGFniGYg9Bgv
KwQ/GJ4X4uHO2Z8d6dgcS2wE23qJfpXCIwRo5/wbrkNyLWl/1Ja3E4Qw/waA
F+jPEqQ/QzIk35+nxWeyMwkUEUda9+fG0PkTpPCIi1+axGVIF8Y/4wmqzr/h
uz/vuP5gNbR5u0S75mA1/7K22eEB+jj9uRyiXR9Yc4xcfxDAE/RnCdKfIRnS
7s/HGvZMqj1Nv/6NbyDiThcfLt3S3lB4xzveMfCjcZe98vD66o/vfOc7+9Y0
7hpe0175WHvmGLY88sgj1Q0SNKgE/8SIOKdz9ueNMZI5W1k/G6sYEzFXHCFA
T+7P6sHpI7PVjK4+HQA4DvRnCdKfIRkS7s+HD3uOqzD7yEpf+/rXUb5//7Wv
IR7XvX4FLj5cuqW88YswF+/YB69DncdgDIRuK3Rfqa6ys7qkCpV96xt3HWtN
e2WO4ejHQH/GU3Pm/iyEof4MACKhP0uQ/gzJcJr9ea/yfMpJNngEw4A++/d/
j2MM/koFd/Gh0i3ljeDHE7vB3/kPt/0T007fh0zH4WfgLQSmrdnBPzcizuac
8z/Lgf4MEB30ZwnSnyEZUu3P4+NzX3k2RhSTaocN3gARMZSLX9cMfjwyDf4u
7cPxIXpr9U91qj9hjT95x1+UMPinCzyu9Gc8TenPABAF9GcJ0p8hGU6tPw/E
574xzwEjc/BgEtZnnn0WEeW7uKIZ/HgON/i7X1iPnqbHVGgS9GlKf8bT1N/8
G84QAQAwgQ39WYb0Z0iGJPvz+PjsnNvZLs9RNOHgxSasTz/zDCIGcXGldEt5
I/jx9Bn8beroBv9zZ2e+dlbo9k9bEjSqE3EEPxjE2WT+ZwCIAvqzBOnPkAyn
05+NL7bOCwsOlGf5pTd42wnrU08/jYhBXHywdEt5I/jx9Bn8beroBv9zZ7iK
O0P0cIUmQZ+ajH/G07Quz02Cnrwf+jMAeIX+LEH6MyRDYv15zMhn57Bne8IN
uzwLL73B287R/bunnsKju/3djqEM/up7cvGB0i3ljeDH02fw97SjG/zPneEq
boTogek4tpKgT1P6M56m9GcAiAL6swTpz5AMKfXnnfHZvsLg8LBnozwLL73B
285Iv5rnOMavfPWriMfV06/Vxa+WbilvBP+9c7ix/D1F8D93Bqr4+AptD4Qe
2Z9J0AlIf8bTlP4MAFFAf5Yg/RmSIZn+PBCfnRcZ7IvPxrDn8eV5fDHwlCyC
F5uRBk9wYf3yV76CKN+9flUvfrW06M/FjeC/yw43+PtkFJ28L5UbY7PVCm1M
x+G8KGElQ6BPRPoznqb0ZwCIAvqzBOnPkAwJ92d1zPNe8dmebaPNy5LzL1k1
oE9++cuIJ+vi/y3dUt7oWy3471Mfnngn35mm7QRtDIQeSNDqQGgSdKrSn/E0
nbM/Lxcq2Wp9tnTcLn+sNlAWLs/Wg98jV9muNVQc/dnxWKvMOB5riXbU9vNQ
NwWAw6A/S5D+DMmQRn/eKz63/XlnfLbL88z5N3haSTLA/u2TT56yT/zt32Io
g7/6nlysSreUNw7fYfB3CR8Gf5eeOYCrFboaDm0PhB5O0OqM0PTnVKU/42k6
a3+2E/H6rF7Y3tiUlbe4Xf+vXtQfcuvke2B/7h6hetxir/WS5kC2/6+WKPep
OzAPwV4CAJOhP0uQ/gzJkGR/tuOzPfh5OD73leeZs3DwYBI2agWvhV964omj
+8UvfQlRvnv9ql68v3RLecPHb5yjGDzUh83vM4duZ4UeTtDqRNDjE3TwTyB4
iPRnPE3r/tw4eT/H7M916G1z7wi0zXczOP9GtS/10a3jsR/OTtLOSA0AU6E/
S5D+DMmQXn82rja4V3yuvhqr8zk7y3PUUXdr2AQUPKyN9wtf/CKO8fNf+MIp
G/z8B3fxvi8W8fl9X6zsWy3472hP+f3oBh9+f5TQbVRoe2rofRP0VvpzetKf
8TQNOf/Gxt2fi3DbjDceO4XFEftzvSt18HJfke5g8DOAb+jPEqQ/QzIk1p/V
KxbZ/dmY9lmNz+1FBtv43A57Nsrz4eNyk+y6wQtY8Ah5dD/3+c8jHldPv1YX
7/1C8V31vV+onPO3SfB3niQ7+VFCd1uhjYHQaoLe/sm77yho50Do4B9CcLKX
FYIfDOJsCpp/oy3TdsndWaGP1p+VbGxOSd3fnxn8DOAf+rME6c+QDCn15+H4
bAx+rr7tqhNuDMTndtDyUQJyRAX4xLPq43/zNyjfv378cR8Gf16xuHjP5wq3
VDfe87m/+dx8SsjvAVO5zKxtVOh2ILSdoNvpOJwJ2jkE2nlFwuAfQnCy9Gc8
TQX15/+fvTdtkuO48zTzY8y8ne5Zs9190dPbU9QWbL/Bzuvd7tHBFEUm1aLE
frlja/1CI9sGp9XDLqibbS1KIsX7QIIELxR4HxIl3kUQN5CoKhRQBVQVUKgi
Dl7SMNYzPcLT48yIzIgMD/fnsZ9JWZERkZF1hKc//OPvWQJ5VC+OcvxzSs3y
sCI6uf8Gxc8AUwD/bELwz2AN1vhnXT7nKX5OXGpQyWfVc+Py1tbq2tqRo0ff
e//919944+VXXknLSy+/3JQcfPFFlzN/8CAhpKz82c9DKeWctd8l6s2LL72U
M7WPJhlj4ptvvSXGzaPHjokxVIykIxW0SM4uHPpYj39ueui/QdyMkf2fg6eU
ch6plyf3z6rrR/oTyesPUvwMMBXwzyYE/wzWYId/jshn3T8nFj9HGj4nymfZ
bePEyZNv/eY3vV5vY3NTTI3r/nEBAAA0ADFiinFTjJ5vvvXW8RMnZF9oZaHT
qqBF8pdAKwVd+4cQMnbwz8TN1Fn/PGxw0ZlPEMgZLTlS98upfeP+OdRsQ76e
3366Fa50jrxOXFunimwAmAT8swnBP4M1WOCfM+RzpPg5Ip9V542IfJbdnsVk
+aOFhSNHjohJc90/JQAAgEZy5coV+W+I9HYcSkGrRtByUFbtoPMraEqgGx38
M3Ez0/TP5pDSfwMAzAX/bELwz2ANTffPcfmcXfwsFxyMt30WE2HVc0NVPh8+
ckT80dX9IwIAAGgwYiQV4+mx48cTq6B1Ba0vR0gJtAvBPxM3M83+GxOjyo9z
1UVngH8GaBz4ZxOCfwZraLR/jrd9TvTPEfkc77yhrzYo5fP51dV33n2XymcA
AIDJEePp7995R4ytEQUtorpwZJdAZ/hnkdo/kJDxwvqDxM1Q/wwAjQD/bELw
z2ANzfXP8p/c5ix+lvI5Uvyc1nbj0uXLh48cOd2jhxgAAEA5nDp9WoytYoRN
q4LWFbQcsqWCpgTa4uCfiZupzj8niggAgDHw8M9mBP8M1tBQ/5wmnxOLn3X5
rIqfVdsNJZ+lfxZT481Ll959772LFy/W/cMBAACwBDGqvvf++2KE1RtBJypo
vQRahhJoW0P/DeJmqH8GgEaAfzYh+Gewhib6Zymfs4ufpX9Waw5G/LOSz8o/
q8pnMTXe2Nx87fXXxVS47h8OAACAJYhR9Y033xQjrFTQYsyN+OeIglYl0KoR
R7Z/pgS6icE/EzeDfwaARoB/NiH4Z7CGxvlnJZ9HNt9QbZ/1zs9622cpn/W2
G1I+r29svPTyy3X/ZAAAAKxCjK1ihNUVtBh/4yXQIon+eaSCrv0jCikaaZ6l
gq79YgiZWvDPANAI8M8mBP8M1tAs/6zL5wz/HJfPqvOzLp9FIm2fxYxYTI0v
rq/jnwEAAMrlxZdeEiOsGGd1/yyroHOWQOtdOCiBtiD4Z+Jm8M8A0AjwzyYE
/wzW0CD/HJHPcf8cafsc98+R4ueIfJaVz2JqfOHiRTFHrvsnAwAAYBz/7k/+
9PU33ohvFxv/5E//ffaxYmwVI2y2glYl0Dc++yzRPysFnbgGRO2fVUih4J+J
m8E/A0AjwD+bEPwzWAP+eRz/PN9p+XTmU/fYtadX/OfR27NrvAPzXtgErzvh
tenI6yzpZA2mxG8pAMBUeP2NN/7Nv/23EQWduDEO/plEgn8mbmaa/nm21YrP
Dnpzw82zc73oJrXncKO/lzbZKDjXyPLP8x11+qxXVBu1Lf5VxK5KezvqRABQ
FPyzCcE/gzXgnwv7574zVJ9t9uxJ/uxVyD+PK6tHX1j2mfO8bknXFj1n8c+s
1VLF25zm+QEApkfENueUzx7+mcSCfyZuxvfPQcY+Ty7/rHvcweO+mh062f7H
8v5XYmt0T21TcKz4f/kZvn+Sgp/mE/2z74mHEjz6itprBsx3NMvc3ynhqob7
DE8EAEXBP5sQ/DNYQ1P880j5nO2fVfNn6Z/lyoPKP+srD4p58dqFCwdffDH1
W5ZLJdbhnxNOY6x/Nk3G4p8BAAqgnHN++SwQY6sYYS9cvKhWIdT9s1yFUIzR
kRbQkSUIlYJO9M/yE0LtH1pIzuCfiZuZav1zSDV35uM+Vkpc3T/7e2qboqI3
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
mTgY+j8DgCHgn00I/hmsAf9cjX/uK2DZCFo+SvbPraBZdLcdGOnS6p/7J14Q
59WNM/7ZQjz8M/4ZHAD/jH92M/hn4mCofwYAQ8A/mxD8M1gD/rkS/5xc7Vxk
S0mET4l/thAP/4x/Bgdw2T+LcVzcx/DPbgb/TBwM/hkADAH/bELwz2AN+OfJ
/XOCNcY/w7Tw8M/4Z3AA/DP+2c3gn4mDwT8DgCHgn00I/hmsAf88uX8eNNLY
LRtp9FtetPzmGqH+GwP3K03wQrzbRqn+WXtteTHqGfyzhXj4Z/wzOIDj/lmM
5j8YgH92LXs1ar8YQqYT/DMAGAL+2YTgn8Ea8M+T++cdbbHBlmrpPFx/0BfA
an3BdjvFP+90B7tIRTyJKx70fZavxfqDtuPhn/HP4AB2+Of7/p//9B/+/M9b
rf/7l73efX/pj5p/8V/flv750W8H4+juD/v+eeG/3fSNb9wkN33jp0c++0yM
7P/n/+Lv87/+3X34ZxeCfyYOBv8MAIaAfzYh+Gewhkb7ZymfI/75s88/l/75
2vXr0j/LAqor29tiPnvp8uXNS5fWNzYurq+vXbgg5rwr584tnz27tLzcO3Pm
dK934uTJ4ydOFPXPAHXh4Z/xz+AA1vjn1v/1CzHOnv7VX7b+8j4x8p5dWfnN
j//iWw+vrT3yrda3HxOjsxijP/i7m27ee+XKR3fd9I3/9nG//vmTv//GN/7+
8I0bz9zSuuWZOwY8+nf/8396YlgCHfHP1Slo/POUQ/8N4mDwzwBgCPhnE4J/
BmvAP+OfodF4+Gf8MziANf75P/y/L4tx9tW//d9aGn/xX3/3+5/8R33LzO4P
+/65vU/233jqlr5/PvIP/7u+j14CjX+2Nfhn4mDwzwBgCPhnE4J/BmvAP+Of
odF4+Gf8MziAZf759K/+8s//9rWlQf2zGIXFWLz2yLf+4//3rqx/FiO1GK/j
/vnGM7f8m//jm3cE6C2g8c+2Bv9MHAz+GQAMAf9sQvDPYA34Z2v984Kg7muA
6vHwz/hncADb/HOv96ug/7Og33/jwgXV/1ng99+I+Get/7OA/hsuBP9MHIzv
n4Nk7LkT88+Fbt0AABl4+Gczgn8Ga8A/l+CfF7RlA9XXM7trtL+D9QdnZgar
IdZ3FTANPPwz/hkcQPuLaDXXP4uxVQyy0j+LMXdJr3++cEEMzaH65+1tOXyL
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
hzZRAt0UPPwz/hkcAP9sQv/nWnpHE/wzcTD4ZwAwAfyzCcE/gzUY6J9HyueI
f/7yq6+kfP78iy90/3z12jUR8d62d3aubG9vXbly6fLlzUuX1jc2pH8+v7p6
7vz55bNnF5eWlH8+dvz40WPHnnrqqZHT7Zh/9tchHBY2+8XOC/o+oZrjKv1z
2jPppdmjjwUD8fDP+GdwADv8sxhbv/nNbz724f2Pf3T/Ex8/0PfPRx5+6tgj
+0889szJx5873ffPIvPL++bPPhX1z+vPSwWd5p+HCjrTP9eloPHPYwf/TBwM
/hkATAD/bELwz2AN+OcS/XOol7Lvn9tBcwvZ+XnQwbnb73ARfJVhlbXD5QEF
/HPoCb/b9PBh5pYF1aUaGoCHf8Y/gwPgn/HPzgb/TBzM2P2fTabeD5kAMAb4
ZxOCfwZrwD+X6Z8Vw4pof/3B/sJ+g77PQasL1Qc6yyrLWun+IoPtkf45vP7g
Qnf3br2nxkKwEOKMb7RzbYEG4OGf8c/gAPhn/LOzwT8TB0P9MwCYAP7ZhOCf
wRrwzyX4Z4D68PDP+GdwAPwz/tnZ4J+Jg8E/A4AJ4J9NCP4ZrAH/jH+GRuPh
n/HP4ADq97kl/yqqp9B9A/+Mf64u+GfiYPDPAGAC+GcTgn8Ga8A/2+efW//l
RHWp+81BFA//jH8GB2gFeE2uf77ttttc9s8Rap/ONCV7NWq/GEKmE/o/A4AJ
4J9NCP4ZrKGh/lnJ57h/vvHZZ3H/vHXlivTPG5ub6xsbFy5elP555dw56Z97
Z86cPHVK+ucjR4/u27dv5HQb/wwm4OGf0/0zgE0k/qVUR6H7Rk7/vOfxf3j4
3V8++sF90j8/eehB3z8f9/3z82f2hvzz+b6CfnktyT9fmlcKuhH+mXLosUP9
M3Ew+GcAMAH8swnBP4M14J/L8c/BSoGtmZnQun914Lvin12e9652dHusbdn1
xpfhX4Thnp1jXu+NpcSj8M8G4pnmn+c7gS3rzMe3zs710g+NGzZp3ah/BsA/
45+dDf6ZOBj6bwCACeCfTQj+GawB/1yGf+62WzO7FwYP+yK6Xa+Bbv2XpT2b
8servHF8S8hL946tDR97yj8nHFXrO4MEPKP8c29uNtDOiQ+1jQngnwHSwD/j
n50N/pk4GPwzAJgA/tmE4J/BGvDPJfjnhd0zgX42gUAsr0XrnxO2yILnL/f8
TGnqL+ePfRmqfw4fVfebgyieUf5ZZ+ia5ztKOmcKaPwzQBr4Z/yzs8E/EweD
fwYAE8A/mxD8M1gD/rmM+udB0fPu7oJy0LqRlo/7/9tut/tdOmZ2d3f3H8y0
u3KXbrvUkuli/vlnl3ubl3fJx09c7R1b2/UG/rlJeKb651DR87DtxnwnvQcH
/hkgDfwz/tnZsP4gcTD4ZwAwAfyzCcE/gzXgn0vq/yyV8sAuL6T4Z/VUfJ9S
KeSfd73x5fwTwbOb/Wfxz83CM9A/99Wz1us5pJwL+Ge16hr+GQD/bIF/vjNM
7dOZpoT6Z+Jg8M8AYAL4ZxOCfwZrMM0/55HPun/+8quvpH/+/IsvlH++fuPG
tevXr1679unVq+K9Xdne3rpy5fLWlu6fV9fWzp0/v3Lu3NLy8pnFxdO93slT
p06cPHn02LHDR44U9s8BC7IVdHL982BL/EHZFPHPvnNuadoZ/9wsPAP9s0+g
movUP+t41D8DBFjinx8b+Of3f/XYh/c/sfDrJw892D380L6jvn9+9tQT0j8f
WOr754MrT0f980BBvz5Q0Hn8c5qCpua5WcE/EweDfwYAE8A/mxD8M1gD/nmp
VP/sN9NoiH/WVLNaatBHU9D4Z6PxzPXPqu8z/Z8BJgX/jH92Nvhn4mDwzwBg
AvhnE4J/BmvAPy9N7J9l92dpkv3654GFlpvEFlP9c3+1wWDlwUQpjX9uAJ5R
/jm51UZfOg8fpepn/DNAKvhn/LOzwT8TBzO2fy506wYAyMDDP5sR/DNYA/55
qYT6575j9lsGBIsK9qW0/Lo90j/XtP7gz9b2vLEWkc/458bhGeWfVe9nvf9z
n/lOfFsM/DNAGvhn/LOzwT8TB+P75yBpu+1Q/wwAVYJ/NiH4Z7AG/PNSyf03
6ieulEtM3W8OoniG+edJwD8DpIF/xj87G/wzcTD03wAAE8A/mxD8M1gD/nkJ
/4x/bjIe/hn/DA6Af26uf75To+iHojtj1D4Jmn7wz8TB4J8BwATwzyYE/wzW
0ET//Ic//jHNP9/47DOZiH++vLUlsnnpkvTPaxcuSP98dmVlcWlJ+efjJ05Y
4J/BKTz8M/4ZHMAa//zQO7+I++enjz+6/8RjIf+8vM/3z+f3v7z27CsXnk3w
z4GCfmsrrKBH+ecpK+jxpLG0zVRQf41/Jk4G/wwAJoB/NiH4Z7AG/LPT/nlB
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
7XbcPx9YGu2f37w0r/tnkWn650jn54hhjqxFiH+eJPhn4lrwz4QQQmTwz2AN
+Gf8MzQazyH/PN9pDZid69Xy+r252VZnXv9qiNquNutXmbixDIJviXYByVeb
vKf2HmLHl0LkIpK+D8NrSLyw0q8r+xpGXW3y+7KTQveN6vxzp9O5/fbbvx/w
1wN+MOCOO+6oyD/Hq5cz5PPXo/xz5DEZI/hn4lrwz4QQQmTwz2AN+Gf8MzQa
zxX/PDR+9bg/398OX1hsiF/FcKN4FGjLxI0loH0jot+TyNUm76ldTX9r+Vpf
Clx1XUnfh/6FDn+sw43+o9KvK+UaEr4PGT+1yPuylUL3jUn883e+8519Rx7O
8M9iHN/eGXxSuXpVDvFyuK/CP8dF8Z0pxPeJfKrBOZcY1h8krgX/TAghRAb/
DNaAf8Y/Q6PxXPHPmu6duoAe2NzZuXn9dcVFxMXoCCddIWGtHLvapD3D11X+
Vfa/Q53O8CKSXiH0XQw8b3RjideVdLbk70P660bfl7UUum/Y4Z/H1sWJRpqe
GyWG+mfiWvDPhBBCZPDPYA34Z/wzNBrPEf+cKCqnfw2hYt5Y943BRc5FuoQk
bqz00lI3ZWwu/Vsqf2DhwuuUb07sx1pZ/fPon0XIgSftGXtf9lLovuGyf048
Cv9cbvDPxLXgnwkhhMjgn8Ea8M/4Z2g0niP+OeRHDfDPITEaWNRBXwZdt/a8
lI0lX1WSTY0r0rQ9K+i+oX9HtMYf8e9DuP/G8Cqq6fU94mehfR9S9kx4X/ZS
6L7RaP+c1lVDJuPZtNYceuNoFHQpwT8T1+L75yC1Xw8hhJC6gn8GazDcP+vy
OY9/vn7jhpiZXr12TUS8KzFj3bpy5fLW1qXLlzc2Ny+ur1+4eHF1be3c+fNn
V1akf+6dOSPmv8dPnDh67JiYEX986BD+GRqE54h/Nq7+OYTfrCFXN4mKrjyx
SXHi1Ub27Jvekq9p+Jaj9c8J34dglb9BxxAld7Xe2SWK3qyfRfj7MOJHiX+O
UtQ/Hzl6VPnnm2++Oe6fRfr++exT0j+LiDFdDu5V+OeMDye6SY6sJ5i9QCH+
ucTgn4lrof6ZEEKIDP4ZrAH/PKF/BqgdJ/xzrf2fvVGvO2wanNhNYirmPNqw
ePTVhqt8yyMwykMG73nk90FrvVzVdyzlGhK+Dwl7prwvayl036jLPyt+GPCj
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
hx++8uqrTz311HvvvXfq1CkxIa50kg4AAGAHYsQU46YYPcUYKkZSMZ7K4ueI
f1bNN6R/lgO0XHxQjNpi7K6u/lkpaPwzcSGtcP1z7ddDCCGEkDzBP4M12Oef
ZQuOq9eufXr1aqJ/jixBKP1zpAXHoU8+Wfj4448WFsSU+e3f/e7giy/uf+aZ
xx9//NFHH3344YcfSuLB3DxQDb+ugPsq4FfN4RcN4V6AfNT7i/rLAX/2k1AS
qegvuoobWn7y33grGiPyD1L5SRwNxSgpxsonn3xSjJsvvvSSGEPFSCrGUzGq
quYbYrQVY64YfBMXH5T+WS4+mOifX09ff3D6/lm1dMY/E5ODfyaEEEKaGPwz
WIMd/vmzzz/P8M8iYg6bvQShasGht4AW8+UPP/pITJzfe//9d959V0yif/v2
27/57W/ffOuteN54882cee3113Pm1ddey59XXn01Z15+5ZWceenll3Pm4Isv
5sz8wYNV5MD8fOl54cCBnHn+hRdy5rnnny89zz73XL155tln7Uu939Iqfk8K
Jf+vdP4/E/ln1bp7EMHgwYR/pBXdT/Lf0PLfJPPfeAvd+fMn/9CTfzhLHA3F
KCnGyt/9/vdi3BSjpxhDxUgqxlMxqsriZ9n8Wfpn2Xwjvvig8s9yEB/pn9/a
GuGf4+sPluifI+ZZX3+w9jkLISp0vSCEEEIaF/wzWEOj/bNU0Bn+WbyxDP98
fnVV+ufEFhyyBFr65/c/+EDMo8Vs+u3f/U7MrN/6zW/iSZyGJ+b1N97Imfy6
QCS/f26KqS6Uek11FU47f2p3lQ1KUwxwFfq3UKr7E8jjn6sQxYVShVXOf+Ot
QimL5B968g9niaOhGCXFWPn7d9559733xOipip/FqCqLn49piw+KITjS/Dni
n2X9sxjNh/55IJ9f11tw5PPP+qeLiI4e+RElvpt+eKJ/xkIT06LXP+OfCSGE
kEYE/wzWYId/Tuu/ofxz9hKEiS049BJoMYN+7/33xVRaTKhlCXQ8idPwxOQv
LcuvCwrJ6nprqvPnxZdeyp+mOO2KbGFTkl+r1p7av1f1pooKZPln1frHUBL/
9Ar97edPFbepeq1y/tFEJP8glT+Jo6EYJaV8FuOmGD3jxc+y+Ua8+XPi4oNy
EE/zz4Xqn+OfMXJ+PlGGOadzTrTQtU9eCME/E0IIIY0L/hmsoen+WSTun0WU
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
XH31NQ8++OBv/KffCF908/75e69/sx7u+pm7Kl+vfUejE1/5R2ee+hvHw4cJ
IYQQQgghhBBCCDkkoX8mGUzM/vllL7t2svyZr/e86eNfueFtH3/lB7/xtQdH
n3jB5c+P7J9f+pKXubN9w2dOOT911U9fecVVL3j+FeGLbtI/2/JZ0nXtO5pM
hH7zJweko/YOE0IIIYQQQgghhBBySEL/TDKYmP3zi1/0kqH5T33mq//5bR9/
5Vs/+tpvTj/x8MQTz3vu8yL752uueZH2z447/JPP+8nwRcdf/1nK5yb98w13
HNfZ0fYwIYQQQgghhBBCCCGHJKn3z/fcc89/JybuDun4o5y7xOyfX/jCq08N
/+V/++Tv3n/swaGllYcGpx6ZfOLS5zwnsn/+6Z96obenzssuvTR80U36566r
Xl9Z+Tl2jfyyNz2kJ7aHCSGEEEIIIYQQQgg5JKF/zlron5dj989XXXnVmdG/
eusnfveb00988cyJP773uiNf/9CznvHMyP75yiuudGfb1dX15je/+d8dqfTP
z37ms8IX3bx/DnfI4UU5NE/79ft0drQ93PHwJCKEEEIIIYQQQggh8XOQDWTq
/TMh4cTsn1/w/BecHfvw//jKu/7n0OJnv3rPt3s+0Dv98adfcklk//z8y5/v
zX9+xtOfHr7oZv1zUD7bZZyblM/yU+2c7eGOh/6ZEEIIIYQQQgghhMQP/TM5
5GnSP//l6Se+NVlbf+PqF1126WWXPvs5z37ms575E8/4iUuefslTn3rZZc91
P3Kncae05/m8y5572XMufc6znv2sZzzzGU//iadfcsnTnvLU8EXHWf+5uhAH
+xMkhBBCCCGEEEIIIaRp6J9JBtOkf/5y/9Zne3Yr6Ejup+407pT7uOj4+x8k
hBBCCCGEEEIIIYQ0D/0zyWCa9M8LS6Uv92/95enK8hqNuJ+607hTpn07CCGE
EEIIIYQQQgg51KF/JhlMk/457atGCCGEEEIIIYQQQgiJG/pnksHQPxNCCCGE
EEIIIYQQUoDQP5MMhv6ZEEIIIYQQQgghhJACpLP9MyGdCv0zIYQQQgghhBBC
CCF5Twf7Z6CzlkP98xghhBBCCCGEEEIIISRX6Uj/nHaPTooZ2z+nPSObEEII
IYQQQgghhBCyn9A/E0IIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgjJSNZIemnnIeDhIyS9F05CCCGEEEIIIYQQEit0OGllzXTIB/m7hBQj
DH5CCCGEEEIIIYSQ7IcOJ63QPxPSThj8hBBCCCGEEEIIIdkPHU5aoX8mpJ0w
+AkhhBBCCCGEEEKyHzqctJJI/3zkhq6uG47UfVvJ5bcdb3ia+mOO33Z5V12C
4yPPp/7kdecYvohwQqfxLyTqQuOcpnq19KiGVz7iR7Uj9rrH9LSho4N7JOKi
SMfDaxchhBBCCCGEEEJI9kOHk1Y63T8HxecNN9yglWjlCDl85IZqIxo6TcQx
u3E/C37tyA3++WiOHNmtreU0zc6w4VWNOOuIC406jRzh/SRohndvccMr7//6
8dtuO+L9qMnNqZzm8svD5xlddUffStJGeO0ihBBCCCGEEEIIyX7ocNJKMutv
aG2r7bF/2J6m8THmyCN1lXaD/tQ7h8gzbPIrR24I97j+hYZOY67NkfpK/Ybb
qj9qfCc0/PWo0za6fy6/4YbL/ZnSlbKa/vkgwmsXIYQQQgghhBBCSPZDh5NW
st4/1+reut9t1Cv7x7fYP1dr292VLyIuNHQac6r6ttodPB6jf4789ejr37B/
vu2413zLMbXLqVueRNf26LJTxc331UI7+LbBwibEhNcuQgghhBBCCCGEkOyH
DietJN0/m1WL65ZDjtc/75a1zfvnak/ql6St98/1i2xE98/hhThqNa0/V9pW
y9F3wnLUr+9eYIPFQCJOFWr8o1YFqZb59owjf2puIb3zXuG1ixBCCCGEEEII
IST7ocNJK4n3z7v1qrdMRIz+WWYR1w7Gmv/sr8Dc6vznI/boBvOf604TXkAj
sjRvcCc0Wn8jqqZu2j+Hlsk2x/s7coycGt3wpyzV0Ty8dhFCCCGEEEIIIYRk
P3Q4aeUA+ucGx+7dP5v6Oeb6z3teRNPfCHfL4Qvdu6Ourc6haTqJOapXb3T7
mvbP8ltH9Fdt/9x4YnXzn+pJWH+jcXjtIoQQQgghhBBCCMl+6HDSysH1z36v
uWf/XF/D7jaloZUljhwxjXAb85/rutxaE9zoQvVndStYhKrb8A4NvX44/OsN
r3Xz/lmmf4eviz8pPLT+RpOfNrwdRMNrFyGEEEIIIYQQQkj2Q4eTVpLvn3WH
d3uu9rzX7vZq52TmK/tLTIR+oaX+2ZxV6OqH1xOpWywj8iYet7ORw+frrR5d
/aG3JEbTFUuW6+tiO2G8wSIbtbU5dq+L/1O/0I66YWQ3vHYRQgghhBBCCCGE
ZD90OGklmf6ZkMMSBj8hhBBCCCGEEEJI9kOHk1bonwlpJwx+QgghhBBCCCGE
kOyHDiet0D8T0k4Y/IQQQgghhBBCCCHZDx1OWqF/JqSdMPgJIYQQQgghhBBC
sp81kl7aeQh4+AgZHR0dr2VsbMx9nZiYkCPlqzvSHSPHywE5mfupHBgL4n6k
X+WnemI5xjssZy6n0WP0PPVyR0ZGwr8uJ5PLkhPoNdHT6znLifW2uAOTk5N6
nvaG27Nyh+2Feuepv6IX4c5TbrJcsdFa5Lfcuenvhm+FHO/OwTtg72R7bnpD
5Nf10fGulb0JcgK9OL1D5Fs5KznSO4H3ONpLtOes9553u9wBuTn2rpP7yg48
uYv0cbEPqL1Feh10qOjDqvebvRV65nrz9RgdP4z/ccY/47/+5jD+Gf+Mf8b/
OOOf8c/4Z/wz/hn/jP/Ojf+RIPa+HR4elvvNG9563fRbF/e77vTyVb7VaytH
2hPrfSUn08PydWhoaKQWOU93AjlSvtqLsBftfqrXQU6jX+WnemI5Xr7V85Ej
9XqOjI4MDbtzHBoeGXaHHXdgdGx0cGjQHiOHKycbHR4dHx0aHR4YHnRfneGx
kcGxof6RAfd1aHx4aGJkcHx4cHyob2ygf3yw8nViqG98oHesf2B6uHdioHdy
sHdyoGeqonuyr3uq/9xE9/mp3orp3tOT3eeme87O9Jye7j413X1y5sKp2e5T
890n5i4cnzvvHJs9V/kaeGzmzImFC+7rsfnzj82edV8fnT797YD79ujcuW9N
n3xs7uyjs2ecb8+c+tbMqW/PnnZHVg8Exzw6d0YOnN8eOrs5cCZwar3v9Ebf
6c3+k2u9zumN/sqRG30n13tPrPW4r+5Hp9xPN3pPbfa5ryfWe9zXyoGN3qMr
5923zvG1bjm+csB9Xe85ttZ9dPWCO3Bio+f4ujt8/tjaBccdcMccc8esXXjM
Hbne7b4erx0j3LdyjBzpvsq3j66ck2/dr8jJ5AQnNnv1NMId404j5y/cT92v
u+PlHOSC7AG9OCG/rldSTiMXJEfai5PD7quelRyWr/Zq6M3R2y5H6jnojdKb
qdfKnmf4frPXXw7LmdvrqTfKPSKOezjcg/XYinto3Lc98qjJ4cpjt9YtD6h7
lI+v9QQPZeXRP7Z6QR7rYFT0uaEi48R9lWHjRtHZrcHKuNp0Y0kMVMfVWu8Z
d2Cj/+zm4Km1vnObg+e2Bt1hxx0+vzV0YXv4/FbFBfd1c+hCcKByeGOw9/Ex
d0zPxVH3rfta+WmgZ3uk9+LY+Y0h97Vne9Tp3hpx3IELm8PuwPLy8srKin4t
lUrlclm+2mP0yFIt8iP5uhJkdXVVf1G+ygGJvRQ5Hzlgz1lPbC/FnoM9vft2
aWnJfZVT6m/pMXKkO41eT/etXAc97H5qL1GvmM1KLd452AuVA/Z4e7X1+shN
sNdTTqOX0uge8O4uvYftdbYH3GOhpw/fz/rr4btdH0R7jLuX5A70bp1cnDz0
3u317lV93MPRq6FnJaf0xp6ej95LdgTaaxu+Ud4V1nvJjknGP+Of8c/4Z/wz
/hn/jH97DOO/zPhn/DP+Gf+M/w6Nf3tucj7yWMjD6o6xFyoPhHe2i4uL7jTy
VU4g5yAH9OHzDutvyRkuLCzIV/et++qdpx5jf1EiP5KvevX0F+1V0hvifipf
9ZrIaRaXFpeWl+SrcIfFwuKCHrlcWtafLpWWlsvLc4vzS+XlheVFZ7G0NF9a
cBZXKgfmAvPlhenl2dny/ExpbqY8P7syP12anV1bmF6Zm16dnyzPjJenp9bm
JtdmJ1Znxtemx9dnxtamR9YmhysmhtYnBtfHh7emhrYnnf6tsf7t8Z7Nkf6L
471boxXbYz1boz1bI73bwdeLY9V6LfiqVdv5zSHRvT1yYWvoXFDoXdgelgPO
mfX+8+74raGg7hs4G1SC4pSUzOt90j871dpZeun13pMbfVIyS/8sB05t9UsV
qZ2k/EhqTGmhg6+VnlMKTzl8slYCa2V6YrP30ZVzUo2GC2EpWqX7te2u17hq
qRt23DTeclZa/0aej3a2WkHbk2kL7bXK9gpr7SzXyn7VSll/as/c68D1q1wr
7c+9vlpvpl6KbfjtOVdPGTwQtU8ELkj5XHu8gsO1DxSOrpwPWujd/tk5tdkn
B06s97pBcny1e/fTio3KKKp+riGDZ61HPuk4XW2eB9zX0+sVbkwGdfTA+e3h
C4GghR4+uzHohrGM51oRLQN7WPrnyoHtEaVPiu7gCaIVtByvL4zyUlCOSvjV
XjcW4Q1lqX4zrS/R+hqoW0NvW6kn1nPzrlKp/p2AXiVvQ6Pnaa+hd5XCG6ZS
/XsAvar6I7kV9n6wGxrdiNjTh7dW3jHejfLerugNse+L9KLtyezVa7R10ysc
vlvkGHkzo+dp79vw2zC9UDlGt5hyPuF7I3xxem6yxfeum32bpL+ub+HCx3vv
fPSR1Rul11wHlV4i49+eRn/E+C8x/mt3cpnxz/g3V5jxz/hn/DP+7bi1l2IH
G+PfXkqJ8c/4Z/xH3ahDNf69sWHPbdk0yXoy+ak9frnW7spptOl10WpX6mU5
LD+V9ljOQX7XncYdWAiyFBX7u7Y39uroyJpafiSXIt/qafRO07ZZCmetnd1X
2z9rQS39s1TQC8uL8+6EpSVnbml+obyo/fOCO1BemC3PO3MrCzPl+Zny3MzK
3PTK3MzqvPTPU2tzzsTqTMX67JhU0BvT0j8Pb0wObUwMOlsTfRtjgxcn+rfH
pXzu2x5zB3qCCrp3e1T6Z5nSKf3z+Y0h923tmOqU0UBlKqk6uzEgFXTlgOmf
z24NOkHhXJm2GkyErrTQFUHzfGqjdiCY/3x8rVumQAtpKaWodF91WuwxMwVa
mudgnm1lFvRjK+fkgBSndnpwuIaVZlWrVJn87L7KRGjb9IanNNtWVhpjO3/Y
dtFe/6wVbvh4OdKbXSxXxputrVOv9RL1NjZvyPVy7SRwW0dH1tR6W+T8bWut
t9o7sUxEl3nptn/WidDysOqc9mOrlcf0RHBYZsLXiuj+6pznoIiuHgiGUGVc
VT7U6NX5z6dr5bNMeJb+ORiKlW9loMr85wtB+ezGc/fugWHpn3VSdI/7dnPI
DfvuyuFRO/NZPpFR+vKlL27eq7f3qq6H3euPfMhot+N24+5t+u1WSY/Xzw3t
B4j6am/Pzb6k60bHbqHsy7W7aD3D5foPcL0toPe+xbuN+hJt32/YbUfZpGTe
zJRqby10s+htCnVzo6e3kXvPXp+SeQ+gp/HuMbudKpn3Nvadg7tb7JXU6DHe
/bASNSvA3l77bsT7Rf2pHi7Xv6/Q67BiPsrXM7R3lL16+qB439rrYN/FyQHv
c209N8Y/45/xz/iPvI2Mf8Y/45/xz/gPjw3GP+Of8c/4tydm/Jdjj38donLR
i4uL9j6xg1yrWv0V7W+XgxJYul97hrYolgPlYHgvm8i38/PzWgu7w9oh65HL
tZbb9sZyoaXaxGm5oIVa9Jz1UvTayjnYG64HtGeWCtr2zzLzWdtp9+1yeVn7
Z62g3VeZAj27NLe4ujxfXpwvL8yU5uZXF5251UWvf55enZten59crUx+rkyB
Xp+V+c9jG9OjFVPDG5MDa2ODGxMy/3lge7xva6xve0wmP/dsjgTl827/3Htx
7MJmpXDr3hzuDVYYOL8xFDRvwzpZ9NzGgDbP7uuZ9X4pn50zFZVJp+e2BmWe
atAN9sn858rM5+BIKRK1gj650aeFpHTO0j+f3OyVb4+tXthdmmOzr7I0R9Bq
6iRbLTyrjXRoMQpvVrCeQItf7/hj9SW2HtbjvV5a1t8IL2FhF6aw1a7U3d63
9jp4q3O4Ayfq53XrudmzkubctsfeEhn2HOQ8tQ+3DfOx2ooi9j6xq3bo8Tpv
3E4gl+VQbP9sV005Fjy++oAGD3FtTnttGLhH/PTWgK6/4YaK8PrnM5v9Z7eq
5fMZ+dTDVNDngo9CTlda6EGZ/1yZor85dL72Scq5jUFpm7V/lpU35HDvxcqw
v7A5pHOe5as8QWT9DffVvph7W4HwJmml9qmfHqNbBPvqZzdS4e2CfbnW8/G2
PvYSvWul2xpv81oym2zdTNtX8nL9Oxl9edfz9LZl3vG6QddL927mSu0fZ7wT
2E2SvVftPVmqfXhq3w/ove2d0tu8Rj4u+qB4l6v3Q8lsc+0t1RN7Y8DeLbol
tecjb/D0brfvE/QxKte///QeTXsR9kh72+X9Q/iq6r1k33XYM/feaMm39joz
/hn/jH/v0hn/ejzj395Sxj/j37uZjH/9KeM/4+N/cXFx1mRmZsZ9nQsih8PH
LywsyAH5kRzQb13m5+enp6f1W/cj6XMY/4z/rI3/Eq//aY9/eSy0Ey7VFtyw
KZlZzSVTpOuV0XZXGmBZ4MJ2yPbX9bB+Ww5KaVtT24Rr5+Va3a3HaP+sy3HY
RTy8xTqW65fjsDffToFeLi3rVGc5HJ4gvbhcnQI9v7SwVF6WVTgqU6CX56uC
+c+zy3Nz5XlZgmN2ZWG6NDtdnq2UzytzE6WZqZXZydWK8ZVpmf88vj4zujo1
uj41UjE5tD4xtDExtDk5uDUxfHFqYGu8f7u68ka1ha6tv+H0BevcVid5BtOe
dTp0/XxRM/l5fUDmP7uvp9f6KqXf1pBU0GeCKdDBUgm9sv7z7hToYC5rdf2E
YP0NmfmsyzJIz2ynPe82k7UFhIMy87wu9aCd5wkzy9erW7WV1SbZ1rxS8Hqz
lO234f7ZmyNtL8IeaQtwdym28dbj7WrVes72zL0J0vKtvc7epGV72+1vebPB
9RL1rvDWhbZXxt6rdilp78SVJbiri6JUmmdZ9lnJ4s+2anaPdeXh3q2jqz89
tdl/PFh2Q5bgqK4FHazi4kZRpZfeCFYX36h+ulFd+GW9L/gcRD4Q6Zcx6cZq
98WRYNAOn6tbeaO6/oaUz9pIyxTo7upCHNXyWRbcsJOf3RPEbnckdsvoveLp
S314Q7Bc+1hTX5/D56m/ri/O8hmxbgj0dal+k9vs4117MnvdvNd/76rqxkK3
L6XQh7zezbSbP3tB+g5TNwf2d+0113sjvPH1vuoJVsyqYpFXVX9aMh9V22to
z9PeQLvNtfeS/lRP7L2RszdNT+k9anZz3PwOLJupAvbOt5t4vdPseZbM2yrv
/vFukXf3luoHdonxHxpUJcY/45/xX38zIx++EuOf8c/4Z/wz/vMz/ufm5tzX
9fX1zc3NrVqaH94M4v1Ivt3Y2NATuMP2BO4ipHth/DP+szP+ef3Xe7WU3vi3
P5X5yfZs9ZRaAuuVlCyZac/h4lpOr5XvctQ85JJpgJdq62/Ii5V2zvqttsp6
JnaKtbf+hp5Gz1Mffb2BegJ3WCY528U3wp2zzot25hfmSysl6Z9l/rOotNDl
pYXyoqwCLUtAL6wuzriX/GD9jcoU6JW5qfLs3PrilDuwMivrb8j6z5MbcxMb
QQW9PiXzn0c2p6R/Htgcr9iqzn/uvzjuvvYF5fOFjWGZ/KxrbvQE30r/LI30
uY1BmS8aGIhYeUOmQG8OnqnVgLJI79mtwXPbQ6eCklBJ+Szzn89sDZxYr86G
lba5ugpHZZ5zj93/oBTRZvGN3Xm2sgSH1NHH6xe1sA2wV8l6i0h4C0Rrteu1
2eFJxTpV2FaytuLW8taep5327E1s1rnZ3qxpbx6y1wDrBXk7GfQ6Z2+at735
9qIjz9NbykNugrci9NHaZwE13bqzSPnUwHls5bwusiHzn2VdDl2ARcpnNzBO
BENFdz54praQ+NntwWBQ9cn6G7IEx7mt6g4HzwRDUfc/eK62YrnOf5YZzlI+
n10f6N6uds4yzrtrKz/L/Gfd1aAsR2PnP7sjS+ZjNbu905d3u0ldMR+zRm4f
7Wl0Y+S9/uu5yXZQjgxvc72NkcZuWfS6eev/65Wxm0u7BbEbFD2gr9vehka3
cd5mSL+1J9Cbr1s0e030tdfek3ZLZ89f7wq9lyQ6B0CusJ6V9wDZ7am9c/Td
i/0tu1HWe9X7Rbtl9B4pu0m1bwAa3ef2QfcezfCDYn9qvy2H3q7orfbuSb0t
dqzqg8X4LzH+Gf+Mf8Y/4792JzD+9fwZ/2XGf1HGv1yrzVq8blkKZK9/3t7e
tqfUn+q39gS2o5YD0sww/hn/WRj/4cfC3tW8/h/k+NeZwHYgLZuuvhSaph7+
Voe9TjZerl+gQ89nuX6mtE6WlhJ4qX4xZ70sWynrOetiznbxZ+3DdTUPPR+9
GnqL5GR6F4U7Z2+PhP5eCEtL2j8vubt2pSRLQC+UlxZXKhX07PL8fHmxsgvC
lYXK4hu19Z9nV+dnVuenyrPaP+v6G2Or0yMrk2Nr07X+eTronydHtqcHN8eD
JaBH+7bGZPJzpXzeHAkmP4/2Pz4huyC8sDlcneQZfCvlc/C1Olk0KOgqexus
7c1tSPY8GDR7waK7uhu43V0Q9p3dHjyzNSA9YcXWgEx+PrHWc2y1O2gaq9Oe
pZaUdZ7tbgdrO6SrzKd9bOW8TJfVPQ/Kss9SeGoXapdZDi/EEZ4nbCc82/m9
tuC1s3+9vft561TYotgrvcNraHhlr3dZjWZK26nL4cWc5Rjdm6G3BLQ3VVvP
055GdtroTZ+2y1zLCh72rqhe50BtOZQej+5nUB9c92ie2uo/UVv6WyfDBzum
7NXVwqvLtshHGGu92j/r+hun1/tOrfXKPgdt/3zh4si52hLQ5zYrFbRtm53e
x8d0er/sgjDY7eBoUD5XF9yQmc/SObtnhM6Ftq9y9nU7/NIXfiH1jk/rP3S8
87FbwPCWwq7ZVartLjn8Um/P075JKNfew9jrWTKbrXL9Rj+8bbLXx16id495
d4Xdstt71d5F9s63J9ZHynt0VupnCOgJlsz/DHpvSPT66xiwB7wHwv6WvVHe
+PHeHJZqG1853n7yq7+ij5q3bFrk4NR3OHozdWuoZ8v4LzH+Gf+M/6jrxvjX
82f8M/5LjH/Gf9TxuRj/7kzW1ta0Pd7e3vZmL4enOstpvLnQXkcd2T/bWdB6
D9jrw/hn/B/w+Of13957KY5/GWlLof0JLtcmD8vx0v2WzerNWrnrktESr3le
MlOU9d5eNjX1Um2OtHTFWixLjey+1aWhdQENOVtbPtvjS6GlP+xc6CWzr0Pt
xvVGSdVsV97w1oKWac+7K3IE62/IKtCLQQu9qAeC/Q8ulBcXZAp0sP/B2Ur5
XFmCY359cao8O7u2IP3zzMbC1NqcrL8xujJVWfw56J/HNqYrS3BsTA1vTo1u
Tw9vTw1tT/ZtjMr6G5WVn2UJjkBPsOBGr1nkVvpns8O1EWnqgo5u8FzNmbV+
Wfm5qjb/ufI12PlgUDj3y/obMiNa5j/b/codX+vZXXajVk7K+hu6IrSuxaGT
n6XJtMs+6/xn3YHgsfrlkW3JrH2pPRBeUMJO+o2cKW33J+itYiHHyxWwDa3U
ttrf2v7Za4b13Ow61XY/gHq2OpXaLpSht13PyivSveP1yniTvfXEMtPbmxZu
i/RqOx08CrL+hsx5lkftsZXz1bWgayts1B7uXjm+NvNZPoPokynQJ43KZxmy
tPjWgPTP57YHdVzVyudq/xzsELMy+fnCxRFZ/zlYsbyy/oY0z7rURmVJmdqy
z9WFoIP+uac6Ebq68kZ3sEC6PimkiNYNrn3xLGfsg0JvE+OdXl/M9U1FeJtS
rt8cr5p9Lus56AXpptNubrxNlX1Ls2I+1C6bdxHeDdRbp9dKb5d9U+HdXd4N
L9dv5e2G0n4rbzP0YdJ3cXxQ7j1GjP8y45/xH7qrGf9lxn/mx7/cQPmjSVZb
9RYwlD+jZJlWOaxLFMphXdxVzkH/Y3QxWCFW/tqyvyXfynnKYXu2chpZ+lVP
qbEXLb/onaecQH9d/0jUeoTxz/gPn799WHn9bz7+3ZM6csayd8Drlhs1zOED
kd+6pzPjn/FvLzqt8W8fCF7/yymN/6Xauiv6bclMDC6Zrrhsngt6QbbCXTYF
rzfk9MTyHkPP1rsIb80NPWd51VoKrf9s5zyHS295P6bvvpZM7EXbG1s921rz
rHOhpW12tIVWi8u7S0DL/gdF0D8vyxIc8zILemVhLjBv9j8o62/MrFV2Pji1
NjexOjO+Mj25MTe6Wqmgxzdnqrsg3Jwe2pgc3JgY2Bjv3xjT9Td6Nkf6L447
PcES0H0Xx2T9Z1lYoFKyBfM8zW7Xhs/vzhodOKtLcNTWf5bJpWdqFfSZ2pRU
3f+gt/6G9M+y/0FZf0N2Mqi7pTu11X8sWChYauejK+dlv4Qy81ln0mrtrIs/
H288adnOSfZ66WO1xZm96cHemdgT2GWc7fxhew66U0L9Fbsahtd1H62tDq10
sWi5wnZGt1dHh2dTS1es85+9Iv1okhPFdf2N6mznYH+R0kJXH7jaxwq1KdC1
zxSqyz731YZB5bMJGSQyC1r3PyjrbwQ7H+yTmfbuyHNbg8Hiz/3n3GiUBTe2
h2RfhGdqg1bW3zi3Mdi9PVJbz3y452J154NypJ0CHXzd3f+gTIG2S3CUcv6B
st3w6cnkgnQbZH9aMttl3dzoLbVnpQe87az3Cs8HyvqLK0yoYPwz/hn/jH/G
f8Ljfzn4M0dOsxFke3v7YoxEnuzxxx/3DrSZyEuJeQ01W1tb7na5G2tXkWX8
M/55/bcPSkvjf3Z2NrzCc3jeslcsh9fc0N/yVueInFDtLpTxX2L8Z2D824eG
1//wvXpg499e3LKZCWwPlOqfDnrYDiev5tVVNZZNpeyttrFkZj7LMXLFtKPW
45eiZjvLW5FlsxaHfrC+XCuf5eP15dp062WzYLVeT72l1Stpdi8oJXOpXKq2
zfUrcsj8Z2e5vLwYrL+hk58rykuzS3OVJaBXl2eX5+fK89I/B+tvzM+szMn6
G9Or8zNr87L+RqV8DtbfkPWfxzaqS0CPbATrb2xNDW5ODG5NDG5Pyvobu7bH
+h+f6N4clgq6e2uk7/HxSrEWLAR9bn1Q2ja7v7YLwa7cqhNK16srP59Z75f5
z4HK/OdT69Vi8EyweEJ1hYSgf9YuURaCDpb57dG90VU7ydqyG/q1unO6Wod5
1J2yskyHrvPQrcs+eMtiaFnqdaq2tvWaZG/pDCZUtzShWtdF0Q8LdMp6tYWu
zWmvrrNRWeu7V9flkA8j3IHTWwOy/0Hpn6sT5mUK/Vpl5JzdGpD1N6qDLaig
tXDW9TfO19aKCRaNGZL9D56v7YWw9/HR8xuD0jkH345JL135zGVj0H2t/QvA
bgXtniO9F8cc99TQF2f7ems/HrUbKfsari/LjY7XTYPdmpdrn/3ZzZxuo/US
dYOov+VlpfbRqr4mexfnbY/srdNf12vuvdPQDZB9qbcXp282yvVvBuy7KXur
7ebSbrC8LZG9l+xp9Ef2jUrZvGHw3iHYG2u3WfawvRR7jL1Eb2B4N7BUv9XW
U8rJyvXvZ7zL0rvIG2P6UzlGh8pKLd6DFfmYluu3zmXzBsDbgnsXp+fG+C8x
/hn/jH/Gf/bGv/5Fs7m5uWcDbL/GT6da6Mi0emUk7saWgx0V6f3G+D+c45/X
/3Ib41/65/B6GpHdsn6VnQyGp0OHl+MIf6vznxn/jP9y2uPfu694/feOKR/U
+LefUOhV1btXjtEVkvVMls2+Bb3KWn7RK3ulKw7PcF42+yLUZ4ptsLU91l+U
M9Fz0Ldhkcfr8LMlsxywuyNcMkuC6NoaMuFZJkLLAV9t5Q33dcGdSnc+WOuf
Zf7zXGlhZmlO1t+QCnp2ZUH659m1henV+cnyzPT6vO2fZf2NkdUp6Z+H1ydl
F4T962PSP/dujur6G/0Xx4PFN6o7H+wLKjVp2y4EKz/XFn+uW3/jQt3e3AZ1
8Y1zQe93er1P9j+4uypvbf7zybXeyrK967srb5xY66kU0ZWVFqrLPuuBoJDs
kfnPOldWd2CnLbTu586s+VBX+Xo7CvTqYq98tifTGctej22b4d0VJ+rnAOsx
MmlZz9Pu6c/2t/YKeGWvVN9agEdO5/Zups7T9q6bbbZtLd/oeL2vbJttb5Qt
6u29ofuCdF9lz4P+EtC1lTekapb9D56s7ZHQLMPiftqto0UW3JD+WZYQP7Xe
G0yB3u2fq3PvK+uQy4AckLnQp4NVyoMlOAZ1/Q1ZaiNooWUW9Ki20OeDlZ+D
xZ+HvPU3emrr0sgB+7JptxRLbe+Zd7n2MbGep30h9TaX3susvj7ri7l9tbcb
ZW87ZbfsS+YfUpbYM2/tZKvsmTp0nmXGP+Of8c/4r13zEuM/k+Nf/qJp3jx3
JPtrid1vJTqD2t1wnbDE+D+E41+P5/XfDonww1dqMP7n5uaad86N1nMOz47W
mc+Ry27YedHT09OMfzsIGf+8/7HnedjG/1L96hP6ENhHzQ4qiT1eOt7lWvFr
z8RrlbX41QtdNqtAexetP5qfn18OumItn/WrjTdH2v1WubZUtfTM3k3QO02P
1GPsChuy2rN00bLDwd2Zz8Ecad3/oEyE1iWgKy10rX+eWZqr7IIw6J+nl2dn
SnOzKwuy/8HplbnJyhTouYmVGemfncr85/WZ8fWZcP88tDU5sDk+sDXRvz2u
628MVHY7OBosAT0qpGHrrS3HIXtbc1/Prg/YBXJl8Y3ztSJauujzQdFXKwB3
Jzyf3RrQ3cbJ4gmngxWhpX+uWO/11n/WWbIyP1YraJn/fHKzT1pob9qzLsHh
rUGhfbKteaV31eJUCluls3/tPGrbadu5zV4bbPcGqM2tTmC2na1di8MW4LZV
9uZp62m887S3S2+CvZ4689lbUsObI61LdhwzC4boedp7w2un7e2Vx+KxlXPH
Kl10b7BMSo/Of3aO1ma51xbikKVUenTng9VhsNqt056Pr3ZXPq0IJtLLQHJH
ngkq6N1xVf3sYzDcP8tYDUbpsK6/0XNxVKZAd28Py8ob2kL3bI/0PT7WHazC
oZ/CSPncW1umRvpn77V3pfYB4pJZGL9Uv8XX7Yt9/dRXbLt9tL9uX7294+1L
urdh8g7Y12fdQNjL1ePtL4aP1xdGbyusP7U3wW4H7cbOXmFv+7hc/wGx/Wnk
Ae/u8raYehp9S2PP0J7GPha6TdS73Z6Pnlv4HrZn671XtI+79w4q8hh7W7wz
926aPbF9TO0jYq+t3lL5Z64ls7xbo/PXdwV2VNiTMf7tvW2HSonxz/hn/DP+
0xv/+ieYV8lK3xunLm6pUt7zxInOkW4Sd8XcnSAVNOM/ifHvzmN6eml4aGF6
xp1bVsb/wb3+T00uffsb8x+4a+7W187+/EumXvKTky9+3vSv/dzsG3536aP3
Lh9/bGV+rtzR1/83/ePiU++Zfuq9M08JvjY54L4+JeqUl3xw8m2PLMQZ/7r+
hjfPOfzt2OTM3z/0jT985wev+YVbfvx5v/hDT/vZH376zz3rp375F37jD+64
5xPffuz04tJyuH/25lTL4bm5uTjjf+BfdXVEm+Pfjh99js9PLY6dmx56bKL/
G+M9XxsZOjox0T27ML1YwPHP+5/D/fpvzza59z/2Pi+F5gPrzdGTeQNSy1s5
W7u8sy17l8wcaemK9VtvLrSe82Jtj4S2WF6qTaW25bYtpfWswgt0eBcRPl7v
B53trF20d6C6F8Kgdpb5z/OLlW9l8rOs/7xQXpJdEM6XF6V/rjTPMgV6dVHm
P09Xdj5Y2f/gxMqM7n9Q5j+Pr8+Mrk+PrE3K+huD6xPDm5ODmxPB/gfHZP2N
vu3KKtD9F8e7N0e8/ll6Nll/Qxq2oIWuTgqVyaLe/GdtoYPeb7d/rk2Brq6/
IVOgK6V0cIxWi7L+s1TQu7ulC5aA9nZUp+tvyKzao6vnK21zbfKzttC2LPW6
Yqmada0J26BGHhM55dibCB0+sUxXtucWnn6stbMs8myXd250/tqKR86FthO8
dcq0PY2W1fJV7wc7E9trvMMX8YmvHXnFr7zyo498Ro6/87Pv/5FLfuzf/OAP
vO5tb9S7Wh6FP7n7Le544Q4fW+u+94GPXfXyF37/D/6A+5U7P/N+eViPrpyv
DABZqWOt+67P/oU7/T/0PlLdBeFG3/W/8kp3+q9OPnaqstRzv8x//n/vfqs7
WTAdene/ljL/WRbfcENR1t+oFNHBQJX9D8r6GzLJuXt75NzGoNc/SwUt62/I
+s+67Iad9qwH9PXQbnz1BXO5FvsSrS968iPd9i2bj6T1V/TjYLvVsJtFe572
dd7bHNvr5m3CDuFeJ8L3m96l3un1sH0ow28k7IOiJ9a70V5be4zeUXqj9Fp5
m1q9qvYNnrdl1xGoo8guFBa+V707xz5Y9tvwLV0JfaTO+NcTMP7LjH/GP+M/
avx/YHjr50995xXHHn/18Yu/dmzrV49u/sq3N37pm+uv/sbaf/za2s8/UvmL
75n3zT/jc/NP/8zc0z49+9RPzfz4J6Z/9GNT/9dHJn/4Lyd+5C8n3vhPs/sb
/+6PGvdtKpVvO0mopnZ3hVTQ7Y//ra2tJ2rZ2dn5zne+83iQi0HXLevZ6ioE
6+vra2tr3tm2Ov5vPDLU9cenI/zRqa4/OvmkPzz+pDcde9J/Ofqk//LYd73x
0e96w7ef/AfffPLr//nJv/+NJ//+17/71q9+9+se+e5bHn7V+090dvxPTMz/
7afPf+iOR9/3jn9+7zu//d7bj733zpPvfc/Zez7U/7nPT/QN1q3d2pHX//n+
L07846snvvzzk//4C8p9O/PNN5WWZg/+9b/s/vz/4ufnbv2d6VdeM/ni5zlT
L3ru+IueO3VNxURwYPrnXjz7+huXvvHVUude/3/4PTPf+2fTjfzb98w85Z65
H//A7Pfd1fA0zo+8byrO+Lf9c3jS8law4vrScvn9n/rC81/7pkv+79966U1v
+MU3vu2X3nDXa974/te88Y7ffOvbfukP/+TZL/utp1zxn65/9R/840Pfjpw1
7RXac3NzcV7/9yyWRy75weEf//6Y/XOr47/c4PV/on/mobtOfO53Hv7w9Q9+
4Kq/e89z/+Y9z/3be6/+wkde9eDf3PS1k/f1Li34yyDw/of3P/aRKhfl/Y/e
Ce2//uvOhb0ro/fwklmnxc4TlpTMzgS948Mn01OWap/C2EnRErkOdr3oJbO2
s5xGj9RJ0br4hhyWS9e1oO2dqVdMa2evtZafauGsq3BI7SxLc1SL6NLu/gfd
19JKaam8XLWyvLRakv55dnl+ZmluYXVR19/Q/nmqPCvzn2X950n3dW12Yn12
cmN2ZGVyYmtubGN6ZH1qZGNqeHNqZGtK5j/3b473blbK5+riG9XJz5X+ua9+
n4PdwbLPImjbhrvNEhyylIHXP58JJp0GBeBAZd3drcHqUgnBbGc7/3l3Ld9g
CvTJjd0pr9WdDJr1N+zS0EcDx3cX4qg2z9pCHzMTerXvtROPtSXWDtbOK7ZL
IkdOEraneXTlnNdsa/2rE5t1f4LhiceRk6vtLOjIacZ6/t7i1XbFDG8ydngH
hXZStL2X7JRs/RWdDu1+9FtvuvHZL7jU+fhXj7hf+egjn3GHv9j9lYcmH73q
2hfe+dn3u5P9yCU/9rljX3SPxZ+85y1/fNef6vrP7gG95/6P3t/zkDt837H7
/80P/sDDE4/KI35qq//kZp9zarPv+te86pdv/LXXv/1N1f0Srnb/zGte9VMv
v/odH/4z7Z+/PnXMHePOwX0r6z/Lni5l4J1a6z2/PXxWRubW4LmtofO1sRoM
18HzwScpuvNB6Z/NXOhqC91ds7tTTrMEhy7EoS+t3ibGvoavmA8Bw6/J3iu/
fbH1tkQrtY9r7S+WzQeR+krubZL0pUyvgF6HEv/d0/jB8h5Zvavt7+oF2eOX
zVsp75rbu84+7vax887T3i69CfZ66ubJGzDL9e8Wlg78v9vCdynjn/FfZvwz
/g/l+H/lyZ1XHHv85Y89/rJvXXzJP2+96GubVz+y8dMPrV/1lbUrvrz6/H+o
nKZSPn+2rnz+kY9M/vBfTf6fH5r49/eO/Yd7x0qtj39ZCDHp1S0OIB28XL3H
2hz/Ozs72jxL+Xyx1jzrztSkeZby2WV2drad8f+/vvVsqHY+9aQ/PKHN83e9
sdI8P/kN39Lm+btv/Zo2z999y0Pfc/M/fc9NX+ng+P/cJ87c9Sdfufu/fuXu
P33krrd+4663f+vO247e+e6Td/7Z2Tvv6r7jvf13fGD4r/9uxr162buu1N7r
/+hf/8DwR7rCRj72PZOP/M7y0vyBvv4vzM/f/vap66+auua5k9dcNn2N1M6X
VV1d+Tp+9WWTV1825vzsixa/8PlyqeGEyZZe/3/0vVP/8vZd3xt8/dd3Tv/a
55ce6N+cXv3O4kbFaOnx+y5svOqzi//bHZXTfO/tdb91yQcm4ox/N3Qjl9fQ
3nhucek33/rn/+LaG37st2987Z13v+UTn3zDPZ967Tv/7jff/qkb3nbH//Oe
d//2u2772VvuvPo33/GjL77ph37yNX/7wEPueaHnKctueF303NxcnNf/vYvl
T39s6fa37XmyDr7+X/inwQ9e+4W7n/c3d192312Xfc5xBwKVY+547mf//Pn3
ffyX/+HCV0f3Mf55/2PvbT2NXjTvf7L2/seeYfuv/9o/e3OVNUu1NTTkW/cu
yJ6DHcy2ZNZ3BfYY77DuhdC7Anaes3bOy2YhjmUzw3nJ7N/QznleNgtH25SC
KdP2+mj5rFe4cqC2Cofsi1AW3JAuulJEl0tSPi8sLcj+B+cW5xdqeyFcWqmu
v+HMyRTolYX51UWnugvClbnKzgdX5qZX56dWZqfX5ytLcAT98/jazNhasAvC
zdmxjenhtcmhtYmhjUlZf2Nwa2Jga6Jva0wWf5YKumdrtHtzRNZ/7gnK577H
x7V/lsnPMv/ZtHPVxTcubA+fWevXhThk/4PBcgdBDShVc2Vh3v6z27vfOseD
RX2lha58rfXPUkGfCpbXOFGbC61fdQlou55DbZHh8zIXurocR6FXt7Bzob2l
ReyF2hPbqxru5PUm6BWzHbV1f+9D7nJf8SuvlP75dW974x/f/WY58Z1H/uLV
v/Mad+TbP3z7w5OPVvrnu99yx2fepwtuyAcH+sg++wWXHjn6RZnxfnTlgiyr
8mDvw8+54jL3tTLheeroiWB4XP+aV73jw3e446sDZr3vv979Vp3/fHZrQBZ/
PhPs9dKpzHaWpWCC2fiyO0KzYszQ2WDxZ62ggynQuzOiex8f0/45mPy8+6GM
t/iGO3x+Y8jbxHgv2t62TD/vk39CsZtIfd1eDj62jty02a2z3dou1z4Z9LZo
9nd1u6OvmbrAlN1U2S2Ibi51S203CvZXDuBDarvZ0u2pXgf7U93k6R0lV8/b
NOtbOHuHrNQ+3y/VvyPS0+g1lPO0eyv2tsv2obGbV70rvOFhb74eCN8zdiss
18cOCRkDug3Vm2MXE9Mj7QXp6b370w4zvf7eY8r4Z/wz/hn/jP89x/+rT5jy
+et++fyT91dOVimf/1rK5xlbPv8f94790AdG/937R1sd/3KgU7VtO9H2u3kN
ntCcZ6+7dpfi/cW6v/G/E6RJ86zTnl1Wg8zMzLQz/iv98x+dfO9XJ56Iyke/
Of7k13/9yb//9dd8c+X3ep4I+9V/Ln/P733pf/m9L3dk/F84M/nB27/5rtfd
f/sbvnT7m75y+588/O7/72vvfsu33v3fjr7rv598121n3nn7hXfe2Xfbnw+/
831j93xq+tETi+UOvf5Hls9i6FP/avbkXYuDDywM3O++Lg096A6I6pEDDyz0
u28fWBz953L7r//zc/MffO/UtZdL2zx5zWXjgTF3+OpLx6++bPyFz5l84aVj
V1868dPPGXdeeOnEtT+1+PnPLQXNqj23fbz+/9j7pv7luyfV99859Zq/WTg3
dzH4YMTP49954ksDm6/49Pz33VH3W097/0Sc8e+GrjddWUpjOTC3sPx7b/vw
k6/43a5r3vSv/+NbfvWP3/vLr3v7b7zuT2+49S2vvulPr7vp9hf//kde8oZP
XH3rR17wO++/7Nff9R+uff33P+fXP3bfP6ytr0UuGS0H5POaPV///Sb5+77L
3eFDP/Qvgm+fNP1rr/rO6sr2UP/o859WOeZ/f9Lwj37f+EsvdyfzfrEjr/+L
c8sP//nJO59/5I7LKm5/7mf+/Iq/vfe6L37oF+7/q5978H0v+/zdl99352Wf
Ex948RfOfnnA/WpL45/3P7z/ydf7H3v3esOj1Prr/1Jt55il+gW6tTq2Y2O5
9hmNfXDLtanROptai9/l+rnN+uvhice2qfZqYdtC67WVyQDeys/6K/LTpahZ
1sumnbZXTI6U+0TaZqmddfKzkBWhK4LyubRSkinQ80sLYrG0tFiuzHyulM/L
8/NBBT1bmpspzf3/7F0HeBPHtnZuOj0Jqdyb3AC5AUIxhCS00EJCJ5CGIST0
XkI33aZ305vpJdRQEjDFFOOCDe69S3KTi6zeZRv7ze6Rjo9WwhjMe+/e9zSZ
b7MazczOzh7PGf799R85z4Iu1BQXamUyg6KICz4oy9dy4hssF5oU+UaO/8yB
z8aiXFOhVf/ZlC82SsUmqdgsFVukGaYc0H92KsGRxnM7rWibHficbVPesBJH
U0uzrWxSoyiBFzoAFjRoHVjDwPGQIE+BzkgsEaMcNDuC7HO0PjXenIn6z9GG
1HhLJsQfjOPVGKJsKsGo/wzgc5RNBZo/pgMEzUsNV+LPUfbh/Ci8TBnOFKRF
bJaSnAXSHAJwGFBcCjIj25lKfLAj6EvTrpwyrh2VpXFgeEcC5Q16Ths6QtaU
7w3iGwKmNwLvGL5QwLKGCqi/0WfogH3XjkLhsaBzfT0GWmeGfxyj504A8Q1W
/1zUFfbUInTJAEf7nNnV+Zuu3FPm3ylE6UHNO/W3VXMXbfNmJT9OGM7qxJqY
MaSz5gu3eo2bP2nr2T0cW96Q7t7x05CCKNYzL77BWVRSiQT5zwA4o/5zArwW
4SFoZqWg/5xsL8EB+hugvIEUaBv4nCUQ3GB/I9Z3NPwfCC6q1LVpnTl0ukOg
Kz9dJLGJiqhU0eVd4GsELhj9EV2uBS6eLuzoN/Fb6hAFiW4/wAnSO3XsBweM
SzetJviNkuM59RcwKnqk9yLwudRl035w8nHjgR4Zhyq4Fo5E0DMdJ33odKLo
8FQ2kTFaqHW2IXG6/aNGIrg03YEI6tOGgo0l3b+BqdDHIehTa795ENyvy/5d
9u+yf5f9O/bjsn9H+/8uuvSR4PNV7adXuH6an5Z9fFL2rxP24LNvXqO9ue/t
ynlnRza9dHXsXy6XWyyWqrHZ/y015kel/xl+NZsW+OdeTewf1TZKieAGQGcU
eQbwGTopLCysif3X90pwmxupMpY6xZ9Zen7qneen3h4TX+IUf2b5pXGXX55w
reb2n50l27M6ZN3Uy2un+a2ZcX3NrFur5wasXhCyevH91UsjV3nHrFyZsHJN
ysoNmSs3SVZszVm+o8DnsCwmSfVM1n/RQbf0/c6z9EJj3b3++rCB+tD++nt9
DCHfGEJ6GYJ7GIK7GYK66AM76e920Ad8pr/TTnWro6Zm679GIS9avyL/my+k
XdtCzuvqLv3SXdrVPYedf+meC5hzFy7ndmmT/SV3zOncOrvnp8W+OzQ2qOSp
1/+PthXUXZcHufGOgmNxBp3FGfRMksb8cHOY7h0fKTYE/Pmx9g/8Z0F8QDhR
aXRjVxx5vtMct96r3b5a3nX4nJNnzp2/eGnv7xfX7z+7//fzf5y/MHqmd/OR
2z6d82eLiQfbTvRsPX7Km/3G1e/287ELtwUBCikLGoJ5PXb9d8SfS7MlhuuX
ZTPG5bT/yBQSUFFeXvGwTL19Q1aLRvJFM033AkvzckWvP+fIf675+h+0N25T
xz82tD2zrt2prV0u+K+NSrubl5skL5KoC0XqrJiilFs5l+aG+nzxB6vAqu3q
/VfkuVTX/se1/6HT9X9s/0MLtTVe/9U2YBb/EDBhicYepsYSNBUt0SqnILCa
oL4qQrSmrGa8EGUpU4hYwzOWVSQEId4RinKoCYCMsDMVi6ZKI2oCcWN9NcGl
geeMahuUBc01ZOVqFQYf5JQ3NCoIPmiNP6hTF6vlwH/myc8c/xnENzgIWqcA
/rPMoJAZlYA/S3VFUr0M8OdcAycBnWsqzDMX5ZqLss2c/obImCc2SzNNuZmW
XMSfRWVSLhAhkeBIs+ncAv6czEtAQ+S1NCtMZz0C2pxMhKATjJnAf4YQhIk8
1GzT3OBJzob0Sp4qH5GQE4UGIWhzJkadgwh0UYZULsggjz9D/MHKWHWVzGcQ
dkiBHKlPBi2OaAeqM6grU/zWKTpN2b8C+JfKVggga5SqcCqvgQ0FwDKivsh/
RmSYyl+wjwu2LkMV5QVbvQTManpTTknXjiRtJF0LQGyBuAfMmAAbhyv2GToA
+M99PQYeDTwL5UcCz/QdOtBKGq9UREm7mx8xeu4E9hUgzKyE3UWX3t0C8yPg
RQP/ZNPhaTZu3vR6eiB7yr7XjrI6Vv1nj0GLt3n/HnzevWO7eFPGtrN7xs6d
yEzorffeibOGILQGu0y0UaCBh59cIkmyiP/MFU25ntblQErDVUkss5OpN9L9
8kQANdP4g4A8VwpB8xLQ7AhUZ/a3QI8IR+tI+k9UjkLHhEdwT053NdQl4fJL
3YrADWFDfKON46SeFB0WNqFbIK1tB6Wzfz0qaEX9qcCj4ahwovBC9B4dHwot
EVRQ2f8QjEbTQGcHJkEnRGvvYQXPQks2S4JnhO/u6ajoG3ynndAKdJZw40Rn
WGP7WZNgzh37p4/VZf8u+9e67N9l/y77r4b9D44ocQI+37CCz23/5P5lAeBz
02Mc+PwhBZ93c+DzW9uy8LrVsX/2TxJ9tWWfnxT1FaDW9ONTAMjPUB6k+on+
1T+d/ePgnUo9C5Bn6KegoKAm9t9gWdxzcx48Cn8uLy9/YbI/y2MTSh+FP788
5uLL467U3P4P+dxfO/Xy2qlXVk/xWzH1+vJpN5f/FuA9J9h7fpj3wnCvJTFe
XgnLVqQsW52+dJ146cacJVsKlm6T+Ry2k1NwarqCNcrp+h+62e3majf/VXY5
bOebxUE/PEydWZEyviJ5ZEXSLxWJwysShlUkDK2I/6EibkhF3OCKuEEVsf0r
YvpURPcuj+ylrdn6r/S7lNe7U96XHNoM9OYcDm1ukwu5c2sObeZOOMw5l885
naw5a0gvVXystmbrf9Ot2XXW5LLccEPe0Th96cOqsWdrMpSUT7isrL+Wa1h3
TW6z7dLq2H9xcbGjPjPY/IGLwXW+XuzWd61b302fDhj9IDTk8OlLPueCpuwL
/GzJxfoTj3bzPHA3KGjkxOlvjFj/wdQDLaeOfn343FZzJ78+Ynwbj/miHKnT
UIbsWFRUVJ3131FJo1Qi4v4eTMaH8uLykhK48YcGA/fRbGbnJanJVeg/P/X6
H3Ulff0Xp9e1Pb2+7ekdX1/KDCvQac1Gc4nRxGezNasVxpBDSZs6nGM1ucod
z0ni8qtv/679j9a1//mP2v8IrK7m+3+0W3wc9CPOsIoEH9QSyjRWRmVmWoLP
wpHkDElgIfAR0WbBwFCIQ6ChgRUgIAUt1xBwGyFx2i32rCKEbSQ8A/6s0dqk
OTi9JzX3keg/K/iYgxB/UKVTyzVKlZ4dFVb+s1ZRrJXLbLlQUyyD4IO8/nO+
tihfz0lw5BuKpYYiqVGWoy+w8p9NhbnmoixOfCNfbJJmlxaKzHniUk5/A/Dn
NHM2kJ/TLDkZpXnWEIQ2kdsUkwSQZ4DaAHa2SeZyyhsQ0A0gaGCWJlnFN8Q8
B1UUX0mB5qSeMf4g6D/HmzMrJaB5/jNEo8NAhKD/jLBz5dGGP0fokkF/A5Sf
Y83pQLsFKBXlKVDvQoA5UxSa8ocdow1CIXQoYBQjq1lAQsaPtAIlVyNEjPH7
3uQR5jdtUDOcs5rsJCA/nNW8I33Azin0Df0jngw3i/IaNKAhXPRaZmCoMs5R
DhoroDwIbSWQ9UDYmZ2PnjdhwVYvuJ3NZ3axj+zbsxzV2fpSAFDlq+l3uZEb
UgMLIjgyM89wRkEVntzOsdl9+MiDNF+IvsZso9/QgYu2esfyJ8cDz7l3aHc9
LZAZEvCfeQkOMVDrOaszZsBLEO49iFky5Xra84sS3RYI88tLEmffSoP3Kcyk
00qtsDOA0lZcmkOes4H/DLAz/joATkCLw9HToX/BxR+dMl1vaQm6XfQg1DkK
3J/a/g2vqmZxKP6tvIngrgWduHZT2sftpgR3Rx+6liSnD4V+Sz8Kbg0dn+NM
uuy/imdBp9pl/y7717js//+f/Q96wIPPQWYn4PNf6jYXuavw4HNh4yMFQvB5
Z/bb27Pf3JL1RPbPhvHMucQXLlzw9PQcNmzYjh074uPja95hTWDn6txdFf2z
5vjb2Kewf9a2aqlnRJ5xWWApPz+fPrIntf8GS2KemxWmMpQA2ixIDx8+fGHS
jRcnXq8Cf35l9MVXxv5VQ/u/7Ze+bobfmqlXVk31Wz7lmtfk60sm31w8NWDx
9OAls0IXzYtY6BmzcFH8wqXJC7zTF6wUe67NWbAhf9HmwiXbZOdvyLU1Xv/1
CZ4VWWsqslZXSFZUiL0rxEsrRAsrMudXpE3jMeefKhJ+qIj/riIeMecBPOzc
l0eev6mI7lUR9VVFVE9tDdZ/qbxgt+9vKb3a5dmIzRza/KV7wY/9NAd2GzMy
1Poyjd5Uqo55KPIui+5ber99SWj70rB2ltBPLfc+LbvfziTaoddVekPtk6//
HP68Oodlj3PFj2U+01SoL+t0oBDaNtueVR37Ly4uptEGESWWFik7T97p1n+t
24973x6yIDgw4PrNO9Gi4qBMzbGo4vnX8ub65Sz/K8376K3oyMguw0a9OPXY
y+PWvvDrlrarxjb1nPjykHH7zt80GI0UgsZLgP7GY9d/RyTZdD+knPUZH1Om
KK5AORK2HBTml6QmVZSWGm5dc2xVw/U/J7lw16A/17Q9xfL23peSA3K0GpNO
ZzaYLHwusZ1YdHqzwWiJuSza0uPC6rYn17ifOj7xTpFUXk37r87679r/uPY/
2n+b/Q9e7hnu/zWE6qyxh3yhCZQIDAmfLyTkM6ttChtqkijeq7QltQMujVen
LGgUZ8bwgghfw1f4+JDMrLFHxWl9tT1ZWk2CFQpAeKVKCYCzQqnQ6rSctI9W
Yw1ByIPPlVmjKlbKbeIbHPNZpedY0Lz4hlyuUxSqZTKtnFOBNqpkenkRZIOi
kCc/cxRonv+cbyrmwGeDVXwjx1QgMUolJk5/Q2KRcvEHef5zmjk71ZQFEtAZ
VvJzbpolO5NXFQC0LbUy8mB2skkC+hu2GG0c2gwQNGjqggQHR4FG8jNPSY01
pCdaxPGANhvSAY5m5ZyKgg18pvgz6G9A5qLRWTJBH5iLPKhLhnOANGNM6Zdz
E/fHxfnGRp9KiwPaM4YjfCI0VSC1gcRgp5RmKr4h0MRwimBTprEjdzqKj9bH
Abb25GpKbxZAssiOFqhn0LGxE9bntBWzsTKUB0gf/BHth0B65NPGYQT+M6tz
NPBsmw5t/0q+dTvvfufeXQGUZoM8HnwusCDC58wudgT+848ThrNHtnCb94It
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
fSw1rTQbkWdm3mlW2Y1sWwjCbIHsM4WgnfpHujgLXAx+FJTQ5Rq/RYcl2GBg
OTpZXI2xleANNaxXMCS6MxG4QqeehXoH6gsEizyujYLe8NL0TmnPtDL1WdRf
03mgDemQaH06FYKnQK8uuFnBBkbz//LXTI4GgBcVmITAoQuaCJoLHoTL/h2f
r8Zl/y77d9n//137rwp83ixqsCGTVQP8+VHgM8t5ck017Z/966OK+IMUJa5O
wL74+PhGjRoJeM5AWmbpsW1btGhR6gxMvnDhAtCegRGN+DNWYw0fiz87XrEK
RFpws2yKBAS2Kuy/T+9vunTu1LkTu48vOnb4on37TwMC7thozwEIPtuQ55v+
/v43btwA5BnA5/z8fJFIVBP7f+s3/5fH/lmo1Jrsk9GWXh1+rNbwY43OVDwq
1/1ub90fD9TE/v84kTR3zI1Zo27+Nur2pF+vV4U/70rdsT1ZqTCz8wVLUybN
Sps6L2P6QtGW3Zk1XP858Nkm9Vwe3a8sqndJ+NclD76y3O9hCetuCetqCeti
Ce1sudfRfO8Lc8hn5uBPLSFtS0PacMhzSIuy4GalgR+VBjauyfo/8s/5zff3
5XOfFvu44+b7+5OlpV+sUDZfpGi+SM4fudxikaL/VpVU9bAs/rvSoH9Y7v6j
NOjvLJcF/d0UP1Zbg/X/A6/kV+YknotV45ybSsoD0vU9toouxWnos2AfB+yR
xEtNptJyLPQJKGbN/7UquTr2zywZIWKKP0/dddltxmK3OXPcFv3VcGPgG/1G
deje6/Kli9GpottpyRHSB5mFqfdCQo8ePpaSknrk9IGZp79fGjJq4uWfe/kO
fnG6l9voFX8buOT6g1SB/jONP6h53PoP6HHRWI9ys4m7sbIyc+QD5Zplud3a
5fX8zHj3lrRv56IJI7RH9uW0bZw/oJt67zZLckLFw4esbrnRWPBTP+ihJuu/
ODFveZ/fZ7Xet7jLwag7GYXFykKZ8vbJmPmfHWCFs9v4csfWu1lmJyu++T0p
MqtIrmL5pHfAXPf9s1vv2z/tqrxI6dr/VN/+XfsfwbTQWxNMu+Z/df/z37H/
p6NCOjSW47eUMAwneC2VTUQaO3FEgLGVmuDDVPlZwLKmYDVymOlHQYmasJfx
W80zUfOwKW8AC5plLjohgaBVOjXqb/ASHFb8Wa5TggSHXGeV4JDpFYVaWaEt
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
Enzoy0PDP9zS459bu3/o0+PDbT24o0+P1tu6Xr3095I7dcru1C69U6v0Tu2S
UHd9zkV2E5pnsf7/Y270SxMjXpoYTo4RdaZE9vZJ3XWnKDBNGyHRh4v1N5M0
PjcKuq5PfnVyBNSx1eea/NMzujr2j/EHKeZMtTiUSuV1/7vfTNr92g+Hnhtx
0m3in24zr7l53nRbeMvN84bb6A1u305w6z/1hb5z3um/cNzsdSsmfOczpPGd
Ge6XJn6WGB3uiGmD/kZ11n9HJQ1BVm/fIF88+7HVnuH6nxCSuWH82Skdd45s
uXFkS5+Rn/iM4o6bR7XcNKrlxtGtfGb23LdlynlxUt5T2D/++Whc+x/X/uc/
Yf9DrVpLzEZwC09n/zhalYPkMpYL+qTJkVGME4gNFQoFIskAQWtsiLHKpoMB
XyFBGms66kJjKwEKjSNXEza1xgZ3498OVkMsmmtO8GegQIPsMzsqlNZvuRIt
8z1qjU6rZFfgZTdYBv0NwJ8VOqXKoIb4gxwR2sZ/lnEotJ3+RoGhGPDnfFNx
nlV/oyjXVJhjLswy5WeZC7JLOAq02CJF/DmzVFopwVGSy4cg5CSg0wjJM73U
iraB/oZNKZdD5wBwplEIgf8Mod8ABoT4g1ZtBBv+zApj+PiDACdaUWiTVfm5
MvggDzJzqs428Y3KbAtm54g/AxE6mkCmFHGlghICLFpQn2ogU6AY4Wj4KlyX
RNFjAXFaoOAhwHIpmIyZcqppptxpuKggyiG9EapNTe/LqR4IHT9FoekI8V76
egw8EngGCmesmrvv2lGsdjTwLPCfrSA2n/+IutLPYxC8L5ixkqsfoUtmH+/m
R/TzGLhomzc8cZ4IvZs1B10Ov9Q77h3asZOggsj+HoMWb/OO5SU4gP8MaDOz
opPBF9w7fgr6G6j0kmQRo/4GYM68FLkkuSQrgUOeJYg/o5K5jfMsAS0OhKBZ
Zvafaj1WEp4pBRrOqVdyXNh1/67vCnFLQB0HVccS+BQYAO0BdxQa4rVpwm/p
GARNqnBwGgc3h3VwMBoHf42FKpXd3p5uydQkKi7tROB3dLYk6IFelDpEwYDp
eOjOgdoJ3cIJ7hFnBu2HPgs6ZnrieldOBykYsMZl/y77d9m/y/7/9+z/7W2S
KsDn5xYmcnXWpVcBPj+3MAHwZ+0T2j/7t4nRaHwUcutIeGYlj0WDnyFNuoZd
PWlzHf8v8aew/+7du9WpU5ukWpheJekVktq1a/ds7X/Imht1hh6u89Ohuj8e
rPvjgbo/7K/7vW/d7/fV+24PIM/1vt1Zf9D2+oO2NRi4tcGALQ36+zTov/m1
fhu5zCPPLHeefLAm9r9xXdzPHsEeQ0PGjbm3dEnE7ydSgoKyV3hHjPo10OOn
u0N/CvHgSNFhrMKIn4Nm/Rbqd0VM/07RRGuy/hsKgw25lw15l9WSP/1jEn6P
zD8VVXD8Qe6JB3knHuQeC8s+HpZzPDT72L0sLodIjodIjgaJjwWLE+OvaUUn
dOITOtFxbe51zbNb/+NzU9YH7nPfNeifm7t/sLnbB1u6sZMRB9zVN2uX3n7F
cru2MayDMX2jvjhWp9UIunrq9f+t3yJfHP/gUbnWpPA3pke+Pj3ylYnhVVR7
d2Zkdey/qKiIYs6OchmsjkgkCgkJ2eZ7+tupPo2HbHi53y63IUfcfjjh9t0h
t68W1+o2u8WguSNmrNy26+DVq1fv3Lq5ds54734f7P1tiDQni8LOeKHi4uLq
rP+PBZYl/6graVT78TD1M13/5TJFbEjG2a2B68eenf3Vvomddk3stH1e34Pb
Z1+6uCckLSabA4Seyv6faP3XuPY/rv3P//b+R/Pftv+H+wWjhR4EADXWpPaA
FejTxBKB7AbODELNWvKqRUMQbIEUhtpZ0tigY+yKCjg79oMPCCoIqgHUDNrO
SH6m5yAEDURoDovmopyyo0KlVSk1SpVOrdSq1HoN8p8VOiWEIFToVaC/IefJ
z4XaYtDfkBkV+ToZ8J+luqJ8oyyPk4AuzDUW5hgLWMb4g1l8/EHgP6ebc3j9
jcoQhIA/c8gz5EpuZ6XyQCrRJeBgupKsSuVnHtbjkT0Qf7bqP6PaBuDPscZ0
QKTZxxhDWrQ+FSHoGA6CTqc4M7BkY81WQQYUgo7lxZ+jbCg0BBwE2JnGH0QE
lcpHCGQoKLhK0WABW1hALUY2MsLCgmrIuI5yUJmmzR0pykh4piXhuiSB0Ael
XgNNOsr+fh053hSEp5mqf1SHK97XYyDynzv37kqrcfizx0B2ckf6wOfsLvYI
/NLusDo+Z3fDawJ2Dtop7Lhwq9eibd7Wp8m/X8D4g/GWzDHzJgI0zY78iVWk
BV5hbD27B+xq3PzJQyf8zIW25BFpeLWRYJOAttqhERjRnIniu5JEEzNazoaB
Am0jQldqmwP+DPxnduRzDqLNtlczuRCFEPBn6stwRcVFTOAs9HzCNdOp08SV
FhdbweKJzpou5lioIS7PqXtC70nDRtDKuK9QEx0tRy9DnQu9Iu2TehDqthz9
ER2bxt7HYQl+i4MR7EawXEeYAOj+dPZvTqkHwTnEu6BvS2kSeDSt/a91NMRZ
awnxQG2TexI8XHwF79S5483i1akzQuty3MY4ltCNhJps3jDRCo5DUtveMtPh
0Zt12b/WZf8u+3fZv/1j0rjsn9j/5CvSBhsJ+LzCDnx2W5DAmlcNPjden4I3
/kT2r+UhaFb5f0XpAlMZn+D8qUfiFG2uPgSts4HPLvt/avsvLlYlJhbKZCpH
+y8sUCUlFoSF5cXFFUg4wvP/r/VfpVFlFEoOPDgz6uz8z3Z/+8Gmbn7n/14S
1NQc+cN/tXctP5Ikd5k/gINPIHFBMnDwv8KBGwj5iAScQEK2JRsQrOyZXWs9
Y/mx5mAJJIRAsjkg8TiAbK8fuwh5+jGPnu6uRz+qu7rrlVWVmfWungMR8WV8
/WVkze7szk7v7E7kpkpRWZGRkRFfxy/3y2++3+zkH6bjs+mkOPejWv+/+m/H
v/Pl7d/60tZnv3jvA+085XNf2Xnrf1rPgv8g/6CyxCSNF4uFqdztdmv1xv/+
39a//Ou/3777/S/89Tf/4i/f/OrXv/2P//yDH7/9s52d3WazaeqY9gf9/j/9
/fcP9/foKR1YcCRJ8iz4f19i+Rn3Z8F/9gHX/2Ey6l4OOu1+57zfbQ96F8mw
PzJY+fThPz7/5K/A+p+9fM//qWyk37nx3IDUDYYiExo5lz+WILfgWHw2gvR/
aI3EMr/yfXfuXwFA7Rww20Hn2ZT+mnuyuuhtVqid6bOhFDQMN5CCkGVQ0Nkk
t+bPTvlMC44kG41nGfjnfpaMoIKeDJPCfMP6P/fMbs03BlYCPU8688GlNd/o
t2fdthU/91qzy9aiA/4Z/s/Hq4si/6BPQQgX6OZV2+mfz8E/k1uj/zPKVIea
/fHymPyzZfnA9S0Krg8c4N7qGISzLayOqH82nzvTQ/Xf2JldOz8X5hsw2Zjs
g46+FkU7MhM0pvvcp+0GnJ9BR5NYVuEx/J+VjsavzCFYFTyrFrqqUiZ3rT4Y
VfpaOfAt37cg619AIKtBNHsS5BZUcbV6cbBXQQ95irlfCrnVEHsjVc5emaaQ
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

    "], {{0, 899.8875140607424}, {1439.820022497188, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{1439.820022497188, 899.8875140607424},
  PlotRange->{{0, 1439.820022497188}, {0, 899.8875140607424}}]], "Input",Expre\
ssionUUID->"13a0b7ad-5920-45f4-b7b7-2c4501bab1bf"]
},
WindowSize->{1440., 831.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"59be380f-6e1c-4b3e-b2f4-91f1530ea0fa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 205, 3, 28, "Input",ExpressionUUID->"6eff9c67-61f9-433a-a7f9-00f08fb05bf1"],
Cell[788, 27, 180, 3, 48, "Output",ExpressionUUID->"e544e60b-ddec-416e-822c-2789fdbb947f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1005, 35, 369, 6, 41, "WolframAlphaLong",ExpressionUUID->"4168af5d-a064-4a52-b9e8-f701ced0e5e1"],
Cell[1377, 43, 31483, 600, 646, "Print",ExpressionUUID->"5fad2a75-0857-47d9-b1d2-cd03413129c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32897, 648, 187, 2, 41, "WolframAlphaLong",ExpressionUUID->"4e2bcd4b-a535-465b-8427-637c887c9b7d"],
Cell[33087, 652, 31488, 600, 646, "Print",ExpressionUUID->"ffd127f5-89a8-41d8-897e-e63529f4a9ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64612, 1257, 183, 2, 41, "WolframAlphaLong",ExpressionUUID->"0e6ae375-511e-4aa8-9ffe-4704f0d4319e"],
Cell[64798, 1261, 32959, 632, 670, "Print",ExpressionUUID->"d00e158a-4285-4efc-8c8a-44a8688e5c92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97794, 1898, 185, 2, 41, "WolframAlphaLong",ExpressionUUID->"1108bce2-b117-4c79-8f16-02fae18baf70"],
Cell[97982, 1902, 29082, 580, 740, "Print",ExpressionUUID->"433d1d0f-fbc4-4bb1-9923-ea69e9770a0f"]
}, Open  ]],
Cell[127079, 2485, 213649, 3507, 764, "Input",ExpressionUUID->"13a0b7ad-5920-45f4-b7b7-2c4501bab1bf"]
}
]
*)

